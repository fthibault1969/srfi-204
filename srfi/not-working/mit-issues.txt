Grabbed Adam Massmann's implementation of match after several attempts to use
r7rs style library definition.
Using his load file with match (modified for for vector matches like original)
gives:

$ rlwrap mit-scheme
MIT/GNU Scheme running under GNU/Linux
<cut 6 lines from banner>
  Release 10.1.5 || Microcode 15.3 || Runtime 15.7 || SF 4.41 || LIAR/x86-64 4.118

1 ]=> (load "load")

;Loading "load.scm"...
;  Loading "match.scm"... done
;... done
;Unspecified return value

1 ]=> (shinn-match '(1) (a #t))

;Unbound variable: sk
<cut 6 error/reset lines>

Tried Adam's module instead, but even after adding match to
(declare (usual-integrations))
[so (declare (usual-integrations match))]
got:

1 ]=> (load "load")

;Loading "load.scm"...
;  Loading "match.scm"...
;The object (opt (subform (cons (keep-if id=? else) (* any)))), passed as an argument to
 pattern->spar, is not a syntax-parser pattern.

also on (shinn-match '(1 2 2 2) ((a b ...) b)), the return value is fk instead of sk, so ellipsis
matching isn't working for some reason. My module didn't change after I added (declare (usual-integrations))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; second round issues:

edited in second version, got:


1 ]=> (load "load")

;Loading "load.scm"...
;  Loading "match.scm"...
;Missing ellipsis in expansion. #f
;To continue, call RESTART with an option number:
; (RESTART 1) => Return to read-eval-print level 1.

after fixing vector issue (from other issue),  removing last
cond-expand, uncommenting auxiliary syntax, got:

1 ]=> (load "load")

;Loading "load.scm"...
;  Loading "match.scm"... done
;... done
;Unspecified return value

1 ]=> (shinn-match '(1 2 2 2) ((1 2 2 2) 'ok)(_ 'fail))

;Ill-formed special form: (#[syntactic-closure 12] _ (#0=#[syntactic-closure 13] #1=(#[syntactic-closure 14] (quote fail)) ()) (#[syntactic-closure 15] #[syntactic-closure 16] 
_ (#2=(quote (1 2 2 2)) (#[syntactic-closure 17] #2#)) (#0# #1#) ...))
<snip>

> (shinn-match '(1 2 2 2) ((a b ...) b))

;Unbound variable: fk
<snip>
3 error> 
