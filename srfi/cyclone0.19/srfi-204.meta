;; This file was automatically generated by the Cyclone Scheme compiler
((match-bound-identifier=? lambda (expr$10145$10162 rename$10146$10163 compare$10147$10164) (car ((lambda (tmp$10166$10168) (if tmp$10166$10168 tmp$10166$10168 (cons (error "no expansion for" expr$10145$10162) #f))) ((lambda (v.1$10153$10169) (if (pair? v.1$10153$10169) ((lambda (v.2$10154$10171) ((lambda (a$10172) ((lambda (v.3$10155$10173) (if (pair? v.3$10155$10173) ((lambda (v.4$10156$10175) ((lambda (b$10176) ((lambda (v.5$10157$10177) (if (pair? v.5$10157$10177) ((lambda (v.6$10158$10179) ((lambda (sk$10180) ((lambda (v.7$10159$10181) (if (pair? v.7$10159$10181) ((lambda (v.8$10160$10183) ((lambda (fk$10184) ((lambda (v.9$10161$10185) (if (null? v.9$10161$10185) (cons (cons-source (rename$10146$10163 (quote let-syntax)) (cons-source (cons-source (cons-source b$10176 (cons-source (cons-source (rename$10146$10163 (quote syntax-rules)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (syntax-rules ()))) (quote ()) (quote ((syntax-rules ())))) (quote (b (syntax-rules ())))) (quote ()) (quote ((b (syntax-rules ()))))) (cons-source (cons-source (rename$10146$10163 (quote let-syntax)) (cons-source (cons-source (cons-source (rename$10146$10163 (quote eq)) (cons-source (cons-source (rename$10146$10163 (quote syntax-rules)) (cons-source (cons-source b$10176 (quote ()) (quote (b))) (cons-source (cons-source (cons-source (rename$10146$10163 (quote eq)) (cons-source b$10176 (quote ()) (quote (b))) (quote (eq b))) (cons-source sk$10180 (quote ()) (quote (sk))) (quote ((eq b) sk))) (cons-source (cons-source (cons-source (rename$10146$10163 (quote eq)) (cons-source (rename$10146$10163 (quote _)) (quote ()) (quote (_))) (quote (eq _))) (cons-source fk$10184 (quote ()) (quote (fk))) (quote ((eq _) fk))) (quote ()) (quote (((eq _) fk)))) (quote (((eq b) sk) ((eq _) fk)))) (quote ((b) ((eq b) sk) ((eq _) fk)))) (quote (syntax-rules (b) ((eq b) sk) ((eq _) fk)))) (quote ()) (quote ((syntax-rules (b) ((eq b) sk) ((eq _) fk))))) (quote (eq (syntax-rules (b) ((eq b) sk) ((eq _) fk))))) (quote ()) (quote ((eq (syntax-rules (b) ((eq b) sk) ((eq _) fk)))))) (cons-source (cons-source (rename$10146$10163 (quote eq)) (cons-source a$10172 (quote ()) (quote (a))) (quote (eq a))) (quote ()) (quote ((eq a)))) (quote (((eq (syntax-rules (b) ((eq b) sk) ((eq _) fk)))) (eq a)))) (quote (let-syntax ((eq (syntax-rules (b) ((eq b) sk) ((eq _) fk)))) (eq a)))) (quote ()) (quote ((let-syntax ((eq (syntax-rules (b) ((eq b) sk) ((eq _) fk)))) (eq a))))) (quote (((b (syntax-rules ()))) (let-syntax ((eq (syntax-rules (b) ((eq b) sk) ((eq _) fk)))) (eq a))))) (quote (let-syntax ((b (syntax-rules ()))) (let-syntax ((eq (syntax-rules (b) ((eq b) sk) ((eq _) fk)))) (eq a))))) #f) #f)) (cdr v.7$10159$10181))) v.8$10160$10183)) (car v.7$10159$10181)) #f)) (cdr v.5$10157$10177))) v.6$10158$10179)) (car v.5$10157$10177)) #f)) (cdr v.3$10155$10173))) v.4$10156$10175)) (car v.3$10155$10173)) #f)) (cdr v.1$10153$10169))) v.2$10154$10171)) (car v.1$10153$10169)) #f)) (cdr expr$10145$10162))))) (match-check-identifier lambda (expr$10005$10037 rename$10006$10038 compare$10007$10039) (car ((lambda (tmp$10041$10043) (if tmp$10041$10043 tmp$10041$10043 ((lambda (tmp$10045$10047) (if tmp$10045$10047 tmp$10045$10047 ((lambda (tmp$10049$10051) (if tmp$10049$10051 tmp$10049$10051 (cons (error "no expansion for" expr$10005$10037) #f))) ((lambda (v.18$10030$10052) (if (pair? v.18$10030$10052) ((lambda (v.19$10031$10054) ((lambda (x$10055) ((lambda (v.20$10032$10056) (if (pair? v.20$10032$10056) ((lambda (v.21$10033$10058) ((lambda (success-k$10059) ((lambda (v.22$10034$10060) (if (pair? v.22$10034$10060) ((lambda (v.23$10035$10062) ((lambda (failure-k$10063) ((lambda (v.24$10036$10064) (if (null? v.24$10036$10064) (cons (cons-source (rename$10006$10038 (quote let-syntax)) (cons-source (cons-source (cons-source (rename$10006$10038 (quote sym?)) (cons-source (cons-source (rename$10006$10038 (quote syntax-rules)) (cons-source (quote ()) (cons-source (cons-source (cons-source (rename$10006$10038 (quote sym?)) (cons-source x$10055 (cons-source (rename$10006$10038 (quote sk)) (cons-source (rename$10006$10038 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote (x sk fk))) (quote (sym? x sk fk))) (cons-source (rename$10006$10038 (quote sk)) (quote ()) (quote (sk))) (quote ((sym? x sk fk) sk))) (cons-source (cons-source (cons-source (rename$10006$10038 (quote sym?)) (cons-source (rename$10006$10038 (quote y)) (cons-source (rename$10006$10038 (quote sk)) (cons-source (rename$10006$10038 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote (y sk fk))) (quote (sym? y sk fk))) (cons-source (rename$10006$10038 (quote fk)) (quote ()) (quote (fk))) (quote ((sym? y sk fk) fk))) (quote ()) (quote (((sym? y sk fk) fk)))) (quote (((sym? x sk fk) sk) ((sym? y sk fk) fk)))) (quote (() ((sym? x sk fk) sk) ((sym? y sk fk) fk)))) (quote (syntax-rules () ((sym? x sk fk) sk) ((sym? y sk fk) fk)))) (quote ()) (quote ((syntax-rules () ((sym? x sk fk) sk) ((sym? y sk fk) fk))))) (quote (sym? (syntax-rules () ((sym? x sk fk) sk) ((sym? y sk fk) fk))))) (quote ()) (quote ((sym? (syntax-rules () ((sym? x sk fk) sk) ((sym? y sk fk) fk)))))) (cons-source (cons-source (rename$10006$10038 (quote sym?)) (cons-source (rename$10006$10038 (quote abracadabra)) (cons-source success-k$10059 (cons-source failure-k$10063 (quote ()) (quote (failure-k))) (quote (success-k failure-k))) (quote (abracadabra success-k failure-k))) (quote (sym? abracadabra success-k failure-k))) (quote ()) (quote ((sym? abracadabra success-k failure-k)))) (quote (((sym? (syntax-rules () ((sym? x sk fk) sk) ((sym? y sk fk) fk)))) (sym? abracadabra success-k failure-k)))) (quote (let-syntax ((sym? (syntax-rules () ((sym? x sk fk) sk) ((sym? y sk fk) fk)))) (sym? abracadabra success-k failure-k)))) #f) #f)) (cdr v.22$10034$10060))) v.23$10035$10062)) (car v.22$10034$10060)) #f)) (cdr v.20$10032$10056))) v.21$10033$10058)) (car v.20$10032$10056)) #f)) (cdr v.18$10030$10052))) v.19$10031$10054)) (car v.18$10030$10052)) #f)) (cdr expr$10005$10037))))) ((lambda (v.10$10022$10066) (if (pair? v.10$10022$10066) ((lambda (v.11$10023$10068) (if (vector? v.11$10023$10068) ((lambda (v.12$10024$10070) (if (list? v.12$10024$10070) ((lambda (x$10072) ((lambda (v.13$10025$10073) (if (pair? v.13$10025$10073) ((lambda (v.14$10026$10075) ((lambda (success-k$10076) ((lambda (v.15$10027$10077) (if (pair? v.15$10027$10077) ((lambda (v.16$10028$10079) ((lambda (failure-k$10080) ((lambda (v.17$10029$10081) (if (null? v.17$10029$10081) (cons failure-k$10080 #f) #f)) (cdr v.15$10027$10077))) v.16$10028$10079)) (car v.15$10027$10077)) #f)) (cdr v.13$10025$10073))) v.14$10026$10075)) (car v.13$10025$10073)) #f)) (cdr v.10$10022$10066))) v.12$10024$10070) #f)) (vector->list v.11$10023$10068)) #f)) (car v.10$10022$10066)) #f)) (cdr expr$10005$10037))))) ((lambda (v.1$10013$10083) (if (pair? v.1$10013$10083) ((lambda (v.2$10014$10085) (if (pair? v.2$10014$10085) ((lambda (v.3$10015$10087) ((lambda (x$10088) ((lambda (v.4$10016$10089) ((lambda (y$10090) ((lambda (v.5$10017$10091) (if (pair? v.5$10017$10091) ((lambda (v.6$10018$10093) ((lambda (success-k$10094) ((lambda (v.7$10019$10095) (if (pair? v.7$10019$10095) ((lambda (v.8$10020$10097) ((lambda (failure-k$10098) ((lambda (v.9$10021$10099) (if (null? v.9$10021$10099) (cons failure-k$10098 #f) #f)) (cdr v.7$10019$10095))) v.8$10020$10097)) (car v.7$10019$10095)) #f)) (cdr v.5$10017$10091))) v.6$10018$10093)) (car v.5$10017$10091)) #f)) (cdr v.1$10013$10083))) v.4$10016$10089)) (cdr v.2$10014$10085))) v.3$10015$10087)) (car v.2$10014$10085)) #f)) (car v.1$10013$10083)) #f)) (cdr expr$10005$10037))))) (match-check-ellipsis lambda (expr$9865$9897 rename$9866$9898 compare$9867$9899) (car ((lambda (tmp$9901$9903) (if tmp$9901$9903 tmp$9901$9903 ((lambda (tmp$9905$9907) (if tmp$9905$9907 tmp$9905$9907 ((lambda (tmp$9909$9911) (if tmp$9909$9911 tmp$9909$9911 (cons (error "no expansion for" expr$9865$9897) #f))) ((lambda (v.18$9890$9912) (if (pair? v.18$9890$9912) ((lambda (v.19$9891$9914) ((lambda (id$9915) ((lambda (v.20$9892$9916) (if (pair? v.20$9892$9916) ((lambda (v.21$9893$9918) ((lambda (success-k$9919) ((lambda (v.22$9894$9920) (if (pair? v.22$9894$9920) ((lambda (v.23$9895$9922) ((lambda (failure-k$9923) ((lambda (v.24$9896$9924) (if (null? v.24$9896$9924) (cons (cons-source (rename$9866$9898 (quote let-syntax)) (cons-source (cons-source (cons-source (rename$9866$9898 (quote ellipsis?)) (cons-source (cons-source (rename$9866$9898 (quote syntax-rules)) (cons-source (quote ()) (cons-source (cons-source (cons-source (rename$9866$9898 (quote ellipsis?)) (cons-source (cons-source (rename$9866$9898 (quote foo)) (cons-source id$9915 (quote ()) (quote (id))) (quote (foo id))) (cons-source (rename$9866$9898 (quote sk)) (cons-source (rename$9866$9898 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote ((foo id) sk fk))) (quote (ellipsis? (foo id) sk fk))) (cons-source (rename$9866$9898 (quote sk)) (quote ()) (quote (sk))) (quote ((ellipsis? (foo id) sk fk) sk))) (cons-source (cons-source (cons-source (rename$9866$9898 (quote ellipsis?)) (cons-source (rename$9866$9898 (quote other)) (cons-source (rename$9866$9898 (quote sk)) (cons-source (rename$9866$9898 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote (other sk fk))) (quote (ellipsis? other sk fk))) (cons-source (rename$9866$9898 (quote fk)) (quote ()) (quote (fk))) (quote ((ellipsis? other sk fk) fk))) (quote ()) (quote (((ellipsis? other sk fk) fk)))) (quote (((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk)))) (quote (() ((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk)))) (quote (syntax-rules () ((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk)))) (quote ()) (quote ((syntax-rules () ((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk))))) (quote (ellipsis? (syntax-rules () ((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk))))) (quote ()) (quote ((ellipsis? (syntax-rules () ((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk)))))) (cons-source (cons-source (rename$9866$9898 (quote ellipsis?)) (cons-source (cons-source (rename$9866$9898 (quote a)) (cons-source (rename$9866$9898 (quote b)) (cons-source (rename$9866$9898 (quote c)) (quote ()) (quote (c))) (quote (b c))) (quote (a b c))) (cons-source success-k$9919 (cons-source failure-k$9923 (quote ()) (quote (failure-k))) (quote (success-k failure-k))) (quote ((a b c) success-k failure-k))) (quote (ellipsis? (a b c) success-k failure-k))) (quote ()) (quote ((ellipsis? (a b c) success-k failure-k)))) (quote (((ellipsis? (syntax-rules () ((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk)))) (ellipsis? (a b c) success-k failure-k)))) (quote (let-syntax ((ellipsis? (syntax-rules () ((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk)))) (ellipsis? (a b c) success-k failure-k)))) #f) #f)) (cdr v.22$9894$9920))) v.23$9895$9922)) (car v.22$9894$9920)) #f)) (cdr v.20$9892$9916))) v.21$9893$9918)) (car v.20$9892$9916)) #f)) (cdr v.18$9890$9912))) v.19$9891$9914)) (car v.18$9890$9912)) #f)) (cdr expr$9865$9897))))) ((lambda (v.10$9882$9926) (if (pair? v.10$9882$9926) ((lambda (v.11$9883$9928) (if (vector? v.11$9883$9928) ((lambda (v.12$9884$9930) (if (list? v.12$9884$9930) ((lambda (a$9932) ((lambda (v.13$9885$9933) (if (pair? v.13$9885$9933) ((lambda (v.14$9886$9935) ((lambda (success-k$9936) ((lambda (v.15$9887$9937) (if (pair? v.15$9887$9937) ((lambda (v.16$9888$9939) ((lambda (failure-k$9940) ((lambda (v.17$9889$9941) (if (null? v.17$9889$9941) (cons failure-k$9940 #f) #f)) (cdr v.15$9887$9937))) v.16$9888$9939)) (car v.15$9887$9937)) #f)) (cdr v.13$9885$9933))) v.14$9886$9935)) (car v.13$9885$9933)) #f)) (cdr v.10$9882$9926))) v.12$9884$9930) #f)) (vector->list v.11$9883$9928)) #f)) (car v.10$9882$9926)) #f)) (cdr expr$9865$9897))))) ((lambda (v.1$9873$9943) (if (pair? v.1$9873$9943) ((lambda (v.2$9874$9945) (if (pair? v.2$9874$9945) ((lambda (v.3$9875$9947) ((lambda (a$9948) ((lambda (v.4$9876$9949) ((lambda (b$9950) ((lambda (v.5$9877$9951) (if (pair? v.5$9877$9951) ((lambda (v.6$9878$9953) ((lambda (success-k$9954) ((lambda (v.7$9879$9955) (if (pair? v.7$9879$9955) ((lambda (v.8$9880$9957) ((lambda (failure-k$9958) ((lambda (v.9$9881$9959) (if (null? v.9$9881$9959) (cons failure-k$9958 #f) #f)) (cdr v.7$9879$9955))) v.8$9880$9957)) (car v.7$9879$9955)) #f)) (cdr v.5$9877$9951))) v.6$9878$9953)) (car v.5$9877$9951)) #f)) (cdr v.1$9873$9943))) v.4$9876$9949)) (cdr v.2$9874$9945))) v.3$9875$9947)) (car v.2$9874$9945)) #f)) (car v.1$9873$9943)) #f)) (cdr expr$9865$9897))))) (match-cons lambda (expr$9808$9823 rename$9809$9824 compare$9810$9825) (car ((lambda (tmp$9827$9829) (if tmp$9827$9829 tmp$9827$9829 (cons (error "no expansion for" expr$9808$9823) #f))) ((lambda (v.1$9816$9830) (if (pair? v.1$9816$9830) ((lambda (v.2$9817$9832) (if (list? v.2$9817$9832) ((lambda (k$9834) ((lambda (v.3$9818$9835) (if (pair? v.3$9818$9835) ((lambda (v.4$9819$9837) ((lambda (p$9838) ((lambda (v.5$9820$9839) (if (pair? v.5$9820$9839) ((lambda (v.6$9821$9841) ((lambda (q$9842) ((lambda (v.7$9822$9843) (if (null? v.7$9822$9843) (cons (append (map (lambda (k$9845) k$9845) k$9834) (cons-source (cons-source p$9838 q$9842 (quote (p . q))) (quote ()) (quote ((p . q))))) #f) #f)) (cdr v.5$9820$9839))) v.6$9821$9841)) (car v.5$9820$9839)) #f)) (cdr v.3$9818$9835))) v.4$9819$9837)) (car v.3$9818$9835)) #f)) (cdr v.1$9816$9830))) v.2$9817$9832) #f)) (car v.1$9816$9830)) #f)) (cdr expr$9808$9823))))) (match-rewrite2 lambda (expr$9742$9759 rename$9743$9760 compare$9744$9761) (car ((lambda (tmp$9763$9765) (if tmp$9763$9765 tmp$9763$9765 (cons (error "no expansion for" expr$9742$9759) #f))) ((lambda (v.1$9750$9766) (if (pair? v.1$9750$9766) ((lambda (v.2$9751$9768) ((lambda (q$9769) ((lambda (v.3$9752$9770) (if (pair? v.3$9752$9770) ((lambda (v.4$9753$9772) ((lambda (ids$9773) ((lambda (v.5$9754$9774) (if (pair? v.5$9754$9774) ((lambda (v.6$9755$9776) (if (list? v.6$9755$9776) ((lambda (k$9778) ((lambda (v.7$9756$9779) (if (pair? v.7$9756$9779) ((lambda (v.8$9757$9781) ((lambda (p$9782) ((lambda (v.9$9758$9783) (if (null? v.9$9758$9783) (cons (cons-source (rename$9743$9760 (quote match-rewrite)) (cons-source q$9769 (cons-source ids$9773 (cons-source (append (map (lambda (k$9785) k$9785) k$9778) (cons-source p$9782 (quote ()) (quote (p)))) (quote ()) (quote ((k ... p)))) (quote (ids (k ... p)))) (quote (q ids (k ... p)))) (quote (match-rewrite q ids (k ... p)))) #f) #f)) (cdr v.7$9756$9779))) v.8$9757$9781)) (car v.7$9756$9779)) #f)) (cdr v.5$9754$9774))) v.6$9755$9776) #f)) (car v.5$9754$9774)) #f)) (cdr v.3$9752$9770))) v.4$9753$9772)) (car v.3$9752$9770)) #f)) (cdr v.1$9750$9766))) v.2$9751$9768)) (car v.1$9750$9766)) #f)) (cdr expr$9742$9759))))) (match-rewrite lambda (expr$9483$9538 rename$9484$9539 compare$9485$9540) (car ((lambda (tmp$9542$9544) (if tmp$9542$9544 tmp$9542$9544 ((lambda (tmp$9546$9548) (if tmp$9546$9548 tmp$9546$9548 ((lambda (tmp$9550$9552) (if tmp$9550$9552 tmp$9550$9552 ((lambda (tmp$9554$9556) (if tmp$9554$9556 tmp$9554$9556 ((lambda (tmp$9558$9560) (if tmp$9558$9560 tmp$9558$9560 (cons (error "no expansion for" expr$9483$9538) #f))) ((lambda (v.35$9525$9561) (if (pair? v.35$9525$9561) ((lambda (v.36$9526$9563) ((lambda (p$9564) ((lambda (v.37$9527$9565) (if (pair? v.37$9527$9565) ((lambda (v.38$9528$9567) (if (pair? v.38$9528$9567) ((lambda (v.39$9529$9569) (if (pair? v.39$9529$9569) ((lambda (v.40$9530$9571) ((lambda (id$9572) ((lambda (v.41$9531$9573) (if (pair? v.41$9531$9573) ((lambda (v.42$9532$9575) ((lambda (tmp$9576) ((lambda (v.43$9533$9577) (if (null? v.43$9533$9577) ((lambda (v.44$9534$9579) ((lambda (rest$9580) ((lambda (v.45$9535$9581) (if (pair? v.45$9535$9581) ((lambda (v.46$9536$9583) (if (list? v.46$9536$9583) ((lambda (k$9585) ((lambda (v.47$9537$9586) (if (null? v.47$9537$9586) (cons (cons-source (rename$9484$9539 (quote match-bound-identifier=?)) (cons-source p$9564 (cons-source id$9572 (cons-source (append (map (lambda (k$9588) k$9588) k$9585) (cons-source tmp$9576 (quote ()) (quote (tmp)))) (cons-source (cons-source (rename$9484$9539 (quote match-rewrite)) (cons-source p$9564 (cons-source rest$9580 (cons-source k$9585 (quote ()) (quote ((k ...)))) (quote (rest (k ...)))) (quote (p rest (k ...)))) (quote (match-rewrite p rest (k ...)))) (quote ()) (quote ((match-rewrite p rest (k ...))))) (quote ((k ... tmp) (match-rewrite p rest (k ...))))) (quote (id (k ... tmp) (match-rewrite p rest (k ...))))) (quote (p id (k ... tmp) (match-rewrite p rest (k ...))))) (quote (match-bound-identifier=? p id (k ... tmp) (match-rewrite p rest (k ...))))) #f) #f)) (cdr v.45$9535$9581))) v.46$9536$9583) #f)) (car v.45$9535$9581)) #f)) (cdr v.37$9527$9565))) v.44$9534$9579)) (cdr v.38$9528$9567)) #f)) (cdr v.41$9531$9573))) v.42$9532$9575)) (car v.41$9531$9573)) #f)) (cdr v.39$9529$9569))) v.40$9530$9571)) (car v.39$9529$9569)) #f)) (car v.38$9528$9567)) #f)) (car v.37$9527$9565)) #f)) (cdr v.35$9525$9561))) v.36$9526$9563)) (car v.35$9525$9561)) #f)) (cdr expr$9483$9538))))) ((lambda (v.28$9518$9589) (if (pair? v.28$9518$9589) ((lambda (v.29$9519$9591) ((lambda (p$9592) ((lambda (v.30$9520$9593) (if (pair? v.30$9520$9593) ((lambda (v.31$9521$9595) (if (null? v.31$9521$9595) ((lambda (v.32$9522$9597) (if (pair? v.32$9522$9597) ((lambda (v.33$9523$9599) (if (list? v.33$9523$9599) ((lambda (k$9601) ((lambda (v.34$9524$9602) (if (null? v.34$9524$9602) (cons (append (map (lambda (k$9604) k$9604) k$9601) (cons-source p$9592 (quote ()) (quote (p)))) #f) #f)) (cdr v.32$9522$9597))) v.33$9523$9599) #f)) (car v.32$9522$9597)) #f)) (cdr v.30$9520$9593)) #f)) (car v.30$9520$9593)) #f)) (cdr v.28$9518$9589))) v.29$9519$9591)) (car v.28$9518$9589)) #f)) (cdr expr$9483$9538))))) ((lambda (v.21$9511$9605) (if (pair? v.21$9511$9605) ((lambda (v.22$9512$9607) (if (null? v.22$9512$9607) ((lambda (v.23$9513$9609) (if (pair? v.23$9513$9609) ((lambda (v.24$9514$9611) ((lambda (ids$9612) ((lambda (v.25$9515$9613) (if (pair? v.25$9515$9613) ((lambda (v.26$9516$9615) (if (list? v.26$9516$9615) ((lambda (k$9617) ((lambda (v.27$9517$9618) (if (null? v.27$9517$9618) (cons (append (map (lambda (k$9620) k$9620) k$9617) (cons-source (quote ()) (quote ()) (quote (())))) #f) #f)) (cdr v.25$9515$9613))) v.26$9516$9615) #f)) (car v.25$9515$9613)) #f)) (cdr v.23$9513$9609))) v.24$9514$9611)) (car v.23$9513$9609)) #f)) (cdr v.21$9511$9605)) #f)) (car v.21$9511$9605)) #f)) (cdr expr$9483$9538))))) ((lambda (v.12$9502$9621) (if (pair? v.12$9502$9621) ((lambda (v.13$9503$9623) (if (pair? v.13$9503$9623) ((lambda (v.14$9504$9625) ((lambda (p$9626) ((lambda (v.15$9505$9627) ((lambda (q$9628) ((lambda (v.16$9506$9629) (if (pair? v.16$9506$9629) ((lambda (v.17$9507$9631) ((lambda (ids$9632) ((lambda (v.18$9508$9633) (if (pair? v.18$9508$9633) ((lambda (v.19$9509$9635) ((lambda (k$9636) ((lambda (v.20$9510$9637) (if (null? v.20$9510$9637) (cons (cons-source (rename$9484$9539 (quote match-rewrite)) (cons-source p$9626 (cons-source ids$9632 (cons-source (cons-source (rename$9484$9539 (quote match-rewrite2)) (cons-source q$9628 (cons-source ids$9632 (cons-source (cons-source (rename$9484$9539 (quote match-cons)) (cons-source k$9636 (quote ()) (quote (k))) (quote (match-cons k))) (quote ()) (quote ((match-cons k)))) (quote (ids (match-cons k)))) (quote (q ids (match-cons k)))) (quote (match-rewrite2 q ids (match-cons k)))) (quote ()) (quote ((match-rewrite2 q ids (match-cons k))))) (quote (ids (match-rewrite2 q ids (match-cons k))))) (quote (p ids (match-rewrite2 q ids (match-cons k))))) (quote (match-rewrite p ids (match-rewrite2 q ids (match-cons k))))) #f) #f)) (cdr v.18$9508$9633))) v.19$9509$9635)) (car v.18$9508$9633)) #f)) (cdr v.16$9506$9629))) v.17$9507$9631)) (car v.16$9506$9629)) #f)) (cdr v.12$9502$9621))) v.15$9505$9627)) (cdr v.13$9503$9623))) v.14$9504$9625)) (car v.13$9503$9623)) #f)) (car v.12$9502$9621)) #f)) (cdr expr$9483$9538))))) ((lambda (v.1$9491$9639) (if (pair? v.1$9491$9639) ((lambda (v.2$9492$9641) (if (pair? v.2$9492$9641) ((lambda (v.3$9493$9643) (if (compare$9485$9540 v.3$9493$9643 (rename$9484$9539 (quote quote))) ((lambda (v.4$9494$9645) (if (pair? v.4$9494$9645) ((lambda (v.5$9495$9647) ((lambda (x$9648) ((lambda (v.6$9496$9649) (if (null? v.6$9496$9649) ((lambda (v.7$9497$9651) (if (pair? v.7$9497$9651) ((lambda (v.8$9498$9653) ((lambda (ids$9654) ((lambda (v.9$9499$9655) (if (pair? v.9$9499$9655) ((lambda (v.10$9500$9657) (if (list? v.10$9500$9657) ((lambda (k$9659) ((lambda (v.11$9501$9660) (if (null? v.11$9501$9660) (cons (append (map (lambda (k$9662) k$9662) k$9659) (cons-source (cons-source (rename$9484$9539 (quote quote)) (cons-source x$9648 (quote ()) (quote (x))) (quote (quote x))) (quote ()) (quote ((quote x))))) #f) #f)) (cdr v.9$9499$9655))) v.10$9500$9657) #f)) (car v.9$9499$9655)) #f)) (cdr v.7$9497$9651))) v.8$9498$9653)) (car v.7$9497$9651)) #f)) (cdr v.1$9491$9639)) #f)) (cdr v.4$9494$9645))) v.5$9495$9647)) (car v.4$9494$9645)) #f)) (cdr v.2$9492$9641)) #f)) (car v.2$9492$9641)) #f)) (car v.1$9491$9639)) #f)) (cdr expr$9483$9538))))) (match-letrec-two-step lambda (expr$9408$9427 rename$9409$9428 compare$9410$9429) (car ((lambda (tmp$9431$9433) (if tmp$9431$9433 tmp$9431$9433 (cons (error "no expansion for" expr$9408$9427) #f))) ((lambda (v.1$9416$9434) (if (pair? v.1$9416$9434) ((lambda (v.2$9417$9436) ((lambda (next$9437) ((lambda (v.3$9418$9438) (if (pair? v.3$9418$9438) ((lambda (v.4$9419$9440) (if (list? v.4$9419$9440) ((lambda (rewrites$9442) ((lambda (v.5$9420$9443) (if (pair? v.5$9420$9443) ((lambda (v.6$9421$9445) ((lambda (ids$9446) ((lambda (v.7$9422$9447) (if (pair? v.7$9422$9447) ((lambda (v.8$9423$9449) ((lambda (val$9450) ((lambda (v.9$9424$9451) (if (pair? v.9$9424$9451) ((lambda (v.10$9425$9453) ((lambda (var$9454) ((lambda (v.11$9426$9455) (if (null? v.11$9426$9455) (cons (cons-source (rename$9409$9428 (quote match-letrec-two)) (cons-source next$9437 (cons-source (append (map (lambda (rewrites$9457) rewrites$9457) rewrites$9442) (cons-source (cons-source var$9454 (cons-source val$9450 (quote ()) (quote (val))) (quote (var val))) (quote ()) (quote ((var val))))) (cons-source ids$9446 (quote ()) (quote (ids))) (quote ((rewrites ... (var val)) ids))) (quote (next (rewrites ... (var val)) ids))) (quote (match-letrec-two next (rewrites ... (var val)) ids))) #f) #f)) (cdr v.9$9424$9451))) v.10$9425$9453)) (car v.9$9424$9451)) #f)) (cdr v.7$9422$9447))) v.8$9423$9449)) (car v.7$9422$9447)) #f)) (cdr v.5$9420$9443))) v.6$9421$9445)) (car v.5$9420$9443)) #f)) (cdr v.3$9418$9438))) v.4$9419$9440) #f)) (car v.3$9418$9438)) #f)) (cdr v.1$9416$9434))) v.2$9417$9436)) (car v.1$9416$9434)) #f)) (cdr expr$9408$9427))))) (match-letrec-two lambda (expr$9129$9188 rename$9130$9189 compare$9131$9190) (car ((lambda (tmp$9192$9194) (if tmp$9192$9194 tmp$9192$9194 ((lambda (tmp$9196$9198) (if tmp$9196$9198 tmp$9196$9198 (cons (error "no expansion for" expr$9129$9188) #f))) ((lambda (v.28$9164$9199) (if (pair? v.28$9164$9199) ((lambda (v.29$9165$9201) (if (pair? v.29$9165$9201) ((lambda (v.30$9166$9203) (if (pair? v.30$9166$9203) ((lambda (v.31$9167$9205) (if (pair? v.31$9167$9205) ((lambda (v.32$9168$9207) ((lambda (var$9208) ((lambda (v.33$9169$9209) (if (pair? v.33$9169$9209) ((lambda (v.34$9170$9211) ((lambda (val$9212) ((lambda (v.35$9171$9213) (if (null? v.35$9171$9213) ((lambda (v.36$9172$9215) ((lambda (rest$9216) ((lambda (v.37$9173$9217) ((lambda (body$9218) ((lambda (v.38$9174$9219) (if (pair? v.38$9174$9219) ((lambda (v.39$9175$9221) ((lambda (w.40$9176$9223 var2-ls42$9178$9224 val2-ls43$9179$9225) ((lambda (lp.41$9177$9226) (set! lp.41$9177$9226 (lambda (w.40$9176$9227 var2-ls42$9178$9228 val2-ls43$9179$9229) (if (null? w.40$9176$9227) ((lambda (var2$9230 val2$9231) ((lambda (v.49$9185$9232) (if (pair? v.49$9185$9232) ((lambda (v.50$9186$9234) ((lambda (ids$9235) ((lambda (v.51$9187$9236) (if (null? v.51$9187$9236) (cons (cons-source (rename$9130$9189 (quote match-rewrite)) (cons-source var$9208 (cons-source ids$9235 (cons-source (cons-source (rename$9130$9189 (quote match-letrec-two-step)) (cons-source (cons-source rest$9216 body$9218 (quote (rest . body))) (cons-source (map (lambda (var2$9238 val2$9239) (cons-source var2$9238 (cons-source val2$9239 (quote ()) (quote (val2))) (quote (var2 val2)))) var2$9230 val2$9231) (cons-source ids$9235 (cons-source val$9212 (quote ()) (quote (val))) (quote (ids val))) (quote (((var2 val2) ...) ids val))) (quote ((rest . body) ((var2 val2) ...) ids val))) (quote (match-letrec-two-step (rest . body) ((var2 val2) ...) ids val))) (quote ()) (quote ((match-letrec-two-step (rest . body) ((var2 val2) ...) ids val)))) (quote (ids (match-letrec-two-step (rest . body) ((var2 val2) ...) ids val)))) (quote (var ids (match-letrec-two-step (rest . body) ((var2 val2) ...) ids val)))) (quote (match-rewrite var ids (match-letrec-two-step (rest . body) ((var2 val2) ...) ids val)))) #f) #f)) (cdr v.49$9185$9232))) v.50$9186$9234)) (car v.49$9185$9232)) #f)) (cdr v.38$9174$9219))) (reverse var2-ls42$9178$9228) (reverse val2-ls43$9179$9229)) (if (pair? w.40$9176$9227) ((lambda (v.44$9180$9241) (if (pair? v.44$9180$9241) ((lambda (v.45$9181$9243) ((lambda (var2$9244) ((lambda (v.46$9182$9245) (if (pair? v.46$9182$9245) ((lambda (v.47$9183$9247) ((lambda (val2$9248) ((lambda (v.48$9184$9249) (if (null? v.48$9184$9249) (lp.41$9177$9226 (cdr w.40$9176$9227) (cons var2$9244 var2-ls42$9178$9228) (cons val2$9248 val2-ls43$9179$9229)) #f)) (cdr v.46$9182$9245))) v.47$9183$9247)) (car v.46$9182$9245)) #f)) (cdr v.44$9180$9241))) v.45$9181$9243)) (car v.44$9180$9241)) #f)) (car w.40$9176$9227)) #f)))) (lp.41$9177$9226 w.40$9176$9223 var2-ls42$9178$9224 val2-ls43$9179$9225)) #f)) v.39$9175$9221 (quote ()) (quote ()))) (car v.38$9174$9219)) #f)) (cdr v.28$9164$9199))) v.37$9173$9217)) (cdr v.29$9165$9201))) v.36$9172$9215)) (cdr v.30$9166$9203)) #f)) (cdr v.33$9169$9209))) v.34$9170$9211)) (car v.33$9169$9209)) #f)) (cdr v.31$9167$9205))) v.32$9168$9207)) (car v.31$9167$9205)) #f)) (car v.30$9166$9203)) #f)) (car v.29$9165$9201)) #f)) (car v.28$9164$9199)) #f)) (cdr expr$9129$9188))))) ((lambda (v.1$9137$9251) (if (pair? v.1$9137$9251) ((lambda (v.2$9138$9253) (if (pair? v.2$9138$9253) ((lambda (v.3$9139$9255) (if (null? v.3$9139$9255) ((lambda (v.4$9140$9257) ((lambda (body$9258) ((lambda (v.5$9141$9259) (if (pair? v.5$9141$9259) ((lambda (v.6$9142$9261) ((lambda (w.7$9143$9263 var2-ls9$9145$9264 val2-ls10$9146$9265) ((lambda (lp.8$9144$9266) (set! lp.8$9144$9266 (lambda (w.7$9143$9267 var2-ls9$9145$9268 val2-ls10$9146$9269) (if (null? w.7$9143$9267) ((lambda (var2$9270 val2$9271) ((lambda (v.16$9152$9272) (if (pair? v.16$9152$9272) ((lambda (v.17$9153$9274) ((lambda (w.18$9154$9276 id-ls20$9156$9277 tmp-ls21$9157$9278) ((lambda (lp.19$9155$9279) (set! lp.19$9155$9279 (lambda (w.18$9154$9280 id-ls20$9156$9281 tmp-ls21$9157$9282) (if (null? w.18$9154$9280) ((lambda (id$9283 tmp$9284) ((lambda (v.27$9163$9285) (if (null? v.27$9163$9285) (cons (cons-source (rename$9130$9189 (quote let)) (cons-source (map (lambda (id$9287) (cons-source id$9287 (cons-source (cons-source (rename$9130$9189 (quote if)) (cons-source #f (cons-source #f (quote ()) (quote (#f))) (quote (#f #f))) (quote (if #f #f))) (quote ()) (quote ((if #f #f)))) (quote (id (if #f #f))))) id$9283) (cons-source (cons-source (rename$9130$9189 (quote match-let)) (cons-source (map (lambda (var2$9288 val2$9289) (cons-source var2$9288 (cons-source val2$9289 (quote ()) (quote (val2))) (quote (var2 val2)))) var2$9270 val2$9271) (append (map (lambda (id$9290 tmp$9291) (cons-source (rename$9130$9189 (quote set!)) (cons-source id$9290 (cons-source tmp$9291 (quote ()) (quote (tmp))) (quote (id tmp))) (quote (set! id tmp)))) id$9283 tmp$9284) body$9258) (quote (((var2 val2) ...) (set! id tmp) ... . body))) (quote (match-let ((var2 val2) ...) (set! id tmp) ... . body))) (quote ()) (quote ((match-let ((var2 val2) ...) (set! id tmp) ... . body)))) (quote (((id (if #f #f)) ...) (match-let ((var2 val2) ...) (set! id tmp) ... . body)))) (quote (let ((id (if #f #f)) ...) (match-let ((var2 val2) ...) (set! id tmp) ... . body)))) #f) #f)) (cdr v.16$9152$9272))) (reverse id-ls20$9156$9281) (reverse tmp-ls21$9157$9282)) (if (pair? w.18$9154$9280) ((lambda (v.22$9158$9293) (if (pair? v.22$9158$9293) ((lambda (v.23$9159$9295) ((lambda (id$9296) ((lambda (v.24$9160$9297) (if (pair? v.24$9160$9297) ((lambda (v.25$9161$9299) ((lambda (tmp$9300) ((lambda (v.26$9162$9301) (if (null? v.26$9162$9301) (lp.19$9155$9279 (cdr w.18$9154$9280) (cons id$9296 id-ls20$9156$9281) (cons tmp$9300 tmp-ls21$9157$9282)) #f)) (cdr v.24$9160$9297))) v.25$9161$9299)) (car v.24$9160$9297)) #f)) (cdr v.22$9158$9293))) v.23$9159$9295)) (car v.22$9158$9293)) #f)) (car w.18$9154$9280)) #f)))) (lp.19$9155$9279 w.18$9154$9276 id-ls20$9156$9277 tmp-ls21$9157$9278)) #f)) v.17$9153$9274 (quote ()) (quote ()))) (car v.16$9152$9272)) #f)) (cdr v.5$9141$9259))) (reverse var2-ls9$9145$9268) (reverse val2-ls10$9146$9269)) (if (pair? w.7$9143$9267) ((lambda (v.11$9147$9304) (if (pair? v.11$9147$9304) ((lambda (v.12$9148$9306) ((lambda (var2$9307) ((lambda (v.13$9149$9308) (if (pair? v.13$9149$9308) ((lambda (v.14$9150$9310) ((lambda (val2$9311) ((lambda (v.15$9151$9312) (if (null? v.15$9151$9312) (lp.8$9144$9266 (cdr w.7$9143$9267) (cons var2$9307 var2-ls9$9145$9268) (cons val2$9311 val2-ls10$9146$9269)) #f)) (cdr v.13$9149$9308))) v.14$9150$9310)) (car v.13$9149$9308)) #f)) (cdr v.11$9147$9304))) v.12$9148$9306)) (car v.11$9147$9304)) #f)) (car w.7$9143$9267)) #f)))) (lp.8$9144$9266 w.7$9143$9263 var2-ls9$9145$9264 val2-ls10$9146$9265)) #f)) v.6$9142$9261 (quote ()) (quote ()))) (car v.5$9141$9259)) #f)) (cdr v.1$9137$9251))) v.4$9140$9257)) (cdr v.2$9138$9253)) #f)) (car v.2$9138$9253)) #f)) (car v.1$9137$9251)) #f)) (cdr expr$9129$9188))))) (match-letrec-one lambda (expr$8935$8977 rename$8936$8978 compare$8937$8979) (car ((lambda (tmp$8981$8983) (if tmp$8981$8983 tmp$8981$8983 ((lambda (tmp$8985$8987) (if tmp$8985$8987 tmp$8985$8987 (cons (error "no expansion for" expr$8935$8977) #f))) ((lambda (v.19$8961$8988) (if (pair? v.19$8961$8988) ((lambda (v.20$8962$8990) (if (null? v.20$8962$8990) ((lambda (v.21$8963$8992) (if (pair? v.21$8963$8992) ((lambda (v.22$8964$8994) ((lambda (expr$8995) ((lambda (v.23$8965$8996) (if (pair? v.23$8965$8996) ((lambda (v.24$8966$8998) ((lambda (w.25$8967$9000 id-ls27$8969$9001 tmp-ls28$8970$9002) ((lambda (lp.26$8968$9003) (set! lp.26$8968$9003 (lambda (w.25$8967$9004 id-ls27$8969$9005 tmp-ls28$8970$9006) (if (null? w.25$8967$9004) ((lambda (id$9007 tmp$9008) ((lambda (v.34$8976$9009) (if (null? v.34$8976$9009) (cons (cons-source (rename$8936$8978 (quote match-letrec-two)) (cons-source expr$8995 (cons-source (quote ()) (cons-source (map (lambda (id$9011 tmp$9012) (cons-source id$9011 (cons-source tmp$9012 (quote ()) (quote (tmp))) (quote (id tmp)))) id$9007 tmp$9008) (quote ()) (quote (((id tmp) ...)))) (quote (() ((id tmp) ...)))) (quote (expr () ((id tmp) ...)))) (quote (match-letrec-two expr () ((id tmp) ...)))) #f) #f)) (cdr v.23$8965$8996))) (reverse id-ls27$8969$9005) (reverse tmp-ls28$8970$9006)) (if (pair? w.25$8967$9004) ((lambda (v.29$8971$9014) (if (pair? v.29$8971$9014) ((lambda (v.30$8972$9016) ((lambda (id$9017) ((lambda (v.31$8973$9018) (if (pair? v.31$8973$9018) ((lambda (v.32$8974$9020) ((lambda (tmp$9021) ((lambda (v.33$8975$9022) (if (null? v.33$8975$9022) (lp.26$8968$9003 (cdr w.25$8967$9004) (cons id$9017 id-ls27$8969$9005) (cons tmp$9021 tmp-ls28$8970$9006)) #f)) (cdr v.31$8973$9018))) v.32$8974$9020)) (car v.31$8973$9018)) #f)) (cdr v.29$8971$9014))) v.30$8972$9016)) (car v.29$8971$9014)) #f)) (car w.25$8967$9004)) #f)))) (lp.26$8968$9003 w.25$8967$9000 id-ls27$8969$9001 tmp-ls28$8970$9002)) #f)) v.24$8966$8998 (quote ()) (quote ()))) (car v.23$8965$8996)) #f)) (cdr v.21$8963$8992))) v.22$8964$8994)) (car v.21$8963$8992)) #f)) (cdr v.19$8961$8988)) #f)) (car v.19$8961$8988)) #f)) (cdr expr$8935$8977))))) ((lambda (v.1$8943$9024) (if (pair? v.1$8943$9024) ((lambda (v.2$8944$9026) (if (pair? v.2$8944$9026) ((lambda (v.3$8945$9028) ((lambda (pat$9029) ((lambda (v.4$8946$9030) ((lambda (rest$9031) ((lambda (v.5$8947$9032) (if (pair? v.5$8947$9032) ((lambda (v.6$8948$9034) ((lambda (expr$9035) ((lambda (v.7$8949$9036) (if (pair? v.7$8949$9036) ((lambda (v.8$8950$9038) ((lambda (w.9$8951$9040 id-ls11$8953$9041 tmp-ls12$8954$9042) ((lambda (lp.10$8952$9043) (set! lp.10$8952$9043 (lambda (w.9$8951$9044 id-ls11$8953$9045 tmp-ls12$8954$9046) (if (null? w.9$8951$9044) ((lambda (id$9047 tmp$9048) ((lambda (v.18$8960$9049) (if (null? v.18$8960$9049) (cons (cons-source (rename$8936$8978 (quote match-extract-underscore)) (cons-source pat$9029 (cons-source (cons-source (rename$8936$8978 (quote match-letrec-one)) (cons-source rest$9031 (cons-source expr$9035 (quote ()) (quote (expr))) (quote (rest expr))) (quote (match-letrec-one rest expr))) (cons-source id$9047 (cons-source (map (lambda (id$9051 tmp$9052) (cons-source id$9051 (cons-source tmp$9052 (quote ()) (quote (tmp))) (quote (id tmp)))) id$9047 tmp$9048) (quote ()) (quote (((id tmp) ...)))) (quote ((id ...) ((id tmp) ...)))) (quote ((match-letrec-one rest expr) (id ...) ((id tmp) ...)))) (quote (pat (match-letrec-one rest expr) (id ...) ((id tmp) ...)))) (quote (match-extract-underscore pat (match-letrec-one rest expr) (id ...) ((id tmp) ...)))) #f) #f)) (cdr v.7$8949$9036))) (reverse id-ls11$8953$9045) (reverse tmp-ls12$8954$9046)) (if (pair? w.9$8951$9044) ((lambda (v.13$8955$9054) (if (pair? v.13$8955$9054) ((lambda (v.14$8956$9056) ((lambda (id$9057) ((lambda (v.15$8957$9058) (if (pair? v.15$8957$9058) ((lambda (v.16$8958$9060) ((lambda (tmp$9061) ((lambda (v.17$8959$9062) (if (null? v.17$8959$9062) (lp.10$8952$9043 (cdr w.9$8951$9044) (cons id$9057 id-ls11$8953$9045) (cons tmp$9061 tmp-ls12$8954$9046)) #f)) (cdr v.15$8957$9058))) v.16$8958$9060)) (car v.15$8957$9058)) #f)) (cdr v.13$8955$9054))) v.14$8956$9056)) (car v.13$8955$9054)) #f)) (car w.9$8951$9044)) #f)))) (lp.10$8952$9043 w.9$8951$9040 id-ls11$8953$9041 tmp-ls12$8954$9042)) #f)) v.8$8950$9038 (quote ()) (quote ()))) (car v.7$8949$9036)) #f)) (cdr v.5$8947$9032))) v.6$8948$9034)) (car v.5$8947$9032)) #f)) (cdr v.1$8943$9024))) v.4$8946$9030)) (cdr v.2$8944$9026))) v.3$8945$9028)) (car v.2$8944$9026)) #f)) (car v.1$8943$9024)) #f)) (cdr expr$8935$8977))))) (match-letrec lambda (expr$8850$8870 rename$8851$8871 compare$8852$8872) (car ((lambda (tmp$8874$8876) (if tmp$8874$8876 tmp$8874$8876 (cons (error "no expansion for" expr$8850$8870) #f))) ((lambda (v.1$8858$8877) (if (pair? v.1$8858$8877) ((lambda (v.2$8859$8879) ((lambda (w.3$8860$8881 pat-ls5$8862$8882 val-ls6$8863$8883) ((lambda (lp.4$8861$8884) (set! lp.4$8861$8884 (lambda (w.3$8860$8885 pat-ls5$8862$8886 val-ls6$8863$8887) (if (null? w.3$8860$8885) ((lambda (pat$8888 val$8889) ((lambda (v.12$8869$8890) ((lambda (body$8891) (cons (cons-source (rename$8851$8871 (quote match-letrec-one)) (cons-source pat$8888 (cons-source (cons-source (map (lambda (pat$8892 val$8893) (cons-source pat$8892 (cons-source val$8893 (quote ()) (quote (val))) (quote (pat val)))) pat$8888 val$8889) body$8891 (quote (((pat val) ...) . body))) (cons-source (quote ()) (quote ()) (quote (()))) (quote ((((pat val) ...) . body) ()))) (quote ((pat ...) (((pat val) ...) . body) ()))) (quote (match-letrec-one (pat ...) (((pat val) ...) . body) ()))) #f)) v.12$8869$8890)) (cdr v.1$8858$8877))) (reverse pat-ls5$8862$8886) (reverse val-ls6$8863$8887)) (if (pair? w.3$8860$8885) ((lambda (v.7$8864$8895) (if (pair? v.7$8864$8895) ((lambda (v.8$8865$8897) ((lambda (pat$8898) ((lambda (v.9$8866$8899) (if (pair? v.9$8866$8899) ((lambda (v.10$8867$8901) ((lambda (val$8902) ((lambda (v.11$8868$8903) (if (null? v.11$8868$8903) (lp.4$8861$8884 (cdr w.3$8860$8885) (cons pat$8898 pat-ls5$8862$8886) (cons val$8902 val-ls6$8863$8887)) #f)) (cdr v.9$8866$8899))) v.10$8867$8901)) (car v.9$8866$8899)) #f)) (cdr v.7$8864$8895))) v.8$8865$8897)) (car v.7$8864$8895)) #f)) (car w.3$8860$8885)) #f)))) (lp.4$8861$8884 w.3$8860$8881 pat-ls5$8862$8882 val-ls6$8863$8883)) #f)) v.2$8859$8879 (quote ()) (quote ()))) (car v.1$8858$8877)) #f)) (cdr expr$8850$8870))))) (match-let* lambda (expr$8769$8789 rename$8770$8790 compare$8771$8791) (car ((lambda (tmp$8793$8795) (if tmp$8793$8795 tmp$8793$8795 ((lambda (tmp$8797$8799) (if tmp$8797$8799 tmp$8797$8799 (cons (error "no expansion for" expr$8769$8789) #f))) ((lambda (v.4$8780$8800) (if (pair? v.4$8780$8800) ((lambda (v.5$8781$8802) (if (pair? v.5$8781$8802) ((lambda (v.6$8782$8804) (if (pair? v.6$8782$8804) ((lambda (v.7$8783$8806) ((lambda (pat$8807) ((lambda (v.8$8784$8808) (if (pair? v.8$8784$8808) ((lambda (v.9$8785$8810) ((lambda (expr$8811) ((lambda (v.10$8786$8812) (if (null? v.10$8786$8812) ((lambda (v.11$8787$8814) ((lambda (rest$8815) ((lambda (v.12$8788$8816) ((lambda (body$8817) (cons (cons-source (rename$8770$8790 (quote match)) (cons-source expr$8811 (cons-source (cons-source pat$8807 (cons-source (cons-source (rename$8770$8790 (quote match-let*)) (cons-source rest$8815 body$8817 (quote (rest . body))) (quote (match-let* rest . body))) (quote ()) (quote ((match-let* rest . body)))) (quote (pat (match-let* rest . body)))) (quote ()) (quote ((pat (match-let* rest . body))))) (quote (expr (pat (match-let* rest . body))))) (quote (match expr (pat (match-let* rest . body))))) #f)) v.12$8788$8816)) (cdr v.4$8780$8800))) v.11$8787$8814)) (cdr v.5$8781$8802)) #f)) (cdr v.8$8784$8808))) v.9$8785$8810)) (car v.8$8784$8808)) #f)) (cdr v.6$8782$8804))) v.7$8783$8806)) (car v.6$8782$8804)) #f)) (car v.5$8781$8802)) #f)) (car v.4$8780$8800)) #f)) (cdr expr$8769$8789))))) ((lambda (v.1$8777$8818) (if (pair? v.1$8777$8818) ((lambda (v.2$8778$8820) (if (null? v.2$8778$8820) ((lambda (v.3$8779$8822) ((lambda (body$8823) (cons (cons-source (rename$8770$8790 (quote let)) (cons-source (quote ()) body$8823 (quote (() . body))) (quote (let () . body))) #f)) v.3$8779$8822)) (cdr v.1$8777$8818)) #f)) (car v.1$8777$8818)) #f)) (cdr expr$8769$8789))))) (match-named-let lambda (expr$8581$8621 rename$8582$8622 compare$8583$8623) (car ((lambda (tmp$8625$8627) (if tmp$8625$8627 tmp$8625$8627 ((lambda (tmp$8629$8631) (if tmp$8629$8631 tmp$8629$8631 (cons (error "no expansion for" expr$8581$8621) #f))) ((lambda (v.20$8608$8632) (if (pair? v.20$8608$8632) ((lambda (v.21$8609$8634) ((lambda (loop$8635) ((lambda (v.22$8610$8636) (if (pair? v.22$8610$8636) ((lambda (v.23$8611$8638) (if (list? v.23$8611$8638) ((lambda (v$8640) ((lambda (v.24$8612$8641) (if (pair? v.24$8612$8641) ((lambda (v.25$8613$8643) (if (pair? v.25$8613$8643) ((lambda (v.26$8614$8645) (if (pair? v.26$8614$8645) ((lambda (v.27$8615$8647) ((lambda (pat$8648) ((lambda (v.28$8616$8649) (if (pair? v.28$8616$8649) ((lambda (v.29$8617$8651) ((lambda (expr$8652) ((lambda (v.30$8618$8653) (if (null? v.30$8618$8653) ((lambda (v.31$8619$8655) ((lambda (rest$8656) ((lambda (v.32$8620$8657) ((lambda (body$8658) (cons (cons-source (rename$8582$8622 (quote match-named-let)) (cons-source loop$8635 (cons-source (append (map (lambda (v$8659) v$8659) v$8640) (cons-source (cons-source pat$8648 (cons-source expr$8652 (cons-source (rename$8582$8622 (quote tmp)) (quote ()) (quote (tmp))) (quote (expr tmp))) (quote (pat expr tmp))) (quote ()) (quote ((pat expr tmp))))) (cons-source rest$8656 body$8658 (quote (rest . body))) (quote ((v ... (pat expr tmp)) rest . body))) (quote (loop (v ... (pat expr tmp)) rest . body))) (quote (match-named-let loop (v ... (pat expr tmp)) rest . body))) #f)) v.32$8620$8657)) (cdr v.24$8612$8641))) v.31$8619$8655)) (cdr v.25$8613$8643)) #f)) (cdr v.28$8616$8649))) v.29$8617$8651)) (car v.28$8616$8649)) #f)) (cdr v.26$8614$8645))) v.27$8615$8647)) (car v.26$8614$8645)) #f)) (car v.25$8613$8643)) #f)) (car v.24$8612$8641)) #f)) (cdr v.22$8610$8636))) v.23$8611$8638) #f)) (car v.22$8610$8636)) #f)) (cdr v.20$8608$8632))) v.21$8609$8634)) (car v.20$8608$8632)) #f)) (cdr expr$8581$8621))))) ((lambda (v.1$8589$8660) (if (pair? v.1$8589$8660) ((lambda (v.2$8590$8662) ((lambda (loop$8663) ((lambda (v.3$8591$8664) (if (pair? v.3$8591$8664) ((lambda (v.4$8592$8666) ((lambda (w.5$8593$8668 pat-ls7$8595$8669 expr-ls8$8596$8670 var-ls9$8597$8671) ((lambda (lp.6$8594$8672) (set! lp.6$8594$8672 (lambda (w.5$8593$8673 pat-ls7$8595$8674 expr-ls8$8596$8675 var-ls9$8597$8676) (if (null? w.5$8593$8673) ((lambda (pat$8677 expr$8678 var$8679) ((lambda (v.17$8605$8680) (if (pair? v.17$8605$8680) ((lambda (v.18$8606$8682) (if (null? v.18$8606$8682) ((lambda (v.19$8607$8684) ((lambda (body$8685) (cons (cons-source (rename$8582$8622 (quote let)) (cons-source loop$8663 (cons-source (map (lambda (var$8686 expr$8687) (cons-source var$8686 (cons-source expr$8687 (quote ()) (quote (expr))) (quote (var expr)))) var$8679 expr$8678) (cons-source (cons-source (rename$8582$8622 (quote match-let)) (cons-source (map (lambda (pat$8688 var$8689) (cons-source pat$8688 (cons-source var$8689 (quote ()) (quote (var))) (quote (pat var)))) pat$8677 var$8679) body$8685 (quote (((pat var) ...) . body))) (quote (match-let ((pat var) ...) . body))) (quote ()) (quote ((match-let ((pat var) ...) . body)))) (quote (((var expr) ...) (match-let ((pat var) ...) . body)))) (quote (loop ((var expr) ...) (match-let ((pat var) ...) . body)))) (quote (let loop ((var expr) ...) (match-let ((pat var) ...) . body)))) #f)) v.19$8607$8684)) (cdr v.17$8605$8680)) #f)) (car v.17$8605$8680)) #f)) (cdr v.3$8591$8664))) (reverse pat-ls7$8595$8674) (reverse expr-ls8$8596$8675) (reverse var-ls9$8597$8676)) (if (pair? w.5$8593$8673) ((lambda (v.10$8598$8691) (if (pair? v.10$8598$8691) ((lambda (v.11$8599$8693) ((lambda (pat$8694) ((lambda (v.12$8600$8695) (if (pair? v.12$8600$8695) ((lambda (v.13$8601$8697) ((lambda (expr$8698) ((lambda (v.14$8602$8699) (if (pair? v.14$8602$8699) ((lambda (v.15$8603$8701) ((lambda (var$8702) ((lambda (v.16$8604$8703) (if (null? v.16$8604$8703) (lp.6$8594$8672 (cdr w.5$8593$8673) (cons pat$8694 pat-ls7$8595$8674) (cons expr$8698 expr-ls8$8596$8675) (cons var$8702 var-ls9$8597$8676)) #f)) (cdr v.14$8602$8699))) v.15$8603$8701)) (car v.14$8602$8699)) #f)) (cdr v.12$8600$8695))) v.13$8601$8697)) (car v.12$8600$8695)) #f)) (cdr v.10$8598$8691))) v.11$8599$8693)) (car v.10$8598$8691)) #f)) (car w.5$8593$8673)) #f)))) (lp.6$8594$8672 w.5$8593$8668 pat-ls7$8595$8669 expr-ls8$8596$8670 var-ls9$8597$8671)) #f)) v.4$8592$8666 (quote ()) (quote ()) (quote ()))) (car v.3$8591$8664)) #f)) (cdr v.1$8589$8660))) v.2$8590$8662)) (car v.1$8589$8660)) #f)) (cdr expr$8581$8621))))) (match-let/aux lambda (expr$8129$8220 rename$8130$8221 compare$8131$8222) (car ((lambda (tmp$8224$8226) (if tmp$8224$8226 tmp$8224$8226 ((lambda (tmp$8228$8230) (if tmp$8228$8230 tmp$8228$8230 ((lambda (tmp$8232$8234) (if tmp$8232$8234 tmp$8232$8234 ((lambda (tmp$8236$8238) (if tmp$8236$8238 tmp$8236$8238 ((lambda (tmp$8240$8242) (if tmp$8240$8242 tmp$8240$8242 (cons (error "no expansion for" expr$8129$8220) #f))) ((lambda (v.71$8207$8243) (if (pair? v.71$8207$8243) ((lambda (v.72$8208$8245) (if (list? v.72$8208$8245) ((lambda (v$8247) ((lambda (v.73$8209$8248) (if (pair? v.73$8209$8248) ((lambda (v.74$8210$8250) (if (list? v.74$8210$8250) ((lambda (p$8252) ((lambda (v.75$8211$8253) (if (pair? v.75$8211$8253) ((lambda (v.76$8212$8255) (if (pair? v.76$8212$8255) ((lambda (v.77$8213$8257) (if (pair? v.77$8213$8257) ((lambda (v.78$8214$8259) ((lambda (a$8260) ((lambda (v.79$8215$8261) (if (pair? v.79$8215$8261) ((lambda (v.80$8216$8263) ((lambda (expr$8264) ((lambda (v.81$8217$8265) (if (null? v.81$8217$8265) ((lambda (v.82$8218$8267) ((lambda (rest$8268) ((lambda (v.83$8219$8269) ((lambda (body$8270) (cons (cons-source (rename$8130$8221 (quote match-let/aux)) (cons-source (append (map (lambda (v$8271) v$8271) v$8247) (cons-source (cons-source a$8260 (cons-source expr$8264 (quote ()) (quote (expr))) (quote (a expr))) (quote ()) (quote ((a expr))))) (cons-source p$8252 (cons-source rest$8268 body$8270 (quote (rest . body))) (quote ((p ...) rest . body))) (quote ((v ... (a expr)) (p ...) rest . body))) (quote (match-let/aux (v ... (a expr)) (p ...) rest . body))) #f)) v.83$8219$8269)) (cdr v.75$8211$8253))) v.82$8218$8267)) (cdr v.76$8212$8255)) #f)) (cdr v.79$8215$8261))) v.80$8216$8263)) (car v.79$8215$8261)) #f)) (cdr v.77$8213$8257))) v.78$8214$8259)) (car v.77$8213$8257)) #f)) (car v.76$8212$8255)) #f)) (car v.75$8211$8253)) #f)) (cdr v.73$8209$8248))) v.74$8210$8250) #f)) (car v.73$8209$8248)) #f)) (cdr v.71$8207$8243))) v.72$8208$8245) #f)) (car v.71$8207$8243)) #f)) (cdr expr$8129$8220))))) ((lambda (v.57$8193$8272) (if (pair? v.57$8193$8272) ((lambda (v.58$8194$8274) (if (list? v.58$8194$8274) ((lambda (v$8276) ((lambda (v.59$8195$8277) (if (pair? v.59$8195$8277) ((lambda (v.60$8196$8279) (if (list? v.60$8196$8279) ((lambda (p$8281) ((lambda (v.61$8197$8282) (if (pair? v.61$8197$8282) ((lambda (v.62$8198$8284) (if (pair? v.62$8198$8284) ((lambda (v.63$8199$8286) (if (pair? v.63$8199$8286) ((lambda (v.64$8200$8288) (if (vector? v.64$8200$8288) ((lambda (v.65$8201$8290) (if (list? v.65$8201$8290) ((lambda (a$8292) ((lambda (v.66$8202$8293) (if (pair? v.66$8202$8293) ((lambda (v.67$8203$8295) ((lambda (expr$8296) ((lambda (v.68$8204$8297) (if (null? v.68$8204$8297) ((lambda (v.69$8205$8299) ((lambda (rest$8300) ((lambda (v.70$8206$8301) ((lambda (body$8302) (cons (cons-source (rename$8130$8221 (quote match-let/aux)) (cons-source (append (map (lambda (v$8303) v$8303) v$8276) (cons-source (cons-source (rename$8130$8221 (quote tmp)) (cons-source expr$8296 (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr))))) (cons-source (append (map (lambda (p$8304) p$8304) p$8281) (cons-source (cons-source (list->vector a$8292) (cons-source (rename$8130$8221 (quote tmp)) (quote ()) (quote (tmp))) (quote (#(a ...) tmp))) (quote ()) (quote ((#(a ...) tmp))))) (cons-source rest$8300 body$8302 (quote (rest . body))) (quote ((p ... (#(a ...) tmp)) rest . body))) (quote ((v ... (tmp expr)) (p ... (#(a ...) tmp)) rest . body))) (quote (match-let/aux (v ... (tmp expr)) (p ... (#(a ...) tmp)) rest . body))) #f)) v.70$8206$8301)) (cdr v.61$8197$8282))) v.69$8205$8299)) (cdr v.62$8198$8284)) #f)) (cdr v.66$8202$8293))) v.67$8203$8295)) (car v.66$8202$8293)) #f)) (cdr v.63$8199$8286))) v.65$8201$8290) #f)) (vector->list v.64$8200$8288)) #f)) (car v.63$8199$8286)) #f)) (car v.62$8198$8284)) #f)) (car v.61$8197$8282)) #f)) (cdr v.59$8195$8277))) v.60$8196$8279) #f)) (car v.59$8195$8277)) #f)) (cdr v.57$8193$8272))) v.58$8194$8274) #f)) (car v.57$8193$8272)) #f)) (cdr expr$8129$8220))))) ((lambda (v.42$8178$8305) (if (pair? v.42$8178$8305) ((lambda (v.43$8179$8307) (if (list? v.43$8179$8307) ((lambda (v$8309) ((lambda (v.44$8180$8310) (if (pair? v.44$8180$8310) ((lambda (v.45$8181$8312) (if (list? v.45$8181$8312) ((lambda (p$8314) ((lambda (v.46$8182$8315) (if (pair? v.46$8182$8315) ((lambda (v.47$8183$8317) (if (pair? v.47$8183$8317) ((lambda (v.48$8184$8319) (if (pair? v.48$8184$8319) ((lambda (v.49$8185$8321) (if (pair? v.49$8185$8321) ((lambda (v.50$8186$8323) ((lambda (a$8324) ((lambda (v.51$8187$8325) ((lambda (b$8326) ((lambda (v.52$8188$8327) (if (pair? v.52$8188$8327) ((lambda (v.53$8189$8329) ((lambda (expr$8330) ((lambda (v.54$8190$8331) (if (null? v.54$8190$8331) ((lambda (v.55$8191$8333) ((lambda (rest$8334) ((lambda (v.56$8192$8335) ((lambda (body$8336) (cons (cons-source (rename$8130$8221 (quote match-let/aux)) (cons-source (append (map (lambda (v$8337) v$8337) v$8309) (cons-source (cons-source (rename$8130$8221 (quote tmp)) (cons-source expr$8330 (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr))))) (cons-source (append (map (lambda (p$8338) p$8338) p$8314) (cons-source (cons-source (cons-source a$8324 b$8326 (quote (a . b))) (cons-source (rename$8130$8221 (quote tmp)) (quote ()) (quote (tmp))) (quote ((a . b) tmp))) (quote ()) (quote (((a . b) tmp))))) (cons-source rest$8334 body$8336 (quote (rest . body))) (quote ((p ... ((a . b) tmp)) rest . body))) (quote ((v ... (tmp expr)) (p ... ((a . b) tmp)) rest . body))) (quote (match-let/aux (v ... (tmp expr)) (p ... ((a . b) tmp)) rest . body))) #f)) v.56$8192$8335)) (cdr v.46$8182$8315))) v.55$8191$8333)) (cdr v.47$8183$8317)) #f)) (cdr v.52$8188$8327))) v.53$8189$8329)) (car v.52$8188$8327)) #f)) (cdr v.48$8184$8319))) v.51$8187$8325)) (cdr v.49$8185$8321))) v.50$8186$8323)) (car v.49$8185$8321)) #f)) (car v.48$8184$8319)) #f)) (car v.47$8183$8317)) #f)) (car v.46$8182$8315)) #f)) (cdr v.44$8180$8310))) v.45$8181$8312) #f)) (car v.44$8180$8310)) #f)) (cdr v.42$8178$8305))) v.43$8179$8307) #f)) (car v.42$8178$8305)) #f)) (cdr expr$8129$8220))))) ((lambda (v.17$8153$8339) (if (pair? v.17$8153$8339) ((lambda (v.18$8154$8341) ((lambda (w.19$8155$8343 var-ls21$8157$8344 expr-ls22$8158$8345) ((lambda (lp.20$8156$8346) (set! lp.20$8156$8346 (lambda (w.19$8155$8347 var-ls21$8157$8348 expr-ls22$8158$8349) (if (null? w.19$8155$8347) ((lambda (var$8350 expr$8351) ((lambda (v.28$8164$8352) (if (pair? v.28$8164$8352) ((lambda (v.29$8165$8354) ((lambda (w.30$8166$8356 pat-ls32$8168$8357 tmp-ls33$8169$8358) ((lambda (lp.31$8167$8359) (set! lp.31$8167$8359 (lambda (w.30$8166$8360 pat-ls32$8168$8361 tmp-ls33$8169$8362) (if (null? w.30$8166$8360) ((lambda (pat$8363 tmp$8364) ((lambda (v.39$8175$8365) (if (pair? v.39$8175$8365) ((lambda (v.40$8176$8367) (if (null? v.40$8176$8367) ((lambda (v.41$8177$8369) ((lambda (body$8370) (cons (cons-source (rename$8130$8221 (quote let)) (cons-source (map (lambda (var$8371 expr$8372) (cons-source var$8371 (cons-source expr$8372 (quote ()) (quote (expr))) (quote (var expr)))) var$8350 expr$8351) (cons-source (cons-source (rename$8130$8221 (quote match-let*)) (cons-source (map (lambda (pat$8373 tmp$8374) (cons-source pat$8373 (cons-source tmp$8374 (quote ()) (quote (tmp))) (quote (pat tmp)))) pat$8363 tmp$8364) body$8370 (quote (((pat tmp) ...) . body))) (quote (match-let* ((pat tmp) ...) . body))) (quote ()) (quote ((match-let* ((pat tmp) ...) . body)))) (quote (((var expr) ...) (match-let* ((pat tmp) ...) . body)))) (quote (let ((var expr) ...) (match-let* ((pat tmp) ...) . body)))) #f)) v.41$8177$8369)) (cdr v.39$8175$8365)) #f)) (car v.39$8175$8365)) #f)) (cdr v.28$8164$8352))) (reverse pat-ls32$8168$8361) (reverse tmp-ls33$8169$8362)) (if (pair? w.30$8166$8360) ((lambda (v.34$8170$8376) (if (pair? v.34$8170$8376) ((lambda (v.35$8171$8378) ((lambda (pat$8379) ((lambda (v.36$8172$8380) (if (pair? v.36$8172$8380) ((lambda (v.37$8173$8382) ((lambda (tmp$8383) ((lambda (v.38$8174$8384) (if (null? v.38$8174$8384) (lp.31$8167$8359 (cdr w.30$8166$8360) (cons pat$8379 pat-ls32$8168$8361) (cons tmp$8383 tmp-ls33$8169$8362)) #f)) (cdr v.36$8172$8380))) v.37$8173$8382)) (car v.36$8172$8380)) #f)) (cdr v.34$8170$8376))) v.35$8171$8378)) (car v.34$8170$8376)) #f)) (car w.30$8166$8360)) #f)))) (lp.31$8167$8359 w.30$8166$8356 pat-ls32$8168$8357 tmp-ls33$8169$8358)) #f)) v.29$8165$8354 (quote ()) (quote ()))) (car v.28$8164$8352)) #f)) (cdr v.17$8153$8339))) (reverse var-ls21$8157$8348) (reverse expr-ls22$8158$8349)) (if (pair? w.19$8155$8347) ((lambda (v.23$8159$8387) (if (pair? v.23$8159$8387) ((lambda (v.24$8160$8389) ((lambda (var$8390) ((lambda (v.25$8161$8391) (if (pair? v.25$8161$8391) ((lambda (v.26$8162$8393) ((lambda (expr$8394) ((lambda (v.27$8163$8395) (if (null? v.27$8163$8395) (lp.20$8156$8346 (cdr w.19$8155$8347) (cons var$8390 var-ls21$8157$8348) (cons expr$8394 expr-ls22$8158$8349)) #f)) (cdr v.25$8161$8391))) v.26$8162$8393)) (car v.25$8161$8391)) #f)) (cdr v.23$8159$8387))) v.24$8160$8389)) (car v.23$8159$8387)) #f)) (car w.19$8155$8347)) #f)))) (lp.20$8156$8346 w.19$8155$8343 var-ls21$8157$8344 expr-ls22$8158$8345)) #f)) v.18$8154$8341 (quote ()) (quote ()))) (car v.17$8153$8339)) #f)) (cdr expr$8129$8220))))) ((lambda (v.1$8137$8397) (if (pair? v.1$8137$8397) ((lambda (v.2$8138$8399) ((lambda (w.3$8139$8401 var-ls5$8141$8402 expr-ls6$8142$8403) ((lambda (lp.4$8140$8404) (set! lp.4$8140$8404 (lambda (w.3$8139$8405 var-ls5$8141$8406 expr-ls6$8142$8407) (if (null? w.3$8139$8405) ((lambda (var$8408 expr$8409) ((lambda (v.12$8148$8410) (if (pair? v.12$8148$8410) ((lambda (v.13$8149$8412) (if (null? v.13$8149$8412) ((lambda (v.14$8150$8414) (if (pair? v.14$8150$8414) ((lambda (v.15$8151$8416) (if (null? v.15$8151$8416) ((lambda (v.16$8152$8418) ((lambda (body$8419) (cons (cons-source (rename$8130$8221 (quote let)) (cons-source (map (lambda (var$8420 expr$8421) (cons-source var$8420 (cons-source expr$8421 (quote ()) (quote (expr))) (quote (var expr)))) var$8408 expr$8409) body$8419 (quote (((var expr) ...) . body))) (quote (let ((var expr) ...) . body))) #f)) v.16$8152$8418)) (cdr v.14$8150$8414)) #f)) (car v.14$8150$8414)) #f)) (cdr v.12$8148$8410)) #f)) (car v.12$8148$8410)) #f)) (cdr v.1$8137$8397))) (reverse var-ls5$8141$8406) (reverse expr-ls6$8142$8407)) (if (pair? w.3$8139$8405) ((lambda (v.7$8143$8423) (if (pair? v.7$8143$8423) ((lambda (v.8$8144$8425) ((lambda (var$8426) ((lambda (v.9$8145$8427) (if (pair? v.9$8145$8427) ((lambda (v.10$8146$8429) ((lambda (expr$8430) ((lambda (v.11$8147$8431) (if (null? v.11$8147$8431) (lp.4$8140$8404 (cdr w.3$8139$8405) (cons var$8426 var-ls5$8141$8406) (cons expr$8430 expr-ls6$8142$8407)) #f)) (cdr v.9$8145$8427))) v.10$8146$8429)) (car v.9$8145$8427)) #f)) (cdr v.7$8143$8423))) v.8$8144$8425)) (car v.7$8143$8423)) #f)) (car w.3$8139$8405)) #f)))) (lp.4$8140$8404 w.3$8139$8401 var-ls5$8141$8402 expr-ls6$8142$8403)) #f)) v.2$8138$8399 (quote ()) (quote ()))) (car v.1$8137$8397)) #f)) (cdr expr$8129$8220))))) (match-let lambda (expr$7968$8002 rename$7969$8003 compare$7970$8004) (car ((lambda (tmp$8006$8008) (if tmp$8006$8008 tmp$8006$8008 ((lambda (tmp$8010$8012) (if tmp$8010$8012 tmp$8010$8012 (cons (error "no expansion for" expr$7968$8002) #f))) ((lambda (v.13$7988$8013) (if (pair? v.13$7988$8013) ((lambda (v.14$7989$8015) ((lambda (loop$8016) ((lambda (v.15$7990$8017) (if (pair? v.15$7990$8017) ((lambda (v.16$7991$8019) ((lambda (w.17$7992$8021 var-ls19$7994$8022 init-ls20$7995$8023) ((lambda (lp.18$7993$8024) (set! lp.18$7993$8024 (lambda (w.17$7992$8025 var-ls19$7994$8026 init-ls20$7995$8027) (if (null? w.17$7992$8025) ((lambda (var$8028 init$8029) ((lambda (v.26$8001$8030) ((lambda (body$8031) (cons (cons-source (rename$7969$8003 (quote match-named-let)) (cons-source loop$8016 (cons-source (quote ()) (cons-source (map (lambda (var$8032 init$8033) (cons-source var$8032 (cons-source init$8033 (quote ()) (quote (init))) (quote (var init)))) var$8028 init$8029) body$8031 (quote (((var init) ...) . body))) (quote (() ((var init) ...) . body))) (quote (loop () ((var init) ...) . body))) (quote (match-named-let loop () ((var init) ...) . body))) #f)) v.26$8001$8030)) (cdr v.15$7990$8017))) (reverse var-ls19$7994$8026) (reverse init-ls20$7995$8027)) (if (pair? w.17$7992$8025) ((lambda (v.21$7996$8035) (if (pair? v.21$7996$8035) ((lambda (v.22$7997$8037) ((lambda (var$8038) ((lambda (v.23$7998$8039) (if (pair? v.23$7998$8039) ((lambda (v.24$7999$8041) ((lambda (init$8042) ((lambda (v.25$8000$8043) (if (null? v.25$8000$8043) (lp.18$7993$8024 (cdr w.17$7992$8025) (cons var$8038 var-ls19$7994$8026) (cons init$8042 init-ls20$7995$8027)) #f)) (cdr v.23$7998$8039))) v.24$7999$8041)) (car v.23$7998$8039)) #f)) (cdr v.21$7996$8035))) v.22$7997$8037)) (car v.21$7996$8035)) #f)) (car w.17$7992$8025)) #f)))) (lp.18$7993$8024 w.17$7992$8021 var-ls19$7994$8022 init-ls20$7995$8023)) #f)) v.16$7991$8019 (quote ()) (quote ()))) (car v.15$7990$8017)) #f)) (cdr v.13$7988$8013))) v.14$7989$8015)) (car v.13$7988$8013)) #f)) (cdr expr$7968$8002))))) ((lambda (v.1$7976$8045) (if (pair? v.1$7976$8045) ((lambda (v.2$7977$8047) ((lambda (w.3$7978$8049 var-ls5$7980$8050 value-ls6$7981$8051) ((lambda (lp.4$7979$8052) (set! lp.4$7979$8052 (lambda (w.3$7978$8053 var-ls5$7980$8054 value-ls6$7981$8055) (if (null? w.3$7978$8053) ((lambda (var$8056 value$8057) ((lambda (v.12$7987$8058) ((lambda (body$8059) (cons (cons-source (rename$7969$8003 (quote match-let/aux)) (cons-source (quote ()) (cons-source (quote ()) (cons-source (map (lambda (var$8060 value$8061) (cons-source var$8060 (cons-source value$8061 (quote ()) (quote (value))) (quote (var value)))) var$8056 value$8057) body$8059 (quote (((var value) ...) . body))) (quote (() ((var value) ...) . body))) (quote (() () ((var value) ...) . body))) (quote (match-let/aux () () ((var value) ...) . body))) #f)) v.12$7987$8058)) (cdr v.1$7976$8045))) (reverse var-ls5$7980$8054) (reverse value-ls6$7981$8055)) (if (pair? w.3$7978$8053) ((lambda (v.7$7982$8063) (if (pair? v.7$7982$8063) ((lambda (v.8$7983$8065) ((lambda (var$8066) ((lambda (v.9$7984$8067) (if (pair? v.9$7984$8067) ((lambda (v.10$7985$8069) ((lambda (value$8070) ((lambda (v.11$7986$8071) (if (null? v.11$7986$8071) (lp.4$7979$8052 (cdr w.3$7978$8053) (cons var$8066 var-ls5$7980$8054) (cons value$8070 value-ls6$7981$8055)) #f)) (cdr v.9$7984$8067))) v.10$7985$8069)) (car v.9$7984$8067)) #f)) (cdr v.7$7982$8063))) v.8$7983$8065)) (car v.7$7982$8063)) #f)) (car w.3$7978$8053)) #f)))) (lp.4$7979$8052 w.3$7978$8049 var-ls5$7980$8050 value-ls6$7981$8051)) #f)) v.2$7977$8047 (quote ()) (quote ()))) (car v.1$7976$8045)) #f)) (cdr expr$7968$8002))))) (match-lambda* lambda (expr$7900$7916 rename$7901$7917 compare$7902$7918) (car ((lambda (tmp$7920$7922) (if tmp$7920$7922 tmp$7920$7922 (cons (error "no expansion for" expr$7900$7916) #f))) ((lambda (v.1$7908$7923) ((lambda (w.2$7909$7925 pattern-ls4$7911$7926 body-ls5$7912$7927) ((lambda (lp.3$7910$7928) (set! lp.3$7910$7928 (lambda (w.2$7909$7929 pattern-ls4$7911$7930 body-ls5$7912$7931) (if (null? w.2$7909$7929) ((lambda (pattern$7932 body$7933) (cons (cons-source (rename$7901$7917 (quote lambda)) (cons-source (rename$7901$7917 (quote expr)) (cons-source (cons-source (rename$7901$7917 (quote match)) (cons-source (rename$7901$7917 (quote expr)) (map (lambda (pattern$7934 body$7935) (cons-source pattern$7934 body$7935 (quote (pattern . body)))) pattern$7932 body$7933) (quote (expr (pattern . body) ...))) (quote (match expr (pattern . body) ...))) (quote ()) (quote ((match expr (pattern . body) ...)))) (quote (expr (match expr (pattern . body) ...)))) (quote (lambda expr (match expr (pattern . body) ...)))) #f)) (reverse pattern-ls4$7911$7930) (reverse body-ls5$7912$7931)) (if (pair? w.2$7909$7929) ((lambda (v.6$7913$7937) (if (pair? v.6$7913$7937) ((lambda (v.7$7914$7939) ((lambda (pattern$7940) ((lambda (v.8$7915$7941) ((lambda (body$7942) (lp.3$7910$7928 (cdr w.2$7909$7929) (cons pattern$7940 pattern-ls4$7911$7930) (cons body$7942 body-ls5$7912$7931))) v.8$7915$7941)) (cdr v.6$7913$7937))) v.7$7914$7939)) (car v.6$7913$7937)) #f)) (car w.2$7909$7929)) #f)))) (lp.3$7910$7928 w.2$7909$7925 pattern-ls4$7911$7926 body-ls5$7912$7927)) #f)) v.1$7908$7923 (quote ()) (quote ()))) (cdr expr$7900$7916))))) (match-lambda lambda (expr$7832$7848 rename$7833$7849 compare$7834$7850) (car ((lambda (tmp$7852$7854) (if tmp$7852$7854 tmp$7852$7854 (cons (error "no expansion for" expr$7832$7848) #f))) ((lambda (v.1$7840$7855) ((lambda (w.2$7841$7857 pattern-ls4$7843$7858 body-ls5$7844$7859) ((lambda (lp.3$7842$7860) (set! lp.3$7842$7860 (lambda (w.2$7841$7861 pattern-ls4$7843$7862 body-ls5$7844$7863) (if (null? w.2$7841$7861) ((lambda (pattern$7864 body$7865) (cons (cons-source (rename$7833$7849 (quote lambda)) (cons-source (cons-source (rename$7833$7849 (quote expr)) (quote ()) (quote (expr))) (cons-source (cons-source (rename$7833$7849 (quote match)) (cons-source (rename$7833$7849 (quote expr)) (map (lambda (pattern$7866 body$7867) (cons-source pattern$7866 body$7867 (quote (pattern . body)))) pattern$7864 body$7865) (quote (expr (pattern . body) ...))) (quote (match expr (pattern . body) ...))) (quote ()) (quote ((match expr (pattern . body) ...)))) (quote ((expr) (match expr (pattern . body) ...)))) (quote (lambda (expr) (match expr (pattern . body) ...)))) #f)) (reverse pattern-ls4$7843$7862) (reverse body-ls5$7844$7863)) (if (pair? w.2$7841$7861) ((lambda (v.6$7845$7869) (if (pair? v.6$7845$7869) ((lambda (v.7$7846$7871) ((lambda (pattern$7872) ((lambda (v.8$7847$7873) ((lambda (body$7874) (lp.3$7842$7860 (cdr w.2$7841$7861) (cons pattern$7872 pattern-ls4$7843$7862) (cons body$7874 body-ls5$7844$7863))) v.8$7847$7873)) (cdr v.6$7845$7869))) v.7$7846$7871)) (car v.6$7845$7869)) #f)) (car w.2$7841$7861)) #f)))) (lp.3$7842$7860 w.2$7841$7857 pattern-ls4$7843$7858 body-ls5$7844$7859)) #f)) v.1$7840$7855 (quote ()) (quote ()))) (cdr expr$7832$7848))))) (match-extract-quasiquote-vars-step lambda (expr$7701$7731 rename$7702$7732 compare$7703$7733) (car ((lambda (tmp$7735$7737) (if tmp$7735$7737 tmp$7735$7737 (cons (error "no expansion for" expr$7701$7731) #f))) ((lambda (v.1$7709$7738) (if (pair? v.1$7709$7738) ((lambda (v.2$7710$7740) ((lambda (x$7741) ((lambda (v.3$7711$7742) (if (pair? v.3$7711$7742) ((lambda (v.4$7712$7744) ((lambda (k$7745) ((lambda (v.5$7713$7746) (if (pair? v.5$7713$7746) ((lambda (v.6$7714$7748) ((lambda (i$7749) ((lambda (v.7$7715$7750) (if (pair? v.7$7715$7750) ((lambda (v.8$7716$7752) ((lambda (v$7753) ((lambda (v.9$7717$7754) (if (pair? v.9$7717$7754) ((lambda (v.10$7718$7756) ((lambda (d$7757) ((lambda (v.11$7719$7758) (if (pair? v.11$7719$7758) ((lambda (v.12$7720$7760) ((lambda (w.13$7721$7762 v2-ls15$7723$7763 v2-ls-ls16$7724$7764) ((lambda (lp.14$7722$7765) (set! lp.14$7722$7765 (lambda (w.13$7721$7766 v2-ls15$7723$7767 v2-ls-ls16$7724$7768) (if (null? w.13$7721$7766) ((lambda (v2$7769 v2-ls$7770) ((lambda (v.22$7730$7771) (if (null? v.22$7730$7771) (cons (cons-source (rename$7702$7732 (quote match-extract-quasiquote-vars)) (cons-source x$7741 (cons-source k$7745 (cons-source (append (map (lambda (v2$7773) v2$7773) v2$7769) i$7749) (cons-source (append (map (lambda (v2$7774 v2-ls$7775) (cons-source v2$7774 (cons-source v2-ls$7775 (quote ()) (quote (v2-ls))) (quote (v2 v2-ls)))) v2$7769 v2-ls$7770) v$7753) (cons-source d$7757 (quote ()) (quote (d))) (quote (((v2 v2-ls) ... . v) d))) (quote ((v2 ... . i) ((v2 v2-ls) ... . v) d))) (quote (k (v2 ... . i) ((v2 v2-ls) ... . v) d))) (quote (x k (v2 ... . i) ((v2 v2-ls) ... . v) d))) (quote (match-extract-quasiquote-vars x k (v2 ... . i) ((v2 v2-ls) ... . v) d))) #f) #f)) (cdr v.11$7719$7758))) (reverse v2-ls15$7723$7767) (reverse v2-ls-ls16$7724$7768)) (if (pair? w.13$7721$7766) ((lambda (v.17$7725$7777) (if (pair? v.17$7725$7777) ((lambda (v.18$7726$7779) ((lambda (v2$7780) ((lambda (v.19$7727$7781) (if (pair? v.19$7727$7781) ((lambda (v.20$7728$7783) ((lambda (v2-ls$7784) ((lambda (v.21$7729$7785) (if (null? v.21$7729$7785) (lp.14$7722$7765 (cdr w.13$7721$7766) (cons v2$7780 v2-ls15$7723$7767) (cons v2-ls$7784 v2-ls-ls16$7724$7768)) #f)) (cdr v.19$7727$7781))) v.20$7728$7783)) (car v.19$7727$7781)) #f)) (cdr v.17$7725$7777))) v.18$7726$7779)) (car v.17$7725$7777)) #f)) (car w.13$7721$7766)) #f)))) (lp.14$7722$7765 w.13$7721$7762 v2-ls15$7723$7763 v2-ls-ls16$7724$7764)) #f)) v.12$7720$7760 (quote ()) (quote ()))) (car v.11$7719$7758)) #f)) (cdr v.9$7717$7754))) v.10$7718$7756)) (car v.9$7717$7754)) #f)) (cdr v.7$7715$7750))) v.8$7716$7752)) (car v.7$7715$7750)) #f)) (cdr v.5$7713$7746))) v.6$7714$7748)) (car v.5$7713$7746)) #f)) (cdr v.3$7711$7742))) v.4$7712$7744)) (car v.3$7711$7742)) #f)) (cdr v.1$7709$7738))) v.2$7710$7740)) (car v.1$7709$7738)) #f)) (cdr expr$7701$7731))))) (match-extract-quasiquote-vars lambda (expr$7209$7317 rename$7210$7318 compare$7211$7319) (car ((lambda (tmp$7321$7323) (if tmp$7321$7323 tmp$7321$7323 ((lambda (tmp$7325$7327) (if tmp$7325$7327 tmp$7325$7327 ((lambda (tmp$7329$7331) (if tmp$7329$7331 tmp$7329$7331 ((lambda (tmp$7333$7335) (if tmp$7333$7335 tmp$7333$7335 ((lambda (tmp$7337$7339) (if tmp$7337$7339 tmp$7337$7339 ((lambda (tmp$7341$7343) (if tmp$7341$7343 tmp$7341$7343 ((lambda (tmp$7345$7347) (if tmp$7345$7347 tmp$7345$7347 (cons (error "no expansion for" expr$7209$7317) #f))) ((lambda (v.90$7306$7348) (if (pair? v.90$7306$7348) ((lambda (v.91$7307$7350) ((lambda (x$7351) ((lambda (v.92$7308$7352) (if (pair? v.92$7308$7352) ((lambda (v.93$7309$7354) (if (list? v.93$7309$7354) ((lambda (k$7356) ((lambda (v.94$7310$7357) (if (pair? v.94$7310$7357) ((lambda (v.95$7311$7359) ((lambda (i$7360) ((lambda (v.96$7312$7361) (if (pair? v.96$7312$7361) ((lambda (v.97$7313$7363) ((lambda (v$7364) ((lambda (v.98$7314$7365) (if (pair? v.98$7314$7365) ((lambda (v.99$7315$7367) ((lambda (d$7368) ((lambda (v.100$7316$7369) (if (null? v.100$7316$7369) (cons (append (map (lambda (k$7371) k$7371) k$7356) (cons-source v$7364 (quote ()) (quote (v)))) #f) #f)) (cdr v.98$7314$7365))) v.99$7315$7367)) (car v.98$7314$7365)) #f)) (cdr v.96$7312$7361))) v.97$7313$7363)) (car v.96$7312$7361)) #f)) (cdr v.94$7310$7357))) v.95$7311$7359)) (car v.94$7310$7357)) #f)) (cdr v.92$7308$7352))) v.93$7309$7354) #f)) (car v.92$7308$7352)) #f)) (cdr v.90$7306$7348))) v.91$7307$7350)) (car v.90$7306$7348)) #f)) (cdr expr$7209$7317))))) ((lambda (v.78$7294$7372) (if (pair? v.78$7294$7372) ((lambda (v.79$7295$7374) (if (vector? v.79$7295$7374) ((lambda (v.80$7296$7376) (if (list? v.80$7296$7376) ((lambda (x$7378) ((lambda (v.81$7297$7379) (if (pair? v.81$7297$7379) ((lambda (v.82$7298$7381) ((lambda (k$7382) ((lambda (v.83$7299$7383) (if (pair? v.83$7299$7383) ((lambda (v.84$7300$7385) ((lambda (i$7386) ((lambda (v.85$7301$7387) (if (pair? v.85$7301$7387) ((lambda (v.86$7302$7389) ((lambda (v$7390) ((lambda (v.87$7303$7391) (if (pair? v.87$7303$7391) ((lambda (v.88$7304$7393) ((lambda (d$7394) ((lambda (v.89$7305$7395) (if (null? v.89$7305$7395) (cons (cons-source (rename$7210$7318 (quote match-extract-quasiquote-vars)) (cons-source x$7378 (cons-source k$7382 (cons-source i$7386 (cons-source v$7390 (cons-source d$7394 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote ((x ...) k i v d))) (quote (match-extract-quasiquote-vars (x ...) k i v d))) #f) #f)) (cdr v.87$7303$7391))) v.88$7304$7393)) (car v.87$7303$7391)) #f)) (cdr v.85$7301$7387))) v.86$7302$7389)) (car v.85$7301$7387)) #f)) (cdr v.83$7299$7383))) v.84$7300$7385)) (car v.83$7299$7383)) #f)) (cdr v.81$7297$7379))) v.82$7298$7381)) (car v.81$7297$7379)) #f)) (cdr v.78$7294$7372))) v.80$7296$7376) #f)) (vector->list v.79$7295$7374)) #f)) (car v.78$7294$7372)) #f)) (cdr expr$7209$7317))))) ((lambda (v.65$7281$7397) (if (pair? v.65$7281$7397) ((lambda (v.66$7282$7399) (if (pair? v.66$7282$7399) ((lambda (v.67$7283$7401) ((lambda (x$7402) ((lambda (v.68$7284$7403) ((lambda (y$7404) ((lambda (v.69$7285$7405) (if (pair? v.69$7285$7405) ((lambda (v.70$7286$7407) ((lambda (k$7408) ((lambda (v.71$7287$7409) (if (pair? v.71$7287$7409) ((lambda (v.72$7288$7411) ((lambda (i$7412) ((lambda (v.73$7289$7413) (if (pair? v.73$7289$7413) ((lambda (v.74$7290$7415) ((lambda (v$7416) ((lambda (v.75$7291$7417) (if (pair? v.75$7291$7417) ((lambda (v.76$7292$7419) ((lambda (d$7420) ((lambda (v.77$7293$7421) (if (null? v.77$7293$7421) (cons (cons-source (rename$7210$7318 (quote match-extract-quasiquote-vars)) (cons-source x$7402 (cons-source (cons-source (rename$7210$7318 (quote match-extract-quasiquote-vars-step)) (cons-source y$7404 (cons-source k$7408 (cons-source i$7412 (cons-source v$7416 (cons-source d$7420 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote (y k i v d))) (quote (match-extract-quasiquote-vars-step y k i v d))) (cons-source i$7412 (cons-source (quote ()) (cons-source d$7420 (quote ()) (quote (d))) (quote (() d))) (quote (i () d))) (quote ((match-extract-quasiquote-vars-step y k i v d) i () d))) (quote (x (match-extract-quasiquote-vars-step y k i v d) i () d))) (quote (match-extract-quasiquote-vars x (match-extract-quasiquote-vars-step y k i v d) i () d))) #f) #f)) (cdr v.75$7291$7417))) v.76$7292$7419)) (car v.75$7291$7417)) #f)) (cdr v.73$7289$7413))) v.74$7290$7415)) (car v.73$7289$7413)) #f)) (cdr v.71$7287$7409))) v.72$7288$7411)) (car v.71$7287$7409)) #f)) (cdr v.69$7285$7405))) v.70$7286$7407)) (car v.69$7285$7405)) #f)) (cdr v.65$7281$7397))) v.68$7284$7403)) (cdr v.66$7282$7399))) v.67$7283$7401)) (car v.66$7282$7399)) #f)) (car v.65$7281$7397)) #f)) (cdr expr$7209$7317))))) ((lambda (v.48$7264$7423) (if (pair? v.48$7264$7423) ((lambda (v.49$7265$7425) (if (pair? v.49$7265$7425) ((lambda (v.50$7266$7427) (if (compare$7211$7319 v.50$7266$7427 (rename$7210$7318 (quote unquote))) ((lambda (v.51$7267$7429) (if (pair? v.51$7267$7429) ((lambda (v.52$7268$7431) ((lambda (x$7432) ((lambda (v.53$7269$7433) (if (null? v.53$7269$7433) ((lambda (v.54$7270$7435) (if (pair? v.54$7270$7435) ((lambda (v.55$7271$7437) ((lambda (k$7438) ((lambda (v.56$7272$7439) (if (pair? v.56$7272$7439) ((lambda (v.57$7273$7441) ((lambda (i$7442) ((lambda (v.58$7274$7443) (if (pair? v.58$7274$7443) ((lambda (v.59$7275$7445) ((lambda (v$7446) ((lambda (v.60$7276$7447) (if (pair? v.60$7276$7447) ((lambda (v.61$7277$7449) (if (pair? v.61$7277$7449) ((lambda (v.62$7278$7451) (if (equal? v.62$7278$7451 #t) ((lambda (v.63$7279$7453) ((lambda (d$7454) ((lambda (v.64$7280$7455) (if (null? v.64$7280$7455) (cons (cons-source (rename$7210$7318 (quote match-extract-quasiquote-vars)) (cons-source x$7432 (cons-source k$7438 (cons-source i$7442 (cons-source v$7446 (cons-source d$7454 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote (x k i v d))) (quote (match-extract-quasiquote-vars x k i v d))) #f) #f)) (cdr v.60$7276$7447))) v.63$7279$7453)) (cdr v.61$7277$7449)) #f)) (car v.61$7277$7449)) #f)) (car v.60$7276$7447)) #f)) (cdr v.58$7274$7443))) v.59$7275$7445)) (car v.58$7274$7443)) #f)) (cdr v.56$7272$7439))) v.57$7273$7441)) (car v.56$7272$7439)) #f)) (cdr v.54$7270$7435))) v.55$7271$7437)) (car v.54$7270$7435)) #f)) (cdr v.48$7264$7423)) #f)) (cdr v.51$7267$7429))) v.52$7268$7431)) (car v.51$7267$7429)) #f)) (cdr v.49$7265$7425)) #f)) (car v.49$7265$7425)) #f)) (car v.48$7264$7423)) #f)) (cdr expr$7209$7317))))) ((lambda (v.31$7247$7457) (if (pair? v.31$7247$7457) ((lambda (v.32$7248$7459) (if (pair? v.32$7248$7459) ((lambda (v.33$7249$7461) (if (compare$7211$7319 v.33$7249$7461 (rename$7210$7318 (quote unquote))) ((lambda (v.34$7250$7463) (if (pair? v.34$7250$7463) ((lambda (v.35$7251$7465) ((lambda (x$7466) ((lambda (v.36$7252$7467) (if (null? v.36$7252$7467) ((lambda (v.37$7253$7469) (if (pair? v.37$7253$7469) ((lambda (v.38$7254$7471) ((lambda (k$7472) ((lambda (v.39$7255$7473) (if (pair? v.39$7255$7473) ((lambda (v.40$7256$7475) ((lambda (i$7476) ((lambda (v.41$7257$7477) (if (pair? v.41$7257$7477) ((lambda (v.42$7258$7479) ((lambda (v$7480) ((lambda (v.43$7259$7481) (if (pair? v.43$7259$7481) ((lambda (v.44$7260$7483) (if (pair? v.44$7260$7483) ((lambda (v.45$7261$7485) (if (equal? v.45$7261$7485 #t) ((lambda (v.46$7262$7487) (if (null? v.46$7262$7487) ((lambda (v.47$7263$7489) (if (null? v.47$7263$7489) (cons (cons-source (rename$7210$7318 (quote match-extract-underscore)) (cons-source x$7466 (cons-source k$7472 (cons-source i$7476 (cons-source v$7480 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote (x k i v))) (quote (match-extract-underscore x k i v))) #f) #f)) (cdr v.43$7259$7481)) #f)) (cdr v.44$7260$7483)) #f)) (car v.44$7260$7483)) #f)) (car v.43$7259$7481)) #f)) (cdr v.41$7257$7477))) v.42$7258$7479)) (car v.41$7257$7477)) #f)) (cdr v.39$7255$7473))) v.40$7256$7475)) (car v.39$7255$7473)) #f)) (cdr v.37$7253$7469))) v.38$7254$7471)) (car v.37$7253$7469)) #f)) (cdr v.31$7247$7457)) #f)) (cdr v.34$7250$7463))) v.35$7251$7465)) (car v.34$7250$7463)) #f)) (cdr v.32$7248$7459)) #f)) (car v.32$7248$7459)) #f)) (car v.31$7247$7457)) #f)) (cdr expr$7209$7317))))) ((lambda (v.16$7232$7491) (if (pair? v.16$7232$7491) ((lambda (v.17$7233$7493) (if (pair? v.17$7233$7493) ((lambda (v.18$7234$7495) (if (compare$7211$7319 v.18$7234$7495 (rename$7210$7318 (quote unquote-splicing))) ((lambda (v.19$7235$7497) (if (pair? v.19$7235$7497) ((lambda (v.20$7236$7499) ((lambda (x$7500) ((lambda (v.21$7237$7501) (if (null? v.21$7237$7501) ((lambda (v.22$7238$7503) (if (pair? v.22$7238$7503) ((lambda (v.23$7239$7505) ((lambda (k$7506) ((lambda (v.24$7240$7507) (if (pair? v.24$7240$7507) ((lambda (v.25$7241$7509) ((lambda (i$7510) ((lambda (v.26$7242$7511) (if (pair? v.26$7242$7511) ((lambda (v.27$7243$7513) ((lambda (v$7514) ((lambda (v.28$7244$7515) (if (pair? v.28$7244$7515) ((lambda (v.29$7245$7517) ((lambda (d$7518) ((lambda (v.30$7246$7519) (if (null? v.30$7246$7519) (cons (cons-source (rename$7210$7318 (quote match-extract-quasiquote-vars)) (cons-source (cons-source (rename$7210$7318 (quote unquote)) (cons-source x$7500 (quote ()) (quote (x))) (quote (unquote x))) (cons-source k$7506 (cons-source i$7510 (cons-source v$7514 (cons-source d$7518 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote ((unquote x) k i v d))) (quote (match-extract-quasiquote-vars (unquote x) k i v d))) #f) #f)) (cdr v.28$7244$7515))) v.29$7245$7517)) (car v.28$7244$7515)) #f)) (cdr v.26$7242$7511))) v.27$7243$7513)) (car v.26$7242$7511)) #f)) (cdr v.24$7240$7507))) v.25$7241$7509)) (car v.24$7240$7507)) #f)) (cdr v.22$7238$7503))) v.23$7239$7505)) (car v.22$7238$7503)) #f)) (cdr v.16$7232$7491)) #f)) (cdr v.19$7235$7497))) v.20$7236$7499)) (car v.19$7235$7497)) #f)) (cdr v.17$7233$7493)) #f)) (car v.17$7233$7493)) #f)) (car v.16$7232$7491)) #f)) (cdr expr$7209$7317))))) ((lambda (v.1$7217$7521) (if (pair? v.1$7217$7521) ((lambda (v.2$7218$7523) (if (pair? v.2$7218$7523) ((lambda (v.3$7219$7525) (if (compare$7211$7319 v.3$7219$7525 (rename$7210$7318 (quote quasiquote))) ((lambda (v.4$7220$7527) (if (pair? v.4$7220$7527) ((lambda (v.5$7221$7529) ((lambda (x$7530) ((lambda (v.6$7222$7531) (if (null? v.6$7222$7531) ((lambda (v.7$7223$7533) (if (pair? v.7$7223$7533) ((lambda (v.8$7224$7535) ((lambda (k$7536) ((lambda (v.9$7225$7537) (if (pair? v.9$7225$7537) ((lambda (v.10$7226$7539) ((lambda (i$7540) ((lambda (v.11$7227$7541) (if (pair? v.11$7227$7541) ((lambda (v.12$7228$7543) ((lambda (v$7544) ((lambda (v.13$7229$7545) (if (pair? v.13$7229$7545) ((lambda (v.14$7230$7547) ((lambda (d$7548) ((lambda (v.15$7231$7549) (if (null? v.15$7231$7549) (cons (cons-source (rename$7210$7318 (quote match-extract-quasiquote-vars)) (cons-source x$7530 (cons-source k$7536 (cons-source i$7540 (cons-source v$7544 (cons-source (cons-source #t d$7548 (quote (#t . d))) (quote ()) (quote ((#t . d)))) (quote (v (#t . d)))) (quote (i v (#t . d)))) (quote (k i v (#t . d)))) (quote (x k i v (#t . d)))) (quote (match-extract-quasiquote-vars x k i v (#t . d)))) #f) #f)) (cdr v.13$7229$7545))) v.14$7230$7547)) (car v.13$7229$7545)) #f)) (cdr v.11$7227$7541))) v.12$7228$7543)) (car v.11$7227$7541)) #f)) (cdr v.9$7225$7537))) v.10$7226$7539)) (car v.9$7225$7537)) #f)) (cdr v.7$7223$7533))) v.8$7224$7535)) (car v.7$7223$7533)) #f)) (cdr v.1$7217$7521)) #f)) (cdr v.4$7220$7527))) v.5$7221$7529)) (car v.4$7220$7527)) #f)) (cdr v.2$7218$7523)) #f)) (car v.2$7218$7523)) #f)) (car v.1$7217$7521)) #f)) (cdr expr$7209$7317))))) (match-extract-vars-step lambda (expr$7087$7115 rename$7088$7116 compare$7089$7117) (car ((lambda (tmp$7119$7121) (if tmp$7119$7121 tmp$7119$7121 (cons (error "no expansion for" expr$7087$7115) #f))) ((lambda (v.1$7095$7122) (if (pair? v.1$7095$7122) ((lambda (v.2$7096$7124) ((lambda (p$7125) ((lambda (v.3$7097$7126) (if (pair? v.3$7097$7126) ((lambda (v.4$7098$7128) ((lambda (k$7129) ((lambda (v.5$7099$7130) (if (pair? v.5$7099$7130) ((lambda (v.6$7100$7132) ((lambda (i$7133) ((lambda (v.7$7101$7134) (if (pair? v.7$7101$7134) ((lambda (v.8$7102$7136) ((lambda (v$7137) ((lambda (v.9$7103$7138) (if (pair? v.9$7103$7138) ((lambda (v.10$7104$7140) ((lambda (w.11$7105$7142 v2-ls13$7107$7143 v2-ls-ls14$7108$7144) ((lambda (lp.12$7106$7145) (set! lp.12$7106$7145 (lambda (w.11$7105$7146 v2-ls13$7107$7147 v2-ls-ls14$7108$7148) (if (null? w.11$7105$7146) ((lambda (v2$7149 v2-ls$7150) ((lambda (v.20$7114$7151) (if (null? v.20$7114$7151) (cons (cons-source (rename$7088$7116 (quote match-extract-underscore)) (cons-source p$7125 (cons-source k$7129 (cons-source (append (map (lambda (v2$7153) v2$7153) v2$7149) i$7133) (cons-source (append (map (lambda (v2$7154 v2-ls$7155) (cons-source v2$7154 (cons-source v2-ls$7155 (quote ()) (quote (v2-ls))) (quote (v2 v2-ls)))) v2$7149 v2-ls$7150) v$7137) (quote ()) (quote (((v2 v2-ls) ... . v)))) (quote ((v2 ... . i) ((v2 v2-ls) ... . v)))) (quote (k (v2 ... . i) ((v2 v2-ls) ... . v)))) (quote (p k (v2 ... . i) ((v2 v2-ls) ... . v)))) (quote (match-extract-underscore p k (v2 ... . i) ((v2 v2-ls) ... . v)))) #f) #f)) (cdr v.9$7103$7138))) (reverse v2-ls13$7107$7147) (reverse v2-ls-ls14$7108$7148)) (if (pair? w.11$7105$7146) ((lambda (v.15$7109$7157) (if (pair? v.15$7109$7157) ((lambda (v.16$7110$7159) ((lambda (v2$7160) ((lambda (v.17$7111$7161) (if (pair? v.17$7111$7161) ((lambda (v.18$7112$7163) ((lambda (v2-ls$7164) ((lambda (v.19$7113$7165) (if (null? v.19$7113$7165) (lp.12$7106$7145 (cdr w.11$7105$7146) (cons v2$7160 v2-ls13$7107$7147) (cons v2-ls$7164 v2-ls-ls14$7108$7148)) #f)) (cdr v.17$7111$7161))) v.18$7112$7163)) (car v.17$7111$7161)) #f)) (cdr v.15$7109$7157))) v.16$7110$7159)) (car v.15$7109$7157)) #f)) (car w.11$7105$7146)) #f)))) (lp.12$7106$7145 w.11$7105$7142 v2-ls13$7107$7143 v2-ls-ls14$7108$7144)) #f)) v.10$7104$7140 (quote ()) (quote ()))) (car v.9$7103$7138)) #f)) (cdr v.7$7101$7134))) v.8$7102$7136)) (car v.7$7101$7134)) #f)) (cdr v.5$7099$7130))) v.6$7100$7132)) (car v.5$7099$7130)) #f)) (cdr v.3$7097$7126))) v.4$7098$7128)) (car v.3$7097$7126)) #f)) (cdr v.1$7095$7122))) v.2$7096$7124)) (car v.1$7095$7122)) #f)) (cdr expr$7087$7115))))) (match-extract-vars lambda (expr$6204$6381 rename$6205$6382 compare$6206$6383) (car ((lambda (tmp$6385$6387) (if tmp$6385$6387 tmp$6385$6387 ((lambda (tmp$6389$6391) (if tmp$6389$6391 tmp$6389$6391 ((lambda (tmp$6393$6395) (if tmp$6393$6395 tmp$6393$6395 ((lambda (tmp$6397$6399) (if tmp$6397$6399 tmp$6397$6399 ((lambda (tmp$6401$6403) (if tmp$6401$6403 tmp$6401$6403 ((lambda (tmp$6405$6407) (if tmp$6405$6407 tmp$6405$6407 ((lambda (tmp$6409$6411) (if tmp$6409$6411 tmp$6409$6411 ((lambda (tmp$6413$6415) (if tmp$6413$6415 tmp$6413$6415 ((lambda (tmp$6417$6419) (if tmp$6417$6419 tmp$6417$6419 ((lambda (tmp$6421$6423) (if tmp$6421$6423 tmp$6421$6423 ((lambda (tmp$6425$6427) (if tmp$6425$6427 tmp$6425$6427 ((lambda (tmp$6429$6431) (if tmp$6429$6431 tmp$6429$6431 ((lambda (tmp$6433$6435) (if tmp$6433$6435 tmp$6433$6435 ((lambda (tmp$6437$6439) (if tmp$6437$6439 tmp$6437$6439 ((lambda (tmp$6441$6443) (if tmp$6441$6443 tmp$6441$6443 ((lambda (tmp$6445$6447) (if tmp$6445$6447 tmp$6445$6447 ((lambda (tmp$6449$6451) (if tmp$6449$6451 tmp$6449$6451 ((lambda (tmp$6453$6455) (if tmp$6453$6455 tmp$6453$6455 ((lambda (tmp$6457$6459) (if tmp$6457$6459 tmp$6457$6459 (cons (error "no expansion for" expr$6204$6381) #f))) ((lambda (v.161$6372$6460) (if (pair? v.161$6372$6460) ((lambda (v.162$6373$6462) ((lambda (p$6463) ((lambda (v.163$6374$6464) (if (pair? v.163$6374$6464) ((lambda (v.164$6375$6466) (if (list? v.164$6375$6466) ((lambda (k$6468) ((lambda (v.165$6376$6469) (if (pair? v.165$6376$6469) ((lambda (v.166$6377$6471) (if (list? v.166$6377$6471) ((lambda (i$6473) ((lambda (v.167$6378$6474) (if (pair? v.167$6378$6474) ((lambda (v.168$6379$6476) ((lambda (v$6477) ((lambda (v.169$6380$6478) (if (null? v.169$6380$6478) (cons (cons-source (rename$6205$6382 (quote let-syntax)) (cons-source (cons-source (cons-source (rename$6205$6382 (quote new-sym?)) (cons-source (cons-source (rename$6205$6382 (quote syntax-rules)) (cons-source i$6473 (cons-source (cons-source (cons-source (rename$6205$6382 (quote new-sym?)) (cons-source p$6463 (cons-source (rename$6205$6382 (quote sk)) (cons-source (rename$6205$6382 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote (p sk fk))) (quote (new-sym? p sk fk))) (cons-source (rename$6205$6382 (quote sk)) (quote ()) (quote (sk))) (quote ((new-sym? p sk fk) sk))) (cons-source (cons-source (cons-source (rename$6205$6382 (quote new-sym?)) (cons-source (rename$6205$6382 (quote any)) (cons-source (rename$6205$6382 (quote sk)) (cons-source (rename$6205$6382 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote (any sk fk))) (quote (new-sym? any sk fk))) (cons-source (rename$6205$6382 (quote fk)) (quote ()) (quote (fk))) (quote ((new-sym? any sk fk) fk))) (quote ()) (quote (((new-sym? any sk fk) fk)))) (quote (((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (quote ((i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (quote (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (quote ()) (quote ((syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk))))) (quote (new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk))))) (quote ()) (quote ((new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))))) (cons-source (cons-source (rename$6205$6382 (quote new-sym?)) (cons-source (rename$6205$6382 (quote random-sym-to-match)) (cons-source (append (map (lambda (k$6480) k$6480) k$6468) (cons-source (cons-source (cons-source p$6463 (cons-source (rename$6205$6382 (quote p-ls)) (quote ()) (quote (p-ls))) (quote (p p-ls))) v$6477 (quote ((p p-ls) . v))) (quote ()) (quote (((p p-ls) . v))))) (cons-source (append (map (lambda (k$6481) k$6481) k$6468) (cons-source v$6477 (quote ()) (quote (v)))) (quote ()) (quote ((k ... v)))) (quote ((k ... ((p p-ls) . v)) (k ... v)))) (quote (random-sym-to-match (k ... ((p p-ls) . v)) (k ... v)))) (quote (new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v)))) (quote ()) (quote ((new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v))))) (quote (((new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v))))) (quote (let-syntax ((new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v))))) #f) #f)) (cdr v.167$6378$6474))) v.168$6379$6476)) (car v.167$6378$6474)) #f)) (cdr v.165$6376$6469))) v.166$6377$6471) #f)) (car v.165$6376$6469)) #f)) (cdr v.163$6374$6464))) v.164$6375$6466) #f)) (car v.163$6374$6464)) #f)) (cdr v.161$6372$6460))) v.162$6373$6462)) (car v.161$6372$6460)) #f)) (cdr expr$6204$6381))))) ((lambda (v.152$6363$6482) (if (pair? v.152$6363$6482) ((lambda (v.153$6364$6484) (if (compare$6206$6383 v.153$6364$6484 (rename$6205$6382 (quote *..))) ((lambda (v.154$6365$6486) (if (pair? v.154$6365$6486) ((lambda (v.155$6366$6488) (if (list? v.155$6366$6488) ((lambda (k$6490) ((lambda (v.156$6367$6491) (if (pair? v.156$6367$6491) ((lambda (v.157$6368$6493) ((lambda (i$6494) ((lambda (v.158$6369$6495) (if (pair? v.158$6369$6495) ((lambda (v.159$6370$6497) ((lambda (v$6498) ((lambda (v.160$6371$6499) (if (null? v.160$6371$6499) (cons (append (map (lambda (k$6501) k$6501) k$6490) (cons-source v$6498 (quote ()) (quote (v)))) #f) #f)) (cdr v.158$6369$6495))) v.159$6370$6497)) (car v.158$6369$6495)) #f)) (cdr v.156$6367$6491))) v.157$6368$6493)) (car v.156$6367$6491)) #f)) (cdr v.154$6365$6486))) v.155$6366$6488) #f)) (car v.154$6365$6486)) #f)) (cdr v.152$6363$6482)) #f)) (car v.152$6363$6482)) #f)) (cdr expr$6204$6381))))) ((lambda (v.143$6354$6502) (if (pair? v.143$6354$6502) ((lambda (v.144$6355$6504) (if (compare$6206$6383 v.144$6355$6504 (rename$6205$6382 (quote =..))) ((lambda (v.145$6356$6506) (if (pair? v.145$6356$6506) ((lambda (v.146$6357$6508) (if (list? v.146$6357$6508) ((lambda (k$6510) ((lambda (v.147$6358$6511) (if (pair? v.147$6358$6511) ((lambda (v.148$6359$6513) ((lambda (i$6514) ((lambda (v.149$6360$6515) (if (pair? v.149$6360$6515) ((lambda (v.150$6361$6517) ((lambda (v$6518) ((lambda (v.151$6362$6519) (if (null? v.151$6362$6519) (cons (append (map (lambda (k$6521) k$6521) k$6510) (cons-source v$6518 (quote ()) (quote (v)))) #f) #f)) (cdr v.149$6360$6515))) v.150$6361$6517)) (car v.149$6360$6515)) #f)) (cdr v.147$6358$6511))) v.148$6359$6513)) (car v.147$6358$6511)) #f)) (cdr v.145$6356$6506))) v.146$6357$6508) #f)) (car v.145$6356$6506)) #f)) (cdr v.143$6354$6502)) #f)) (car v.143$6354$6502)) #f)) (cdr expr$6204$6381))))) ((lambda (v.134$6345$6522) (if (pair? v.134$6345$6522) ((lambda (v.135$6346$6524) (if (compare$6206$6383 v.135$6346$6524 (rename$6205$6382 (quote **1))) ((lambda (v.136$6347$6526) (if (pair? v.136$6347$6526) ((lambda (v.137$6348$6528) (if (list? v.137$6348$6528) ((lambda (k$6530) ((lambda (v.138$6349$6531) (if (pair? v.138$6349$6531) ((lambda (v.139$6350$6533) ((lambda (i$6534) ((lambda (v.140$6351$6535) (if (pair? v.140$6351$6535) ((lambda (v.141$6352$6537) ((lambda (v$6538) ((lambda (v.142$6353$6539) (if (null? v.142$6353$6539) (cons (append (map (lambda (k$6541) k$6541) k$6530) (cons-source v$6538 (quote ()) (quote (v)))) #f) #f)) (cdr v.140$6351$6535))) v.141$6352$6537)) (car v.140$6351$6535)) #f)) (cdr v.138$6349$6531))) v.139$6350$6533)) (car v.138$6349$6531)) #f)) (cdr v.136$6347$6526))) v.137$6348$6528) #f)) (car v.136$6347$6526)) #f)) (cdr v.134$6345$6522)) #f)) (car v.134$6345$6522)) #f)) (cdr expr$6204$6381))))) ((lambda (v.125$6336$6542) (if (pair? v.125$6336$6542) ((lambda (v.126$6337$6544) (if (compare$6206$6383 v.126$6337$6544 (rename$6205$6382 (quote ***))) ((lambda (v.127$6338$6546) (if (pair? v.127$6338$6546) ((lambda (v.128$6339$6548) (if (list? v.128$6339$6548) ((lambda (k$6550) ((lambda (v.129$6340$6551) (if (pair? v.129$6340$6551) ((lambda (v.130$6341$6553) ((lambda (i$6554) ((lambda (v.131$6342$6555) (if (pair? v.131$6342$6555) ((lambda (v.132$6343$6557) ((lambda (v$6558) ((lambda (v.133$6344$6559) (if (null? v.133$6344$6559) (cons (append (map (lambda (k$6561) k$6561) k$6550) (cons-source v$6558 (quote ()) (quote (v)))) #f) #f)) (cdr v.131$6342$6555))) v.132$6343$6557)) (car v.131$6342$6555)) #f)) (cdr v.129$6340$6551))) v.130$6341$6553)) (car v.129$6340$6551)) #f)) (cdr v.127$6338$6546))) v.128$6339$6548) #f)) (car v.127$6338$6546)) #f)) (cdr v.125$6336$6542)) #f)) (car v.125$6336$6542)) #f)) (cdr expr$6204$6381))))) ((lambda (v.116$6327$6562) (if (pair? v.116$6327$6562) ((lambda (v.117$6328$6564) (if (compare$6206$6383 v.117$6328$6564 (rename$6205$6382 (quote ___))) ((lambda (v.118$6329$6566) (if (pair? v.118$6329$6566) ((lambda (v.119$6330$6568) (if (list? v.119$6330$6568) ((lambda (k$6570) ((lambda (v.120$6331$6571) (if (pair? v.120$6331$6571) ((lambda (v.121$6332$6573) ((lambda (i$6574) ((lambda (v.122$6333$6575) (if (pair? v.122$6333$6575) ((lambda (v.123$6334$6577) ((lambda (v$6578) ((lambda (v.124$6335$6579) (if (null? v.124$6335$6579) (cons (append (map (lambda (k$6581) k$6581) k$6570) (cons-source v$6578 (quote ()) (quote (v)))) #f) #f)) (cdr v.122$6333$6575))) v.123$6334$6577)) (car v.122$6333$6575)) #f)) (cdr v.120$6331$6571))) v.121$6332$6573)) (car v.120$6331$6571)) #f)) (cdr v.118$6329$6566))) v.119$6330$6568) #f)) (car v.118$6329$6566)) #f)) (cdr v.116$6327$6562)) #f)) (car v.116$6327$6562)) #f)) (cdr expr$6204$6381))))) ((lambda (v.112$6323$6582) (if (pair? v.112$6323$6582) ((lambda (v.113$6324$6584) (if (vector? v.113$6324$6584) ((lambda (v.114$6325$6586) (if (list? v.114$6325$6586) ((lambda (p$6588) ((lambda (v.115$6326$6589) ((lambda (x$6590) (cons (cons-source (rename$6205$6382 (quote match-extract-underscore)) (cons-source p$6588 x$6590 (quote ((p ...) . x))) (quote (match-extract-underscore (p ...) . x))) #f)) v.115$6326$6589)) (cdr v.112$6323$6582))) v.114$6325$6586) #f)) (vector->list v.113$6324$6584)) #f)) (car v.112$6323$6582)) #f)) (cdr expr$6204$6381))))) ((lambda (v.101$6312$6591) (if (pair? v.101$6312$6591) ((lambda (v.102$6313$6593) (if (pair? v.102$6313$6593) ((lambda (v.103$6314$6595) ((lambda (p$6596) ((lambda (v.104$6315$6597) ((lambda (q$6598) ((lambda (v.105$6316$6599) (if (pair? v.105$6316$6599) ((lambda (v.106$6317$6601) ((lambda (k$6602) ((lambda (v.107$6318$6603) (if (pair? v.107$6318$6603) ((lambda (v.108$6319$6605) ((lambda (i$6606) ((lambda (v.109$6320$6607) (if (pair? v.109$6320$6607) ((lambda (v.110$6321$6609) ((lambda (v$6610) ((lambda (v.111$6322$6611) (if (null? v.111$6322$6611) (cons (cons-source (rename$6205$6382 (quote match-extract-underscore)) (cons-source p$6596 (cons-source (cons-source (rename$6205$6382 (quote match-extract-vars-step)) (cons-source q$6598 (cons-source k$6602 (cons-source i$6606 (cons-source v$6610 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote (q k i v))) (quote (match-extract-vars-step q k i v))) (cons-source i$6606 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-extract-vars-step q k i v) i ()))) (quote (p (match-extract-vars-step q k i v) i ()))) (quote (match-extract-underscore p (match-extract-vars-step q k i v) i ()))) #f) #f)) (cdr v.109$6320$6607))) v.110$6321$6609)) (car v.109$6320$6607)) #f)) (cdr v.107$6318$6603))) v.108$6319$6605)) (car v.107$6318$6603)) #f)) (cdr v.105$6316$6599))) v.106$6317$6601)) (car v.105$6316$6599)) #f)) (cdr v.101$6312$6591))) v.104$6315$6597)) (cdr v.102$6313$6593))) v.103$6314$6595)) (car v.102$6313$6593)) #f)) (car v.101$6312$6591)) #f)) (cdr expr$6204$6381))))) ((lambda (v.88$6299$6613) (if (pair? v.88$6299$6613) ((lambda (v.89$6300$6615) (if (pair? v.89$6300$6615) ((lambda (v.90$6301$6617) ((lambda (p$6618) ((lambda (v.91$6302$6619) (if (pair? v.91$6302$6619) ((lambda (v.92$6303$6621) ((lambda (q$6622) ((lambda (v.93$6304$6623) ((lambda (r$6624) ((lambda (v.94$6305$6625) (if (pair? v.94$6305$6625) ((lambda (v.95$6306$6627) ((lambda (k$6628) ((lambda (v.96$6307$6629) (if (pair? v.96$6307$6629) ((lambda (v.97$6308$6631) ((lambda (i$6632) ((lambda (v.98$6309$6633) (if (pair? v.98$6309$6633) ((lambda (v.99$6310$6635) ((lambda (v$6636) ((lambda (v.100$6311$6637) (if (null? v.100$6311$6637) (cons (cons-source (rename$6205$6382 (quote match-check-ellipsis)) (cons-source q$6622 (cons-source (cons-source (rename$6205$6382 (quote match-extract-underscore)) (cons-source (cons-source p$6618 r$6624 (quote (p . r))) (cons-source k$6628 (cons-source i$6632 (cons-source v$6636 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote ((p . r) k i v))) (quote (match-extract-underscore (p . r) k i v))) (cons-source (cons-source (rename$6205$6382 (quote match-extract-underscore)) (cons-source p$6618 (cons-source (cons-source (rename$6205$6382 (quote match-extract-vars-step)) (cons-source (cons-source q$6622 r$6624 (quote (q . r))) (cons-source k$6628 (cons-source i$6632 (cons-source v$6636 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote ((q . r) k i v))) (quote (match-extract-vars-step (q . r) k i v))) (cons-source i$6632 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-extract-vars-step (q . r) k i v) i ()))) (quote (p (match-extract-vars-step (q . r) k i v) i ()))) (quote (match-extract-underscore p (match-extract-vars-step (q . r) k i v) i ()))) (quote ()) (quote ((match-extract-underscore p (match-extract-vars-step (q . r) k i v) i ())))) (quote ((match-extract-underscore (p . r) k i v) (match-extract-underscore p (match-extract-vars-step (q . r) k i v) i ())))) (quote (q (match-extract-underscore (p . r) k i v) (match-extract-underscore p (match-extract-vars-step (q . r) k i v) i ())))) (quote (match-check-ellipsis q (match-extract-underscore (p . r) k i v) (match-extract-underscore p (match-extract-vars-step (q . r) k i v) i ())))) #f) #f)) (cdr v.98$6309$6633))) v.99$6310$6635)) (car v.98$6309$6633)) #f)) (cdr v.96$6307$6629))) v.97$6308$6631)) (car v.96$6307$6629)) #f)) (cdr v.94$6305$6625))) v.95$6306$6627)) (car v.94$6305$6625)) #f)) (cdr v.88$6299$6613))) v.93$6304$6623)) (cdr v.91$6302$6619))) v.92$6303$6621)) (car v.91$6302$6619)) #f)) (cdr v.89$6300$6615))) v.90$6301$6617)) (car v.89$6300$6615)) #f)) (car v.88$6299$6613)) #f)) (cdr expr$6204$6381))))) ((lambda (v.83$6294$6639) (if (pair? v.83$6294$6639) ((lambda (v.84$6295$6641) (if (pair? v.84$6295$6641) ((lambda (v.85$6296$6643) (if (compare$6206$6383 v.85$6296$6643 (rename$6205$6382 (quote not))) ((lambda (v.86$6297$6645) ((lambda (p$6646) ((lambda (v.87$6298$6647) ((lambda (x$6648) (cons (cons-source (rename$6205$6382 (quote match-extract-underscore)) (cons-source p$6646 x$6648 (quote (p . x))) (quote (match-extract-underscore p . x))) #f)) v.87$6298$6647)) (cdr v.83$6294$6639))) v.86$6297$6645)) (cdr v.84$6295$6641)) #f)) (car v.84$6295$6641)) #f)) (car v.83$6294$6639)) #f)) (cdr expr$6204$6381))))) ((lambda (v.78$6289$6649) (if (pair? v.78$6289$6649) ((lambda (v.79$6290$6651) (if (pair? v.79$6290$6651) ((lambda (v.80$6291$6653) (if (compare$6206$6383 v.80$6291$6653 (rename$6205$6382 (quote or))) ((lambda (v.81$6292$6655) ((lambda (p$6656) ((lambda (v.82$6293$6657) ((lambda (x$6658) (cons (cons-source (rename$6205$6382 (quote match-extract-underscore)) (cons-source p$6656 x$6658 (quote (p . x))) (quote (match-extract-underscore p . x))) #f)) v.82$6293$6657)) (cdr v.78$6289$6649))) v.81$6292$6655)) (cdr v.79$6290$6651)) #f)) (car v.79$6290$6651)) #f)) (car v.78$6289$6649)) #f)) (cdr expr$6204$6381))))) ((lambda (v.73$6284$6659) (if (pair? v.73$6284$6659) ((lambda (v.74$6285$6661) (if (pair? v.74$6285$6661) ((lambda (v.75$6286$6663) (if (compare$6206$6383 v.75$6286$6663 (rename$6205$6382 (quote and))) ((lambda (v.76$6287$6665) ((lambda (p$6666) ((lambda (v.77$6288$6667) ((lambda (x$6668) (cons (cons-source (rename$6205$6382 (quote match-extract-underscore)) (cons-source p$6666 x$6668 (quote (p . x))) (quote (match-extract-underscore p . x))) #f)) v.77$6288$6667)) (cdr v.73$6284$6659))) v.76$6287$6665)) (cdr v.74$6285$6661)) #f)) (car v.74$6285$6661)) #f)) (car v.73$6284$6659)) #f)) (cdr expr$6204$6381))))) ((lambda (v.60$6271$6669) (if (pair? v.60$6271$6669) ((lambda (v.61$6272$6671) (if (pair? v.61$6272$6671) ((lambda (v.62$6273$6673) (if (compare$6206$6383 v.62$6273$6673 (rename$6205$6382 (quote quasiquote))) ((lambda (v.63$6274$6675) (if (pair? v.63$6274$6675) ((lambda (v.64$6275$6677) ((lambda (x$6678) ((lambda (v.65$6276$6679) (if (null? v.65$6276$6679) ((lambda (v.66$6277$6681) (if (pair? v.66$6277$6681) ((lambda (v.67$6278$6683) ((lambda (k$6684) ((lambda (v.68$6279$6685) (if (pair? v.68$6279$6685) ((lambda (v.69$6280$6687) ((lambda (i$6688) ((lambda (v.70$6281$6689) (if (pair? v.70$6281$6689) ((lambda (v.71$6282$6691) ((lambda (v$6692) ((lambda (v.72$6283$6693) (if (null? v.72$6283$6693) (cons (cons-source (rename$6205$6382 (quote match-extract-quasiquote-vars)) (cons-source x$6678 (cons-source k$6684 (cons-source i$6688 (cons-source v$6692 (cons-source (cons-source #t (quote ()) (quote (#t))) (quote ()) (quote ((#t)))) (quote (v (#t)))) (quote (i v (#t)))) (quote (k i v (#t)))) (quote (x k i v (#t)))) (quote (match-extract-quasiquote-vars x k i v (#t)))) #f) #f)) (cdr v.70$6281$6689))) v.71$6282$6691)) (car v.70$6281$6689)) #f)) (cdr v.68$6279$6685))) v.69$6280$6687)) (car v.68$6279$6685)) #f)) (cdr v.66$6277$6681))) v.67$6278$6683)) (car v.66$6277$6681)) #f)) (cdr v.60$6271$6669)) #f)) (cdr v.63$6274$6675))) v.64$6275$6677)) (car v.63$6274$6675)) #f)) (cdr v.61$6272$6671)) #f)) (car v.61$6272$6671)) #f)) (car v.60$6271$6669)) #f)) (cdr expr$6204$6381))))) ((lambda (v.47$6258$6695) (if (pair? v.47$6258$6695) ((lambda (v.48$6259$6697) (if (pair? v.48$6259$6697) ((lambda (v.49$6260$6699) (if (compare$6206$6383 v.49$6260$6699 (rename$6205$6382 (quote quote))) ((lambda (v.50$6261$6701) (if (pair? v.50$6261$6701) ((lambda (v.51$6262$6703) ((lambda (x$6704) ((lambda (v.52$6263$6705) (if (null? v.52$6263$6705) ((lambda (v.53$6264$6707) (if (pair? v.53$6264$6707) ((lambda (v.54$6265$6709) (if (list? v.54$6265$6709) ((lambda (k$6711) ((lambda (v.55$6266$6712) (if (pair? v.55$6266$6712) ((lambda (v.56$6267$6714) ((lambda (i$6715) ((lambda (v.57$6268$6716) (if (pair? v.57$6268$6716) ((lambda (v.58$6269$6718) ((lambda (v$6719) ((lambda (v.59$6270$6720) (if (null? v.59$6270$6720) (cons (append (map (lambda (k$6722) k$6722) k$6711) (cons-source v$6719 (quote ()) (quote (v)))) #f) #f)) (cdr v.57$6268$6716))) v.58$6269$6718)) (car v.57$6268$6716)) #f)) (cdr v.55$6266$6712))) v.56$6267$6714)) (car v.55$6266$6712)) #f)) (cdr v.53$6264$6707))) v.54$6265$6709) #f)) (car v.53$6264$6707)) #f)) (cdr v.47$6258$6695)) #f)) (cdr v.50$6261$6701))) v.51$6262$6703)) (car v.50$6261$6701)) #f)) (cdr v.48$6259$6697)) #f)) (car v.48$6259$6697)) #f)) (car v.47$6258$6695)) #f)) (cdr expr$6204$6381))))) ((lambda (v.38$6249$6723) (if (pair? v.38$6249$6723) ((lambda (v.39$6250$6725) (if (pair? v.39$6250$6725) ((lambda (v.40$6251$6727) (if (compare$6206$6383 v.40$6251$6727 (rename$6205$6382 (quote =))) ((lambda (v.41$6252$6729) (if (pair? v.41$6252$6729) ((lambda (v.42$6253$6731) ((lambda (proc$6732) ((lambda (v.43$6254$6733) (if (pair? v.43$6254$6733) ((lambda (v.44$6255$6735) ((lambda (p$6736) ((lambda (v.45$6256$6737) (if (null? v.45$6256$6737) ((lambda (v.46$6257$6739) ((lambda (x$6740) (cons (cons-source (rename$6205$6382 (quote match-extract-underscore)) (cons-source p$6736 x$6740 (quote (p . x))) (quote (match-extract-underscore p . x))) #f)) v.46$6257$6739)) (cdr v.38$6249$6723)) #f)) (cdr v.43$6254$6733))) v.44$6255$6735)) (car v.43$6254$6733)) #f)) (cdr v.41$6252$6729))) v.42$6253$6731)) (car v.41$6252$6729)) #f)) (cdr v.39$6250$6725)) #f)) (car v.39$6250$6725)) #f)) (car v.38$6249$6723)) #f)) (cdr expr$6204$6381))))) ((lambda (v.22$6233$6741) (if (pair? v.22$6233$6741) ((lambda (v.23$6234$6743) (if (pair? v.23$6234$6743) ((lambda (v.24$6235$6745) (if (compare$6206$6383 v.24$6235$6745 (rename$6205$6382 (quote object))) ((lambda (v.25$6236$6747) (if (pair? v.25$6236$6747) ((lambda (v.26$6237$6749) ((lambda (rec$6750) ((lambda (v.27$6238$6751) ((lambda (w.28$6239$6753 f-ls30$6241$6754 p-ls31$6242$6755) ((lambda (lp.29$6240$6756) (set! lp.29$6240$6756 (lambda (w.28$6239$6757 f-ls30$6241$6758 p-ls31$6242$6759) (if (null? w.28$6239$6757) ((lambda (f$6760 p$6761) ((lambda (v.37$6248$6762) ((lambda (x$6763) (cons (cons-source (rename$6205$6382 (quote match-extract-underscore)) (cons-source p$6761 x$6763 (quote ((p ...) . x))) (quote (match-extract-underscore (p ...) . x))) #f)) v.37$6248$6762)) (cdr v.22$6233$6741))) (reverse f-ls30$6241$6758) (reverse p-ls31$6242$6759)) (if (pair? w.28$6239$6757) ((lambda (v.32$6243$6765) (if (pair? v.32$6243$6765) ((lambda (v.33$6244$6767) ((lambda (f$6768) ((lambda (v.34$6245$6769) (if (pair? v.34$6245$6769) ((lambda (v.35$6246$6771) ((lambda (p$6772) ((lambda (v.36$6247$6773) (if (null? v.36$6247$6773) (lp.29$6240$6756 (cdr w.28$6239$6757) (cons f$6768 f-ls30$6241$6758) (cons p$6772 p-ls31$6242$6759)) #f)) (cdr v.34$6245$6769))) v.35$6246$6771)) (car v.34$6245$6769)) #f)) (cdr v.32$6243$6765))) v.33$6244$6767)) (car v.32$6243$6765)) #f)) (car w.28$6239$6757)) #f)))) (lp.29$6240$6756 w.28$6239$6753 f-ls30$6241$6754 p-ls31$6242$6755)) #f)) v.27$6238$6751 (quote ()) (quote ()))) (cdr v.25$6236$6747))) v.26$6237$6749)) (car v.25$6236$6747)) #f)) (cdr v.23$6234$6743)) #f)) (car v.23$6234$6743)) #f)) (car v.22$6233$6741)) #f)) (cdr expr$6204$6381))))) ((lambda (v.15$6226$6775) (if (pair? v.15$6226$6775) ((lambda (v.16$6227$6777) (if (pair? v.16$6227$6777) ((lambda (v.17$6228$6779) (if (compare$6206$6383 v.17$6228$6779 (rename$6205$6382 (quote struct))) ((lambda (v.18$6229$6781) (if (pair? v.18$6229$6781) ((lambda (v.19$6230$6783) ((lambda (rec$6784) ((lambda (v.20$6231$6785) ((lambda (p$6786) ((lambda (v.21$6232$6787) ((lambda (x$6788) (cons (cons-source (rename$6205$6382 (quote match-extract-underscore)) (cons-source p$6786 x$6788 (quote (p . x))) (quote (match-extract-underscore p . x))) #f)) v.21$6232$6787)) (cdr v.15$6226$6775))) v.20$6231$6785)) (cdr v.18$6229$6781))) v.19$6230$6783)) (car v.18$6229$6781)) #f)) (cdr v.16$6227$6777)) #f)) (car v.16$6227$6777)) #f)) (car v.15$6226$6775)) #f)) (cdr expr$6204$6381))))) ((lambda (v.8$6219$6789) (if (pair? v.8$6219$6789) ((lambda (v.9$6220$6791) (if (pair? v.9$6220$6791) ((lambda (v.10$6221$6793) (if (compare$6206$6383 v.10$6221$6793 (rename$6205$6382 (quote $))) ((lambda (v.11$6222$6795) (if (pair? v.11$6222$6795) ((lambda (v.12$6223$6797) ((lambda (rec$6798) ((lambda (v.13$6224$6799) ((lambda (p$6800) ((lambda (v.14$6225$6801) ((lambda (x$6802) (cons (cons-source (rename$6205$6382 (quote match-extract-underscore)) (cons-source p$6800 x$6802 (quote (p . x))) (quote (match-extract-underscore p . x))) #f)) v.14$6225$6801)) (cdr v.8$6219$6789))) v.13$6224$6799)) (cdr v.11$6222$6795))) v.12$6223$6797)) (car v.11$6222$6795)) #f)) (cdr v.9$6220$6791)) #f)) (car v.9$6220$6791)) #f)) (car v.8$6219$6789)) #f)) (cdr expr$6204$6381))))) ((lambda (v.1$6212$6803) (if (pair? v.1$6212$6803) ((lambda (v.2$6213$6805) (if (pair? v.2$6213$6805) ((lambda (v.3$6214$6807) (if (compare$6206$6383 v.3$6214$6807 (rename$6205$6382 (quote ?))) ((lambda (v.4$6215$6809) (if (pair? v.4$6215$6809) ((lambda (v.5$6216$6811) ((lambda (pred$6812) ((lambda (v.6$6217$6813) ((lambda (p$6814) ((lambda (v.7$6218$6815) ((lambda (x$6816) (cons (cons-source (rename$6205$6382 (quote match-extract-underscore)) (cons-source p$6814 x$6816 (quote (p . x))) (quote (match-extract-underscore p . x))) #f)) v.7$6218$6815)) (cdr v.1$6212$6803))) v.6$6217$6813)) (cdr v.4$6215$6809))) v.5$6216$6811)) (car v.4$6215$6809)) #f)) (cdr v.2$6213$6805)) #f)) (car v.2$6213$6805)) #f)) (car v.1$6212$6803)) #f)) (cdr expr$6204$6381))))) (match-extract-underscore lambda (expr$6138$6155 rename$6139$6156 compare$6140$6157) (car ((lambda (tmp$6159$6161) (if tmp$6159$6161 tmp$6159$6161 (cons (error "no expansion for" expr$6138$6155) #f))) ((lambda (v.1$6146$6162) (if (pair? v.1$6146$6162) ((lambda (v.2$6147$6164) ((lambda (p$6165) ((lambda (v.3$6148$6166) (if (pair? v.3$6148$6166) ((lambda (v.4$6149$6168) (if (list? v.4$6149$6168) ((lambda (k$6170) ((lambda (v.5$6150$6171) (if (pair? v.5$6150$6171) ((lambda (v.6$6151$6173) ((lambda (i$6174) ((lambda (v.7$6152$6175) (if (pair? v.7$6152$6175) ((lambda (v.8$6153$6177) ((lambda (v$6178) ((lambda (v.9$6154$6179) (if (null? v.9$6154$6179) (cons (cons-source (rename$6139$6156 (quote underscore?)) (cons-source p$6165 (cons-source (append (map (lambda (k$6181) k$6181) k$6170) (cons-source v$6178 (quote ()) (quote (v)))) (cons-source (cons-source (rename$6139$6156 (quote match-extract-vars)) (cons-source p$6165 (cons-source k$6170 (cons-source i$6174 (cons-source v$6178 (quote ()) (quote (v))) (quote (i v))) (quote ((k ...) i v))) (quote (p (k ...) i v))) (quote (match-extract-vars p (k ...) i v))) (quote ()) (quote ((match-extract-vars p (k ...) i v)))) (quote ((k ... v) (match-extract-vars p (k ...) i v)))) (quote (p (k ... v) (match-extract-vars p (k ...) i v)))) (quote (underscore? p (k ... v) (match-extract-vars p (k ...) i v)))) #f) #f)) (cdr v.7$6152$6175))) v.8$6153$6177)) (car v.7$6152$6175)) #f)) (cdr v.5$6150$6171))) v.6$6151$6173)) (car v.5$6150$6171)) #f)) (cdr v.3$6148$6166))) v.4$6149$6168) #f)) (car v.3$6148$6166)) #f)) (cdr v.1$6146$6162))) v.2$6147$6164)) (car v.1$6146$6162)) #f)) (cdr expr$6138$6155))))) (match-record-named-refs lambda (expr$5948$5992 rename$5949$5993 compare$5950$5994) (car ((lambda (tmp$5996$5998) (if tmp$5996$5998 tmp$5996$5998 ((lambda (tmp$6000$6002) (if tmp$6000$6002 tmp$6000$6002 (cons (error "no expansion for" expr$5948$5992) #f))) ((lambda (v.22$5977$6003) (if (pair? v.22$5977$6003) ((lambda (v.23$5978$6005) ((lambda (v$6006) ((lambda (v.24$5979$6007) (if (pair? v.24$5979$6007) ((lambda (v.25$5980$6009) ((lambda (rec$6010) ((lambda (v.26$5981$6011) (if (pair? v.26$5981$6011) ((lambda (v.27$5982$6013) (if (null? v.27$5982$6013) ((lambda (v.28$5983$6015) (if (pair? v.28$5983$6015) ((lambda (v.29$5984$6017) ((lambda (g+s$6018) ((lambda (v.30$5985$6019) (if (pair? v.30$5985$6019) ((lambda (v.31$5986$6021) (if (list? v.31$5986$6021) ((lambda (sk$6023) ((lambda (v.32$5987$6024) (if (pair? v.32$5987$6024) ((lambda (v.33$5988$6026) ((lambda (fk$6027) ((lambda (v.34$5989$6028) (if (pair? v.34$5989$6028) ((lambda (v.35$5990$6030) ((lambda (i$6031) ((lambda (v.36$5991$6032) (if (null? v.36$5991$6032) (cons (append (map (lambda (sk$6034) sk$6034) sk$6023) (cons-source i$6031 (quote ()) (quote (i)))) #f) #f)) (cdr v.34$5989$6028))) v.35$5990$6030)) (car v.34$5989$6028)) #f)) (cdr v.32$5987$6024))) v.33$5988$6026)) (car v.32$5987$6024)) #f)) (cdr v.30$5985$6019))) v.31$5986$6021) #f)) (car v.30$5985$6019)) #f)) (cdr v.28$5983$6015))) v.29$5984$6017)) (car v.28$5983$6015)) #f)) (cdr v.26$5981$6011)) #f)) (car v.26$5981$6011)) #f)) (cdr v.24$5979$6007))) v.25$5980$6009)) (car v.24$5979$6007)) #f)) (cdr v.22$5977$6003))) v.23$5978$6005)) (car v.22$5977$6003)) #f)) (cdr expr$5948$5992))))) ((lambda (v.1$5956$6035) (if (pair? v.1$5956$6035) ((lambda (v.2$5957$6037) ((lambda (v$6038) ((lambda (v.3$5958$6039) (if (pair? v.3$5958$6039) ((lambda (v.4$5959$6041) ((lambda (rec$6042) ((lambda (v.5$5960$6043) (if (pair? v.5$5960$6043) ((lambda (v.6$5961$6045) (if (pair? v.6$5961$6045) ((lambda (v.7$5962$6047) (if (pair? v.7$5962$6047) ((lambda (v.8$5963$6049) ((lambda (f$6050) ((lambda (v.9$5964$6051) (if (pair? v.9$5964$6051) ((lambda (v.10$5965$6053) ((lambda (p$6054) ((lambda (v.11$5966$6055) (if (null? v.11$5966$6055) ((lambda (v.12$5967$6057) ((lambda (q$6058) ((lambda (v.13$5968$6059) (if (pair? v.13$5968$6059) ((lambda (v.14$5969$6061) ((lambda (g+s$6062) ((lambda (v.15$5970$6063) (if (pair? v.15$5970$6063) ((lambda (v.16$5971$6065) ((lambda (sk$6066) ((lambda (v.17$5972$6067) (if (pair? v.17$5972$6067) ((lambda (v.18$5973$6069) ((lambda (fk$6070) ((lambda (v.19$5974$6071) (if (pair? v.19$5974$6071) ((lambda (v.20$5975$6073) ((lambda (i$6074) ((lambda (v.21$5976$6075) (if (null? v.21$5976$6075) (cons (cons-source (rename$5949$5993 (quote let)) (cons-source (cons-source (cons-source (rename$5949$5993 (quote w)) (cons-source (cons-source (rename$5949$5993 (quote slot-ref)) (cons-source rec$6042 (cons-source v$6038 (cons-source (cons-source (rename$5949$5993 (quote quote)) (cons-source f$6050 (quote ()) (quote (f))) (quote (quote f))) (quote ()) (quote ((quote f)))) (quote (v (quote f)))) (quote (rec v (quote f)))) (quote (slot-ref rec v (quote f)))) (quote ()) (quote ((slot-ref rec v (quote f))))) (quote (w (slot-ref rec v (quote f))))) (quote ()) (quote ((w (slot-ref rec v (quote f)))))) (cons-source (cons-source (rename$5949$5993 (quote match-one)) (cons-source (rename$5949$5993 (quote w)) (cons-source p$6054 (cons-source (cons-source (cons-source (rename$5949$5993 (quote slot-ref)) (cons-source rec$6042 (cons-source v$6038 (cons-source (cons-source (rename$5949$5993 (quote quote)) (cons-source f$6050 (quote ()) (quote (f))) (quote (quote f))) (quote ()) (quote ((quote f)))) (quote (v (quote f)))) (quote (rec v (quote f)))) (quote (slot-ref rec v (quote f)))) (cons-source (cons-source (rename$5949$5993 (quote new-slot-set!)) (cons-source rec$6042 (cons-source v$6038 (cons-source (cons-source (rename$5949$5993 (quote quote)) (cons-source f$6050 (quote ()) (quote (f))) (quote (quote f))) (quote ()) (quote ((quote f)))) (quote (v (quote f)))) (quote (rec v (quote f)))) (quote (new-slot-set! rec v (quote f)))) (quote ()) (quote ((new-slot-set! rec v (quote f))))) (quote ((slot-ref rec v (quote f)) (new-slot-set! rec v (quote f))))) (cons-source (cons-source (rename$5949$5993 (quote match-record-named-refs)) (cons-source v$6038 (cons-source rec$6042 (cons-source q$6058 (cons-source g+s$6062 (cons-source sk$6066 (cons-source fk$6070 (quote ()) (quote (fk))) (quote (sk fk))) (quote (g+s sk fk))) (quote (q g+s sk fk))) (quote (rec q g+s sk fk))) (quote (v rec q g+s sk fk))) (quote (match-record-named-refs v rec q g+s sk fk))) (cons-source fk$6070 (cons-source i$6074 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-record-named-refs v rec q g+s sk fk) fk i))) (quote (((slot-ref rec v (quote f)) (new-slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote (p ((slot-ref rec v (quote f)) (new-slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote (w p ((slot-ref rec v (quote f)) (new-slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote (match-one w p ((slot-ref rec v (quote f)) (new-slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote ()) (quote ((match-one w p ((slot-ref rec v (quote f)) (new-slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i)))) (quote (((w (slot-ref rec v (quote f)))) (match-one w p ((slot-ref rec v (quote f)) (new-slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i)))) (quote (let ((w (slot-ref rec v (quote f)))) (match-one w p ((slot-ref rec v (quote f)) (new-slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i)))) #f) #f)) (cdr v.19$5974$6071))) v.20$5975$6073)) (car v.19$5974$6071)) #f)) (cdr v.17$5972$6067))) v.18$5973$6069)) (car v.17$5972$6067)) #f)) (cdr v.15$5970$6063))) v.16$5971$6065)) (car v.15$5970$6063)) #f)) (cdr v.13$5968$6059))) v.14$5969$6061)) (car v.13$5968$6059)) #f)) (cdr v.5$5960$6043))) v.12$5967$6057)) (cdr v.6$5961$6045)) #f)) (cdr v.9$5964$6051))) v.10$5965$6053)) (car v.9$5964$6051)) #f)) (cdr v.7$5962$6047))) v.8$5963$6049)) (car v.7$5962$6047)) #f)) (car v.6$5961$6045)) #f)) (car v.5$5960$6043)) #f)) (cdr v.3$5958$6039))) v.4$5959$6041)) (car v.3$5958$6039)) #f)) (cdr v.1$5956$6035))) v.2$5957$6037)) (car v.1$5956$6035)) #f)) (cdr expr$5948$5992))))) (match-record-refs lambda (expr$5757$5801 rename$5758$5802 compare$5759$5803) (car ((lambda (tmp$5805$5807) (if tmp$5805$5807 tmp$5805$5807 ((lambda (tmp$5809$5811) (if tmp$5809$5811 tmp$5809$5811 (cons (error "no expansion for" expr$5757$5801) #f))) ((lambda (v.20$5784$5812) (if (pair? v.20$5784$5812) ((lambda (v.21$5785$5814) ((lambda (v$5815) ((lambda (v.22$5786$5816) (if (pair? v.22$5786$5816) ((lambda (v.23$5787$5818) ((lambda (rec$5819) ((lambda (v.24$5788$5820) (if (pair? v.24$5788$5820) ((lambda (v.25$5789$5822) ((lambda (n$5823) ((lambda (v.26$5790$5824) (if (pair? v.26$5790$5824) ((lambda (v.27$5791$5826) (if (null? v.27$5791$5826) ((lambda (v.28$5792$5828) (if (pair? v.28$5792$5828) ((lambda (v.29$5793$5830) ((lambda (g+s$5831) ((lambda (v.30$5794$5832) (if (pair? v.30$5794$5832) ((lambda (v.31$5795$5834) (if (list? v.31$5795$5834) ((lambda (sk$5836) ((lambda (v.32$5796$5837) (if (pair? v.32$5796$5837) ((lambda (v.33$5797$5839) ((lambda (fk$5840) ((lambda (v.34$5798$5841) (if (pair? v.34$5798$5841) ((lambda (v.35$5799$5843) ((lambda (i$5844) ((lambda (v.36$5800$5845) (if (null? v.36$5800$5845) (cons (append (map (lambda (sk$5847) sk$5847) sk$5836) (cons-source i$5844 (quote ()) (quote (i)))) #f) #f)) (cdr v.34$5798$5841))) v.35$5799$5843)) (car v.34$5798$5841)) #f)) (cdr v.32$5796$5837))) v.33$5797$5839)) (car v.32$5796$5837)) #f)) (cdr v.30$5794$5832))) v.31$5795$5834) #f)) (car v.30$5794$5832)) #f)) (cdr v.28$5792$5828))) v.29$5793$5830)) (car v.28$5792$5828)) #f)) (cdr v.26$5790$5824)) #f)) (car v.26$5790$5824)) #f)) (cdr v.24$5788$5820))) v.25$5789$5822)) (car v.24$5788$5820)) #f)) (cdr v.22$5786$5816))) v.23$5787$5818)) (car v.22$5786$5816)) #f)) (cdr v.20$5784$5812))) v.21$5785$5814)) (car v.20$5784$5812)) #f)) (cdr expr$5757$5801))))) ((lambda (v.1$5765$5848) (if (pair? v.1$5765$5848) ((lambda (v.2$5766$5850) ((lambda (v$5851) ((lambda (v.3$5767$5852) (if (pair? v.3$5767$5852) ((lambda (v.4$5768$5854) ((lambda (rec$5855) ((lambda (v.5$5769$5856) (if (pair? v.5$5769$5856) ((lambda (v.6$5770$5858) ((lambda (n$5859) ((lambda (v.7$5771$5860) (if (pair? v.7$5771$5860) ((lambda (v.8$5772$5862) (if (pair? v.8$5772$5862) ((lambda (v.9$5773$5864) ((lambda (p$5865) ((lambda (v.10$5774$5866) ((lambda (q$5867) ((lambda (v.11$5775$5868) (if (pair? v.11$5775$5868) ((lambda (v.12$5776$5870) ((lambda (g+s$5871) ((lambda (v.13$5777$5872) (if (pair? v.13$5777$5872) ((lambda (v.14$5778$5874) ((lambda (sk$5875) ((lambda (v.15$5779$5876) (if (pair? v.15$5779$5876) ((lambda (v.16$5780$5878) ((lambda (fk$5879) ((lambda (v.17$5781$5880) (if (pair? v.17$5781$5880) ((lambda (v.18$5782$5882) ((lambda (i$5883) ((lambda (v.19$5783$5884) (if (null? v.19$5783$5884) (cons (cons-source (rename$5758$5802 (quote let)) (cons-source (cons-source (cons-source (rename$5758$5802 (quote w)) (cons-source (cons-source (rename$5758$5802 (quote slot-ref)) (cons-source rec$5855 (cons-source v$5851 (cons-source n$5859 (quote ()) (quote (n))) (quote (v n))) (quote (rec v n))) (quote (slot-ref rec v n))) (quote ()) (quote ((slot-ref rec v n)))) (quote (w (slot-ref rec v n)))) (quote ()) (quote ((w (slot-ref rec v n))))) (cons-source (cons-source (rename$5758$5802 (quote match-one)) (cons-source (rename$5758$5802 (quote w)) (cons-source p$5865 (cons-source (cons-source (cons-source (rename$5758$5802 (quote slot-ref)) (cons-source rec$5855 (cons-source v$5851 (cons-source n$5859 (quote ()) (quote (n))) (quote (v n))) (quote (rec v n))) (quote (slot-ref rec v n))) (cons-source (cons-source (rename$5758$5802 (quote new-slot-set!)) (cons-source rec$5855 (cons-source v$5851 (cons-source n$5859 (quote ()) (quote (n))) (quote (v n))) (quote (rec v n))) (quote (new-slot-set! rec v n))) (quote ()) (quote ((new-slot-set! rec v n)))) (quote ((slot-ref rec v n) (new-slot-set! rec v n)))) (cons-source (cons-source (rename$5758$5802 (quote match-record-refs)) (cons-source v$5851 (cons-source rec$5855 (cons-source (cons-source (rename$5758$5802 (quote +)) (cons-source n$5859 (cons-source 1 (quote ()) (quote (1))) (quote (n 1))) (quote (+ n 1))) (cons-source q$5867 (cons-source g+s$5871 (cons-source sk$5875 (cons-source fk$5879 (quote ()) (quote (fk))) (quote (sk fk))) (quote (g+s sk fk))) (quote (q g+s sk fk))) (quote ((+ n 1) q g+s sk fk))) (quote (rec (+ n 1) q g+s sk fk))) (quote (v rec (+ n 1) q g+s sk fk))) (quote (match-record-refs v rec (+ n 1) q g+s sk fk))) (cons-source fk$5879 (cons-source i$5883 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (((slot-ref rec v n) (new-slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (p ((slot-ref rec v n) (new-slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (w p ((slot-ref rec v n) (new-slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (match-one w p ((slot-ref rec v n) (new-slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote ()) (quote ((match-one w p ((slot-ref rec v n) (new-slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i)))) (quote (((w (slot-ref rec v n))) (match-one w p ((slot-ref rec v n) (new-slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i)))) (quote (let ((w (slot-ref rec v n))) (match-one w p ((slot-ref rec v n) (new-slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i)))) #f) #f)) (cdr v.17$5781$5880))) v.18$5782$5882)) (car v.17$5781$5880)) #f)) (cdr v.15$5779$5876))) v.16$5780$5878)) (car v.15$5779$5876)) #f)) (cdr v.13$5777$5872))) v.14$5778$5874)) (car v.13$5777$5872)) #f)) (cdr v.11$5775$5868))) v.12$5776$5870)) (car v.11$5775$5868)) #f)) (cdr v.7$5771$5860))) v.10$5774$5866)) (cdr v.8$5772$5862))) v.9$5773$5864)) (car v.8$5772$5862)) #f)) (car v.7$5771$5860)) #f)) (cdr v.5$5769$5856))) v.6$5770$5858)) (car v.5$5769$5856)) #f)) (cdr v.3$5767$5852))) v.4$5768$5854)) (car v.3$5767$5852)) #f)) (cdr v.1$5765$5848))) v.2$5766$5850)) (car v.1$5765$5848)) #f)) (cdr expr$5757$5801))))) (match-vector-tail-two lambda (expr$5601$5635 rename$5602$5636 compare$5603$5637) (car ((lambda (tmp$5639$5641) (if tmp$5639$5641 tmp$5639$5641 (cons (error "no expansion for" expr$5601$5635) #f))) ((lambda (v.1$5609$5642) (if (pair? v.1$5609$5642) ((lambda (v.2$5610$5644) ((lambda (v$5645) ((lambda (v.3$5611$5646) (if (pair? v.3$5611$5646) ((lambda (v.4$5612$5648) ((lambda (p$5649) ((lambda (v.5$5613$5650) (if (pair? v.5$5613$5650) ((lambda (v.6$5614$5652) ((lambda (n$5653) ((lambda (v.7$5615$5654) (if (pair? v.7$5615$5654) ((lambda (v.8$5616$5656) ((lambda (len$5657) ((lambda (v.9$5617$5658) (if (pair? v.9$5617$5658) ((lambda (v.10$5618$5660) (if (list? v.10$5618$5660) ((lambda (sk$5662) ((lambda (v.11$5619$5663) (if (pair? v.11$5619$5663) ((lambda (v.12$5620$5665) ((lambda (fk$5666) ((lambda (v.13$5621$5667) (if (pair? v.13$5621$5667) ((lambda (v.14$5622$5669) ((lambda (i$5670) ((lambda (v.15$5623$5671) (if (pair? v.15$5623$5671) ((lambda (v.16$5624$5673) ((lambda (w.17$5625$5675 id-ls19$5627$5676 id-ls-ls20$5628$5677) ((lambda (lp.18$5626$5678) (set! lp.18$5626$5678 (lambda (w.17$5625$5679 id-ls19$5627$5680 id-ls-ls20$5628$5681) (if (null? w.17$5625$5679) ((lambda (id$5682 id-ls$5683) ((lambda (v.26$5634$5684) (if (null? v.26$5634$5684) (cons (cons-source (rename$5602$5636 (quote let)) (cons-source (rename$5602$5636 (quote loop)) (cons-source (cons-source (cons-source (rename$5602$5636 (quote j)) (cons-source n$5653 (quote ()) (quote (n))) (quote (j n))) (map (lambda (id-ls$5686) (cons-source id-ls$5686 (cons-source (cons-source (rename$5602$5636 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$5683) (quote ((j n) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$5602$5636 (quote if)) (cons-source (cons-source (rename$5602$5636 (quote >=)) (cons-source (rename$5602$5636 (quote j)) (cons-source len$5657 (quote ()) (quote (len))) (quote (j len))) (quote (>= j len))) (cons-source (cons-source (rename$5602$5636 (quote let)) (cons-source (map (lambda (id$5687 id-ls$5688) (cons-source id$5687 (cons-source (cons-source (rename$5602$5636 (quote reverse)) (cons-source id-ls$5688 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$5682 id-ls$5683) (cons-source (append (map (lambda (sk$5689) sk$5689) sk$5662) (cons-source i$5670 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((id (reverse id-ls)) ...) (sk ... i)))) (quote (let ((id (reverse id-ls)) ...) (sk ... i)))) (cons-source (cons-source (rename$5602$5636 (quote let)) (cons-source (cons-source (cons-source (rename$5602$5636 (quote w)) (cons-source (cons-source (rename$5602$5636 (quote vector-ref)) (cons-source v$5645 (cons-source (rename$5602$5636 (quote j)) (quote ()) (quote (j))) (quote (v j))) (quote (vector-ref v j))) (quote ()) (quote ((vector-ref v j)))) (quote (w (vector-ref v j)))) (quote ()) (quote ((w (vector-ref v j))))) (cons-source (cons-source (rename$5602$5636 (quote match-one)) (cons-source (rename$5602$5636 (quote w)) (cons-source p$5649 (cons-source (cons-source (cons-source (rename$5602$5636 (quote vector-ref)) (cons-source v$5645 (cons-source (rename$5602$5636 (quote j)) (quote ()) (quote (j))) (quote (v j))) (quote (vector-ref v j))) (cons-source (cons-source (rename$5602$5636 (quote vector-set!)) (cons-source v$5645 (cons-source (rename$5602$5636 (quote j)) (quote ()) (quote (j))) (quote (v j))) (quote (vector-set! v j))) (quote ()) (quote ((vector-set! v j)))) (quote ((vector-ref v j) (vector-set! v j)))) (cons-source (cons-source (rename$5602$5636 (quote match-drop-ids)) (cons-source (cons-source (rename$5602$5636 (quote loop)) (cons-source (cons-source (rename$5602$5636 (quote +)) (cons-source (rename$5602$5636 (quote j)) (cons-source 1 (quote ()) (quote (1))) (quote (j 1))) (quote (+ j 1))) (map (lambda (id$5690 id-ls$5691) (cons-source (rename$5602$5636 (quote cons)) (cons-source id$5690 (cons-source id-ls$5691 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$5682 id-ls$5683) (quote ((+ j 1) (cons id id-ls) ...))) (quote (loop (+ j 1) (cons id id-ls) ...))) (quote ()) (quote ((loop (+ j 1) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)))) (cons-source fk$5666 (cons-source i$5670 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote ()) (quote ((match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))) (quote (((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))) (quote (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))) (quote ()) (quote ((let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote ((let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote ((>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote ()) (quote ((if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) (quote (((j n) (id-ls (quote ())) ...) (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) (quote (loop ((j n) (id-ls (quote ())) ...) (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) (quote (let loop ((j n) (id-ls (quote ())) ...) (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) #f) #f)) (cdr v.15$5623$5671))) (reverse id-ls19$5627$5680) (reverse id-ls-ls20$5628$5681)) (if (pair? w.17$5625$5679) ((lambda (v.21$5629$5693) (if (pair? v.21$5629$5693) ((lambda (v.22$5630$5695) ((lambda (id$5696) ((lambda (v.23$5631$5697) (if (pair? v.23$5631$5697) ((lambda (v.24$5632$5699) ((lambda (id-ls$5700) ((lambda (v.25$5633$5701) (if (null? v.25$5633$5701) (lp.18$5626$5678 (cdr w.17$5625$5679) (cons id$5696 id-ls19$5627$5680) (cons id-ls$5700 id-ls-ls20$5628$5681)) #f)) (cdr v.23$5631$5697))) v.24$5632$5699)) (car v.23$5631$5697)) #f)) (cdr v.21$5629$5693))) v.22$5630$5695)) (car v.21$5629$5693)) #f)) (car w.17$5625$5679)) #f)))) (lp.18$5626$5678 w.17$5625$5675 id-ls19$5627$5676 id-ls-ls20$5628$5677)) #f)) v.16$5624$5673 (quote ()) (quote ()))) (car v.15$5623$5671)) #f)) (cdr v.13$5621$5667))) v.14$5622$5669)) (car v.13$5621$5667)) #f)) (cdr v.11$5619$5663))) v.12$5620$5665)) (car v.11$5619$5663)) #f)) (cdr v.9$5617$5658))) v.10$5618$5660) #f)) (car v.9$5617$5658)) #f)) (cdr v.7$5615$5654))) v.8$5616$5656)) (car v.7$5615$5654)) #f)) (cdr v.5$5613$5650))) v.6$5614$5652)) (car v.5$5613$5650)) #f)) (cdr v.3$5611$5646))) v.4$5612$5648)) (car v.3$5611$5646)) #f)) (cdr v.1$5609$5642))) v.2$5610$5644)) (car v.1$5609$5642)) #f)) (cdr expr$5601$5635))))) (match-vector-tail lambda (expr$5511$5534 rename$5512$5535 compare$5513$5536) (car ((lambda (tmp$5538$5540) (if tmp$5538$5540 tmp$5538$5540 (cons (error "no expansion for" expr$5511$5534) #f))) ((lambda (v.1$5519$5541) (if (pair? v.1$5519$5541) ((lambda (v.2$5520$5543) ((lambda (v$5544) ((lambda (v.3$5521$5545) (if (pair? v.3$5521$5545) ((lambda (v.4$5522$5547) ((lambda (p$5548) ((lambda (v.5$5523$5549) (if (pair? v.5$5523$5549) ((lambda (v.6$5524$5551) ((lambda (n$5552) ((lambda (v.7$5525$5553) (if (pair? v.7$5525$5553) ((lambda (v.8$5526$5555) ((lambda (len$5556) ((lambda (v.9$5527$5557) (if (pair? v.9$5527$5557) ((lambda (v.10$5528$5559) ((lambda (sk$5560) ((lambda (v.11$5529$5561) (if (pair? v.11$5529$5561) ((lambda (v.12$5530$5563) ((lambda (fk$5564) ((lambda (v.13$5531$5565) (if (pair? v.13$5531$5565) ((lambda (v.14$5532$5567) ((lambda (i$5568) ((lambda (v.15$5533$5569) (if (null? v.15$5533$5569) (cons (cons-source (rename$5512$5535 (quote match-extract-underscore)) (cons-source p$5548 (cons-source (cons-source (rename$5512$5535 (quote match-vector-tail-two)) (cons-source v$5544 (cons-source p$5548 (cons-source n$5552 (cons-source len$5556 (cons-source sk$5560 (cons-source fk$5564 (cons-source i$5568 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (len sk fk i))) (quote (n len sk fk i))) (quote (p n len sk fk i))) (quote (v p n len sk fk i))) (quote (match-vector-tail-two v p n len sk fk i))) (cons-source i$5568 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-vector-tail-two v p n len sk fk i) i ()))) (quote (p (match-vector-tail-two v p n len sk fk i) i ()))) (quote (match-extract-underscore p (match-vector-tail-two v p n len sk fk i) i ()))) #f) #f)) (cdr v.13$5531$5565))) v.14$5532$5567)) (car v.13$5531$5565)) #f)) (cdr v.11$5529$5561))) v.12$5530$5563)) (car v.11$5529$5561)) #f)) (cdr v.9$5527$5557))) v.10$5528$5559)) (car v.9$5527$5557)) #f)) (cdr v.7$5525$5553))) v.8$5526$5555)) (car v.7$5525$5553)) #f)) (cdr v.5$5523$5549))) v.6$5524$5551)) (car v.5$5523$5549)) #f)) (cdr v.3$5521$5545))) v.4$5522$5547)) (car v.3$5521$5545)) #f)) (cdr v.1$5519$5541))) v.2$5520$5543)) (car v.1$5519$5541)) #f)) (cdr expr$5511$5534))))) (match-gen-vector-ellipsis lambda (expr$5373$5405 rename$5374$5406 compare$5375$5407) (car ((lambda (tmp$5409$5411) (if tmp$5409$5411 tmp$5409$5411 (cons (error "no expansion for" expr$5373$5405) #f))) ((lambda (v.1$5381$5412) (if (pair? v.1$5381$5412) ((lambda (v.2$5382$5414) ((lambda (v$5415) ((lambda (v.3$5383$5416) (if (pair? v.3$5383$5416) ((lambda (v.4$5384$5418) ((lambda (n$5419) ((lambda (v.5$5385$5420) (if (pair? v.5$5385$5420) ((lambda (v.6$5386$5422) ((lambda (w.7$5387$5424 pat-ls9$5389$5425 index-ls10$5390$5426) ((lambda (lp.8$5388$5427) (set! lp.8$5388$5427 (lambda (w.7$5387$5428 pat-ls9$5389$5429 index-ls10$5390$5430) (if (null? w.7$5387$5428) ((lambda (pat$5431 index$5432) ((lambda (v.16$5396$5433) (if (pair? v.16$5396$5433) ((lambda (v.17$5397$5435) ((lambda (p$5436) ((lambda (v.18$5398$5437) (if (pair? v.18$5398$5437) ((lambda (v.19$5399$5439) ((lambda (sk$5440) ((lambda (v.20$5400$5441) (if (pair? v.20$5400$5441) ((lambda (v.21$5401$5443) ((lambda (fk$5444) ((lambda (v.22$5402$5445) (if (pair? v.22$5402$5445) ((lambda (v.23$5403$5447) ((lambda (i$5448) ((lambda (v.24$5404$5449) (if (null? v.24$5404$5449) (cons (cons-source (rename$5374$5406 (quote if)) (cons-source (cons-source (rename$5374$5406 (quote vector?)) (cons-source v$5415 (quote ()) (quote (v))) (quote (vector? v))) (cons-source (cons-source (rename$5374$5406 (quote let)) (cons-source (cons-source (cons-source (rename$5374$5406 (quote len)) (cons-source (cons-source (rename$5374$5406 (quote vector-length)) (cons-source v$5415 (quote ()) (quote (v))) (quote (vector-length v))) (quote ()) (quote ((vector-length v)))) (quote (len (vector-length v)))) (quote ()) (quote ((len (vector-length v))))) (cons-source (cons-source (rename$5374$5406 (quote if)) (cons-source (cons-source (rename$5374$5406 (quote >=)) (cons-source (rename$5374$5406 (quote len)) (cons-source n$5419 (quote ()) (quote (n))) (quote (len n))) (quote (>= len n))) (cons-source (cons-source (rename$5374$5406 (quote match-vector-step)) (cons-source v$5415 (cons-source (map (lambda (pat$5451 index$5452) (cons-source pat$5451 (cons-source index$5452 (quote ()) (quote (index))) (quote (pat index)))) pat$5431 index$5432) (cons-source (cons-source (rename$5374$5406 (quote match-vector-tail)) (cons-source v$5415 (cons-source p$5436 (cons-source n$5419 (cons-source (rename$5374$5406 (quote len)) (cons-source sk$5440 (cons-source fk$5444 (quote ()) (quote (fk))) (quote (sk fk))) (quote (len sk fk))) (quote (n len sk fk))) (quote (p n len sk fk))) (quote (v p n len sk fk))) (quote (match-vector-tail v p n len sk fk))) (cons-source fk$5444 (cons-source i$5448 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-vector-tail v p n len sk fk) fk i))) (quote (((pat index) ...) (match-vector-tail v p n len sk fk) fk i))) (quote (v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i))) (quote (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i))) (cons-source fk$5444 (quote ()) (quote (fk))) (quote ((match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk))) (quote ((>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk))) (quote (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk))) (quote ()) (quote ((if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)))) (quote (((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)))) (quote (let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)))) (cons-source fk$5444 (quote ()) (quote (fk))) (quote ((let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)) fk))) (quote ((vector? v) (let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)) fk))) (quote (if (vector? v) (let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)) fk))) #f) #f)) (cdr v.22$5402$5445))) v.23$5403$5447)) (car v.22$5402$5445)) #f)) (cdr v.20$5400$5441))) v.21$5401$5443)) (car v.20$5400$5441)) #f)) (cdr v.18$5398$5437))) v.19$5399$5439)) (car v.18$5398$5437)) #f)) (cdr v.16$5396$5433))) v.17$5397$5435)) (car v.16$5396$5433)) #f)) (cdr v.5$5385$5420))) (reverse pat-ls9$5389$5429) (reverse index-ls10$5390$5430)) (if (pair? w.7$5387$5428) ((lambda (v.11$5391$5454) (if (pair? v.11$5391$5454) ((lambda (v.12$5392$5456) ((lambda (pat$5457) ((lambda (v.13$5393$5458) (if (pair? v.13$5393$5458) ((lambda (v.14$5394$5460) ((lambda (index$5461) ((lambda (v.15$5395$5462) (if (null? v.15$5395$5462) (lp.8$5388$5427 (cdr w.7$5387$5428) (cons pat$5457 pat-ls9$5389$5429) (cons index$5461 index-ls10$5390$5430)) #f)) (cdr v.13$5393$5458))) v.14$5394$5460)) (car v.13$5393$5458)) #f)) (cdr v.11$5391$5454))) v.12$5392$5456)) (car v.11$5391$5454)) #f)) (car w.7$5387$5428)) #f)))) (lp.8$5388$5427 w.7$5387$5424 pat-ls9$5389$5425 index-ls10$5390$5426)) #f)) v.6$5386$5422 (quote ()) (quote ()))) (car v.5$5385$5420)) #f)) (cdr v.3$5383$5416))) v.4$5384$5418)) (car v.3$5383$5416)) #f)) (cdr v.1$5381$5412))) v.2$5382$5414)) (car v.1$5381$5412)) #f)) (cdr expr$5373$5405))))) (match-vector-step lambda (expr$5219$5255 rename$5220$5256 compare$5221$5257) (car ((lambda (tmp$5259$5261) (if tmp$5259$5261 tmp$5259$5261 ((lambda (tmp$5263$5265) (if tmp$5263$5265 tmp$5263$5265 (cons (error "no expansion for" expr$5219$5255) #f))) ((lambda (v.12$5238$5266) (if (pair? v.12$5238$5266) ((lambda (v.13$5239$5268) ((lambda (v$5269) ((lambda (v.14$5240$5270) (if (pair? v.14$5240$5270) ((lambda (v.15$5241$5272) (if (pair? v.15$5241$5272) ((lambda (v.16$5242$5274) (if (pair? v.16$5242$5274) ((lambda (v.17$5243$5276) ((lambda (pat$5277) ((lambda (v.18$5244$5278) (if (pair? v.18$5244$5278) ((lambda (v.19$5245$5280) ((lambda (index$5281) ((lambda (v.20$5246$5282) (if (null? v.20$5246$5282) ((lambda (v.21$5247$5284) ((lambda (rest$5285) ((lambda (v.22$5248$5286) (if (pair? v.22$5248$5286) ((lambda (v.23$5249$5288) ((lambda (sk$5289) ((lambda (v.24$5250$5290) (if (pair? v.24$5250$5290) ((lambda (v.25$5251$5292) ((lambda (fk$5293) ((lambda (v.26$5252$5294) (if (pair? v.26$5252$5294) ((lambda (v.27$5253$5296) ((lambda (i$5297) ((lambda (v.28$5254$5298) (if (null? v.28$5254$5298) (cons (cons-source (rename$5220$5256 (quote let)) (cons-source (cons-source (cons-source (rename$5220$5256 (quote w)) (cons-source (cons-source (rename$5220$5256 (quote vector-ref)) (cons-source v$5269 (cons-source index$5281 (quote ()) (quote (index))) (quote (v index))) (quote (vector-ref v index))) (quote ()) (quote ((vector-ref v index)))) (quote (w (vector-ref v index)))) (quote ()) (quote ((w (vector-ref v index))))) (cons-source (cons-source (rename$5220$5256 (quote match-one)) (cons-source (rename$5220$5256 (quote w)) (cons-source pat$5277 (cons-source (cons-source (cons-source (rename$5220$5256 (quote vector-ref)) (cons-source v$5269 (cons-source index$5281 (quote ()) (quote (index))) (quote (v index))) (quote (vector-ref v index))) (cons-source (cons-source (rename$5220$5256 (quote vector-set!)) (cons-source v$5269 (cons-source index$5281 (quote ()) (quote (index))) (quote (v index))) (quote (vector-set! v index))) (quote ()) (quote ((vector-set! v index)))) (quote ((vector-ref v index) (vector-set! v index)))) (cons-source (cons-source (rename$5220$5256 (quote match-vector-step)) (cons-source v$5269 (cons-source rest$5285 (cons-source sk$5289 (cons-source fk$5293 (quote ()) (quote (fk))) (quote (sk fk))) (quote (rest sk fk))) (quote (v rest sk fk))) (quote (match-vector-step v rest sk fk))) (cons-source fk$5293 (cons-source i$5297 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-vector-step v rest sk fk) fk i))) (quote (((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote (pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote (w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote (match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote ()) (quote ((match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i)))) (quote (((w (vector-ref v index))) (match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i)))) (quote (let ((w (vector-ref v index))) (match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i)))) #f) #f)) (cdr v.26$5252$5294))) v.27$5253$5296)) (car v.26$5252$5294)) #f)) (cdr v.24$5250$5290))) v.25$5251$5292)) (car v.24$5250$5290)) #f)) (cdr v.22$5248$5286))) v.23$5249$5288)) (car v.22$5248$5286)) #f)) (cdr v.14$5240$5270))) v.21$5247$5284)) (cdr v.15$5241$5272)) #f)) (cdr v.18$5244$5278))) v.19$5245$5280)) (car v.18$5244$5278)) #f)) (cdr v.16$5242$5274))) v.17$5243$5276)) (car v.16$5242$5274)) #f)) (car v.15$5241$5272)) #f)) (car v.14$5240$5270)) #f)) (cdr v.12$5238$5266))) v.13$5239$5268)) (car v.12$5238$5266)) #f)) (cdr expr$5219$5255))))) ((lambda (v.1$5227$5300) (if (pair? v.1$5227$5300) ((lambda (v.2$5228$5302) ((lambda (v$5303) ((lambda (v.3$5229$5304) (if (pair? v.3$5229$5304) ((lambda (v.4$5230$5306) (if (null? v.4$5230$5306) ((lambda (v.5$5231$5308) (if (pair? v.5$5231$5308) ((lambda (v.6$5232$5310) (if (list? v.6$5232$5310) ((lambda (sk$5312) ((lambda (v.7$5233$5313) (if (pair? v.7$5233$5313) ((lambda (v.8$5234$5315) ((lambda (fk$5316) ((lambda (v.9$5235$5317) (if (pair? v.9$5235$5317) ((lambda (v.10$5236$5319) ((lambda (i$5320) ((lambda (v.11$5237$5321) (if (null? v.11$5237$5321) (cons (append (map (lambda (sk$5323) sk$5323) sk$5312) (cons-source i$5320 (quote ()) (quote (i)))) #f) #f)) (cdr v.9$5235$5317))) v.10$5236$5319)) (car v.9$5235$5317)) #f)) (cdr v.7$5233$5313))) v.8$5234$5315)) (car v.7$5233$5313)) #f)) (cdr v.5$5231$5308))) v.6$5232$5310) #f)) (car v.5$5231$5308)) #f)) (cdr v.3$5229$5304)) #f)) (car v.3$5229$5304)) #f)) (cdr v.1$5227$5300))) v.2$5228$5302)) (car v.1$5227$5300)) #f)) (cdr expr$5219$5255))))) (match-vector-two lambda (expr$5024$5067 rename$5025$5068 compare$5026$5069) (car ((lambda (tmp$5071$5073) (if tmp$5071$5073 tmp$5071$5073 ((lambda (tmp$5075$5077) (if tmp$5075$5077 tmp$5075$5077 (cons (error "no expansion for" expr$5024$5067) #f))) ((lambda (v.25$5056$5078) (if (pair? v.25$5056$5078) ((lambda (v.26$5057$5080) ((lambda (v$5081) ((lambda (v.27$5058$5082) (if (pair? v.27$5058$5082) ((lambda (v.28$5059$5084) ((lambda (n$5085) ((lambda (v.29$5060$5086) (if (pair? v.29$5060$5086) ((lambda (v.30$5061$5088) (if (list? v.30$5061$5088) ((lambda (pats$5090) ((lambda (v.31$5062$5091) (if (pair? v.31$5062$5091) ((lambda (v.32$5063$5093) (if (pair? v.32$5063$5093) ((lambda (v.33$5064$5095) ((lambda (p$5096) ((lambda (v.34$5065$5097) ((lambda (q$5098) ((lambda (v.35$5066$5099) ((lambda (x$5100) (cons (cons-source (rename$5025$5068 (quote match-vector)) (cons-source v$5081 (cons-source (cons-source (rename$5025$5068 (quote +)) (cons-source n$5085 (cons-source 1 (quote ()) (quote (1))) (quote (n 1))) (quote (+ n 1))) (cons-source (append (map (lambda (pats$5101) pats$5101) pats$5090) (cons-source (cons-source p$5096 (cons-source n$5085 (quote ()) (quote (n))) (quote (p n))) (quote ()) (quote ((p n))))) (cons-source q$5098 x$5100 (quote (q . x))) (quote ((pats ... (p n)) q . x))) (quote ((+ n 1) (pats ... (p n)) q . x))) (quote (v (+ n 1) (pats ... (p n)) q . x))) (quote (match-vector v (+ n 1) (pats ... (p n)) q . x))) #f)) v.35$5066$5099)) (cdr v.31$5062$5091))) v.34$5065$5097)) (cdr v.32$5063$5093))) v.33$5064$5095)) (car v.32$5063$5093)) #f)) (car v.31$5062$5091)) #f)) (cdr v.29$5060$5086))) v.30$5061$5088) #f)) (car v.29$5060$5086)) #f)) (cdr v.27$5058$5082))) v.28$5059$5084)) (car v.27$5058$5082)) #f)) (cdr v.25$5056$5078))) v.26$5057$5080)) (car v.25$5056$5078)) #f)) (cdr expr$5024$5067))))) ((lambda (v.1$5032$5102) (if (pair? v.1$5032$5102) ((lambda (v.2$5033$5104) ((lambda (v$5105) ((lambda (v.3$5034$5106) (if (pair? v.3$5034$5106) ((lambda (v.4$5035$5108) ((lambda (n$5109) ((lambda (v.5$5036$5110) (if (pair? v.5$5036$5110) ((lambda (v.6$5037$5112) ((lambda (w.7$5038$5114 pat-ls9$5040$5115 index-ls10$5041$5116) ((lambda (lp.8$5039$5117) (set! lp.8$5039$5117 (lambda (w.7$5038$5118 pat-ls9$5040$5119 index-ls10$5041$5120) (if (null? w.7$5038$5118) ((lambda (pat$5121 index$5122) ((lambda (v.16$5047$5123) (if (pair? v.16$5047$5123) ((lambda (v.17$5048$5125) (if (null? v.17$5048$5125) ((lambda (v.18$5049$5127) (if (pair? v.18$5049$5127) ((lambda (v.19$5050$5129) ((lambda (sk$5130) ((lambda (v.20$5051$5131) (if (pair? v.20$5051$5131) ((lambda (v.21$5052$5133) ((lambda (fk$5134) ((lambda (v.22$5053$5135) (if (pair? v.22$5053$5135) ((lambda (v.23$5054$5137) ((lambda (i$5138) ((lambda (v.24$5055$5139) (if (null? v.24$5055$5139) (cons (cons-source (rename$5025$5068 (quote if)) (cons-source (cons-source (rename$5025$5068 (quote vector?)) (cons-source v$5105 (quote ()) (quote (v))) (quote (vector? v))) (cons-source (cons-source (rename$5025$5068 (quote let)) (cons-source (cons-source (cons-source (rename$5025$5068 (quote len)) (cons-source (cons-source (rename$5025$5068 (quote vector-length)) (cons-source v$5105 (quote ()) (quote (v))) (quote (vector-length v))) (quote ()) (quote ((vector-length v)))) (quote (len (vector-length v)))) (quote ()) (quote ((len (vector-length v))))) (cons-source (cons-source (rename$5025$5068 (quote if)) (cons-source (cons-source (rename$5025$5068 (quote =)) (cons-source (rename$5025$5068 (quote len)) (cons-source n$5109 (quote ()) (quote (n))) (quote (len n))) (quote (= len n))) (cons-source (cons-source (rename$5025$5068 (quote match-vector-step)) (cons-source v$5105 (cons-source (map (lambda (pat$5141 index$5142) (cons-source pat$5141 (cons-source index$5142 (quote ()) (quote (index))) (quote (pat index)))) pat$5121 index$5122) (cons-source sk$5130 (cons-source fk$5134 (cons-source i$5138 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (((pat index) ...) sk fk i))) (quote (v ((pat index) ...) sk fk i))) (quote (match-vector-step v ((pat index) ...) sk fk i))) (cons-source fk$5134 (quote ()) (quote (fk))) (quote ((match-vector-step v ((pat index) ...) sk fk i) fk))) (quote ((= len n) (match-vector-step v ((pat index) ...) sk fk i) fk))) (quote (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk))) (quote ()) (quote ((if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)))) (quote (((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)))) (quote (let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)))) (cons-source fk$5134 (quote ()) (quote (fk))) (quote ((let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)) fk))) (quote ((vector? v) (let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)) fk))) (quote (if (vector? v) (let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)) fk))) #f) #f)) (cdr v.22$5053$5135))) v.23$5054$5137)) (car v.22$5053$5135)) #f)) (cdr v.20$5051$5131))) v.21$5052$5133)) (car v.20$5051$5131)) #f)) (cdr v.18$5049$5127))) v.19$5050$5129)) (car v.18$5049$5127)) #f)) (cdr v.16$5047$5123)) #f)) (car v.16$5047$5123)) #f)) (cdr v.5$5036$5110))) (reverse pat-ls9$5040$5119) (reverse index-ls10$5041$5120)) (if (pair? w.7$5038$5118) ((lambda (v.11$5042$5144) (if (pair? v.11$5042$5144) ((lambda (v.12$5043$5146) ((lambda (pat$5147) ((lambda (v.13$5044$5148) (if (pair? v.13$5044$5148) ((lambda (v.14$5045$5150) ((lambda (index$5151) ((lambda (v.15$5046$5152) (if (null? v.15$5046$5152) (lp.8$5039$5117 (cdr w.7$5038$5118) (cons pat$5147 pat-ls9$5040$5119) (cons index$5151 index-ls10$5041$5120)) #f)) (cdr v.13$5044$5148))) v.14$5045$5150)) (car v.13$5044$5148)) #f)) (cdr v.11$5042$5144))) v.12$5043$5146)) (car v.11$5042$5144)) #f)) (car w.7$5038$5118)) #f)))) (lp.8$5039$5117 w.7$5038$5114 pat-ls9$5040$5115 index-ls10$5041$5116)) #f)) v.6$5037$5112 (quote ()) (quote ()))) (car v.5$5036$5110)) #f)) (cdr v.3$5034$5106))) v.4$5035$5108)) (car v.3$5034$5106)) #f)) (cdr v.1$5032$5102))) v.2$5033$5104)) (car v.1$5032$5102)) #f)) (cdr expr$5024$5067))))) (match-vector lambda (expr$4845$4886 rename$4846$4887 compare$4847$4888) (car ((lambda (tmp$4890$4892) (if tmp$4890$4892 tmp$4890$4892 ((lambda (tmp$4894$4896) (if tmp$4894$4896 tmp$4894$4896 ((lambda (tmp$4898$4900) (if tmp$4898$4900 tmp$4898$4900 (cons (error "no expansion for" expr$4845$4886) #f))) ((lambda (v.33$4885$4901) ((lambda (x$4902) (cons (cons-source (rename$4846$4887 (quote match-vector-two)) x$4902 (quote (match-vector-two . x))) #f)) v.33$4885$4901)) (cdr expr$4845$4886))))) ((lambda (v.14$4866$4903) (if (pair? v.14$4866$4903) ((lambda (v.15$4867$4905) ((lambda (v$4906) ((lambda (v.16$4868$4907) (if (pair? v.16$4868$4907) ((lambda (v.17$4869$4909) ((lambda (n$4910) ((lambda (v.18$4870$4911) (if (pair? v.18$4870$4911) ((lambda (v.19$4871$4913) ((lambda (pats$4914) ((lambda (v.20$4872$4915) (if (pair? v.20$4872$4915) ((lambda (v.21$4873$4917) (if (pair? v.21$4873$4917) ((lambda (v.22$4874$4919) ((lambda (p$4920) ((lambda (v.23$4875$4921) (if (pair? v.23$4875$4921) ((lambda (v.24$4876$4923) (if (compare$4847$4888 v.24$4876$4923 (rename$4846$4887 (quote ___))) ((lambda (v.25$4877$4925) (if (null? v.25$4877$4925) ((lambda (v.26$4878$4927) (if (pair? v.26$4878$4927) ((lambda (v.27$4879$4929) ((lambda (sk$4930) ((lambda (v.28$4880$4931) (if (pair? v.28$4880$4931) ((lambda (v.29$4881$4933) ((lambda (fk$4934) ((lambda (v.30$4882$4935) (if (pair? v.30$4882$4935) ((lambda (v.31$4883$4937) ((lambda (i$4938) ((lambda (v.32$4884$4939) (if (null? v.32$4884$4939) (cons (cons-source (rename$4846$4887 (quote match-gen-vector-ellipsis)) (cons-source v$4906 (cons-source n$4910 (cons-source pats$4914 (cons-source p$4920 (cons-source sk$4930 (cons-source fk$4934 (cons-source i$4938 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (p sk fk i))) (quote (pats p sk fk i))) (quote (n pats p sk fk i))) (quote (v n pats p sk fk i))) (quote (match-gen-vector-ellipsis v n pats p sk fk i))) #f) #f)) (cdr v.30$4882$4935))) v.31$4883$4937)) (car v.30$4882$4935)) #f)) (cdr v.28$4880$4931))) v.29$4881$4933)) (car v.28$4880$4931)) #f)) (cdr v.26$4878$4927))) v.27$4879$4929)) (car v.26$4878$4927)) #f)) (cdr v.20$4872$4915)) #f)) (cdr v.23$4875$4921)) #f)) (car v.23$4875$4921)) #f)) (cdr v.21$4873$4917))) v.22$4874$4919)) (car v.21$4873$4917)) #f)) (car v.20$4872$4915)) #f)) (cdr v.18$4870$4911))) v.19$4871$4913)) (car v.18$4870$4911)) #f)) (cdr v.16$4868$4907))) v.17$4869$4909)) (car v.16$4868$4907)) #f)) (cdr v.14$4866$4903))) v.15$4867$4905)) (car v.14$4866$4903)) #f)) (cdr expr$4845$4886))))) ((lambda (v.1$4853$4941) (if (pair? v.1$4853$4941) ((lambda (v.2$4854$4943) ((lambda (v$4944) ((lambda (v.3$4855$4945) (if (pair? v.3$4855$4945) ((lambda (v.4$4856$4947) ((lambda (n$4948) ((lambda (v.5$4857$4949) (if (pair? v.5$4857$4949) ((lambda (v.6$4858$4951) ((lambda (pats$4952) ((lambda (v.7$4859$4953) (if (pair? v.7$4859$4953) ((lambda (v.8$4860$4955) (if (pair? v.8$4860$4955) ((lambda (v.9$4861$4957) ((lambda (p$4958) ((lambda (v.10$4862$4959) (if (pair? v.10$4862$4959) ((lambda (v.11$4863$4961) ((lambda (q$4962) ((lambda (v.12$4864$4963) (if (null? v.12$4864$4963) ((lambda (v.13$4865$4965) ((lambda (x$4966) (cons (cons-source (rename$4846$4887 (quote match-check-ellipsis)) (cons-source q$4962 (cons-source (cons-source (rename$4846$4887 (quote match-gen-vector-ellipsis)) (cons-source v$4944 (cons-source n$4948 (cons-source pats$4952 (cons-source p$4958 x$4966 (quote (p . x))) (quote (pats p . x))) (quote (n pats p . x))) (quote (v n pats p . x))) (quote (match-gen-vector-ellipsis v n pats p . x))) (cons-source (cons-source (rename$4846$4887 (quote match-vector-two)) (cons-source v$4944 (cons-source n$4948 (cons-source pats$4952 (cons-source (cons-source p$4958 (cons-source q$4962 (quote ()) (quote (q))) (quote (p q))) x$4966 (quote ((p q) . x))) (quote (pats (p q) . x))) (quote (n pats (p q) . x))) (quote (v n pats (p q) . x))) (quote (match-vector-two v n pats (p q) . x))) (quote ()) (quote ((match-vector-two v n pats (p q) . x)))) (quote ((match-gen-vector-ellipsis v n pats p . x) (match-vector-two v n pats (p q) . x)))) (quote (q (match-gen-vector-ellipsis v n pats p . x) (match-vector-two v n pats (p q) . x)))) (quote (match-check-ellipsis q (match-gen-vector-ellipsis v n pats p . x) (match-vector-two v n pats (p q) . x)))) #f)) v.13$4865$4965)) (cdr v.7$4859$4953)) #f)) (cdr v.10$4862$4959))) v.11$4863$4961)) (car v.10$4862$4959)) #f)) (cdr v.8$4860$4955))) v.9$4861$4957)) (car v.8$4860$4955)) #f)) (car v.7$4859$4953)) #f)) (cdr v.5$4857$4949))) v.6$4858$4951)) (car v.5$4857$4949)) #f)) (cdr v.3$4855$4945))) v.4$4856$4947)) (car v.3$4855$4945)) #f)) (cdr v.1$4853$4941))) v.2$4854$4943)) (car v.1$4853$4941)) #f)) (cdr expr$4845$4886))))) (match-gen-search lambda (expr$4692$4726 rename$4693$4727 compare$4694$4728) (car ((lambda (tmp$4730$4732) (if tmp$4730$4732 tmp$4730$4732 (cons (error "no expansion for" expr$4692$4726) #f))) ((lambda (v.1$4700$4733) (if (pair? v.1$4700$4733) ((lambda (v.2$4701$4735) ((lambda (v$4736) ((lambda (v.3$4702$4737) (if (pair? v.3$4702$4737) ((lambda (v.4$4703$4739) ((lambda (p$4740) ((lambda (v.5$4704$4741) (if (pair? v.5$4704$4741) ((lambda (v.6$4705$4743) ((lambda (q$4744) ((lambda (v.7$4706$4745) (if (pair? v.7$4706$4745) ((lambda (v.8$4707$4747) ((lambda (g+s$4748) ((lambda (v.9$4708$4749) (if (pair? v.9$4708$4749) ((lambda (v.10$4709$4751) ((lambda (sk$4752) ((lambda (v.11$4710$4753) (if (pair? v.11$4710$4753) ((lambda (v.12$4711$4755) ((lambda (fk$4756) ((lambda (v.13$4712$4757) (if (pair? v.13$4712$4757) ((lambda (v.14$4713$4759) ((lambda (i$4760) ((lambda (v.15$4714$4761) (if (pair? v.15$4714$4761) ((lambda (v.16$4715$4763) ((lambda (w.17$4716$4765 id-ls19$4718$4766 id-ls-ls20$4719$4767) ((lambda (lp.18$4717$4768) (set! lp.18$4717$4768 (lambda (w.17$4716$4769 id-ls19$4718$4770 id-ls-ls20$4719$4771) (if (null? w.17$4716$4769) ((lambda (id$4772 id-ls$4773) ((lambda (v.26$4725$4774) (if (null? v.26$4725$4774) (cons (cons-source (rename$4693$4727 (quote letrec)) (cons-source (cons-source (cons-source (rename$4693$4727 (quote try)) (cons-source (cons-source (rename$4693$4727 (quote lambda)) (cons-source (cons-source (rename$4693$4727 (quote w)) (cons-source (rename$4693$4727 (quote fail)) id-ls$4773 (quote (fail id-ls ...))) (quote (w fail id-ls ...))) (cons-source (cons-source (rename$4693$4727 (quote match-one)) (cons-source (rename$4693$4727 (quote w)) (cons-source q$4744 (cons-source g+s$4748 (cons-source (cons-source (rename$4693$4727 (quote match-tuck-ids)) (cons-source (cons-source (rename$4693$4727 (quote let)) (cons-source (map (lambda (id$4776 id-ls$4777) (cons-source id$4776 (cons-source (cons-source (rename$4693$4727 (quote reverse)) (cons-source id-ls$4777 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$4772 id-ls$4773) (cons-source sk$4752 (quote ()) (quote (sk))) (quote (((id (reverse id-ls)) ...) sk))) (quote (let ((id (reverse id-ls)) ...) sk))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) sk)))) (quote (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)))) (cons-source (cons-source (rename$4693$4727 (quote next)) (cons-source (rename$4693$4727 (quote w)) (cons-source (rename$4693$4727 (quote fail)) id-ls$4773 (quote (fail id-ls ...))) (quote (w fail id-ls ...))) (quote (next w fail id-ls ...))) (cons-source i$4760 (quote ()) (quote (i))) (quote ((next w fail id-ls ...) i))) (quote ((match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote ()) (quote ((match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i)))) (quote ((w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i)))) (quote (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i)))) (quote ()) (quote ((lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))))) (quote (try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))))) (cons-source (cons-source (rename$4693$4727 (quote next)) (cons-source (cons-source (rename$4693$4727 (quote lambda)) (cons-source (cons-source (rename$4693$4727 (quote w)) (cons-source (rename$4693$4727 (quote fail)) id-ls$4773 (quote (fail id-ls ...))) (quote (w fail id-ls ...))) (cons-source (cons-source (rename$4693$4727 (quote if)) (cons-source (cons-source (rename$4693$4727 (quote not)) (cons-source (cons-source (rename$4693$4727 (quote pair?)) (cons-source (rename$4693$4727 (quote w)) (quote ()) (quote (w))) (quote (pair? w))) (quote ()) (quote ((pair? w)))) (quote (not (pair? w)))) (cons-source (cons-source (rename$4693$4727 (quote fail)) (quote ()) (quote (fail))) (cons-source (cons-source (rename$4693$4727 (quote let)) (cons-source (cons-source (cons-source (rename$4693$4727 (quote u)) (cons-source (cons-source (rename$4693$4727 (quote car)) (cons-source (rename$4693$4727 (quote w)) (quote ()) (quote (w))) (quote (car w))) (quote ()) (quote ((car w)))) (quote (u (car w)))) (quote ()) (quote ((u (car w))))) (cons-source (cons-source (rename$4693$4727 (quote match-one)) (cons-source (rename$4693$4727 (quote u)) (cons-source p$4740 (cons-source (cons-source (cons-source (rename$4693$4727 (quote car)) (cons-source (rename$4693$4727 (quote w)) (quote ()) (quote (w))) (quote (car w))) (cons-source (cons-source (rename$4693$4727 (quote set-car!)) (cons-source (rename$4693$4727 (quote w)) (quote ()) (quote (w))) (quote (set-car! w))) (quote ()) (quote ((set-car! w)))) (quote ((car w) (set-car! w)))) (cons-source (cons-source (rename$4693$4727 (quote match-drop-ids)) (cons-source (cons-source (rename$4693$4727 (quote let)) (cons-source (map (lambda (id$4778 id-ls$4779) (cons-source id-ls$4779 (cons-source (cons-source (rename$4693$4727 (quote cons)) (cons-source id$4778 (cons-source id-ls$4779 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls))) (quote ()) (quote ((cons id id-ls)))) (quote (id-ls (cons id id-ls))))) id$4772 id-ls$4773) (cons-source (cons-source (rename$4693$4727 (quote let)) (cons-source (rename$4693$4727 (quote lp)) (cons-source (cons-source (cons-source (rename$4693$4727 (quote ls)) (cons-source (cons-source (rename$4693$4727 (quote cdr)) (cons-source (rename$4693$4727 (quote w)) (quote ()) (quote (w))) (quote (cdr w))) (quote ()) (quote ((cdr w)))) (quote (ls (cdr w)))) (quote ()) (quote ((ls (cdr w))))) (cons-source (cons-source (rename$4693$4727 (quote if)) (cons-source (cons-source (rename$4693$4727 (quote pair?)) (cons-source (rename$4693$4727 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$4693$4727 (quote try)) (cons-source (cons-source (rename$4693$4727 (quote car)) (cons-source (rename$4693$4727 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$4693$4727 (quote lambda)) (cons-source (quote ()) (cons-source (cons-source (rename$4693$4727 (quote lp)) (cons-source (cons-source (rename$4693$4727 (quote cdr)) (cons-source (rename$4693$4727 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (quote ()) (quote ((cdr ls)))) (quote (lp (cdr ls)))) (quote ()) (quote ((lp (cdr ls))))) (quote (() (lp (cdr ls))))) (quote (lambda () (lp (cdr ls))))) id-ls$4773 (quote ((lambda () (lp (cdr ls))) id-ls ...))) (quote ((car ls) (lambda () (lp (cdr ls))) id-ls ...))) (quote (try (car ls) (lambda () (lp (cdr ls))) id-ls ...))) (cons-source (cons-source (rename$4693$4727 (quote fail)) (quote ()) (quote (fail))) (quote ()) (quote ((fail)))) (quote ((try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))) (quote ((pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))) (quote (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))) (quote ()) (quote ((if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote (((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote (lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote ()) (quote ((let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))))) (quote (((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))))) (quote (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))))) (quote ()) (quote ((let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))))) (quote (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))))) (cons-source (cons-source (rename$4693$4727 (quote fail)) (quote ()) (quote (fail))) (cons-source i$4760 (quote ()) (quote (i))) (quote ((fail) i))) (quote ((match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote ()) (quote ((match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))) (quote (((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))) (quote (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))) (quote ()) (quote ((let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote ((fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote ((not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote ()) (quote ((if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (quote ((w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (quote (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (quote ()) (quote ((lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))))) (quote (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))))) (quote ()) (quote ((next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))))) (quote ((try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))))) (cons-source (cons-source (rename$4693$4727 (quote let)) (cons-source (map (lambda (id-ls$4780) (cons-source id-ls$4780 (cons-source (cons-source (rename$4693$4727 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$4773) (cons-source (cons-source (rename$4693$4727 (quote try)) (cons-source v$4736 (cons-source (cons-source (rename$4693$4727 (quote lambda)) (cons-source (quote ()) (cons-source fk$4756 (quote ()) (quote (fk))) (quote (() fk))) (quote (lambda () fk))) id-ls$4773 (quote ((lambda () fk) id-ls ...))) (quote (v (lambda () fk) id-ls ...))) (quote (try v (lambda () fk) id-ls ...))) (quote ()) (quote ((try v (lambda () fk) id-ls ...)))) (quote (((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...)))) (quote (let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...)))) (quote ()) (quote ((let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...))))) (quote (((try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...))))) (quote (letrec ((try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...))))) #f) #f)) (cdr v.15$4714$4761))) (reverse id-ls19$4718$4770) (reverse id-ls-ls20$4719$4771)) (if (pair? w.17$4716$4769) ((lambda (v.21$4720$4782) (if (pair? v.21$4720$4782) ((lambda (v.22$4721$4784) ((lambda (id$4785) ((lambda (v.23$4722$4786) (if (pair? v.23$4722$4786) ((lambda (v.24$4723$4788) ((lambda (id-ls$4789) ((lambda (v.25$4724$4790) (if (null? v.25$4724$4790) (lp.18$4717$4768 (cdr w.17$4716$4769) (cons id$4785 id-ls19$4718$4770) (cons id-ls$4789 id-ls-ls20$4719$4771)) #f)) (cdr v.23$4722$4786))) v.24$4723$4788)) (car v.23$4722$4786)) #f)) (cdr v.21$4720$4782))) v.22$4721$4784)) (car v.21$4720$4782)) #f)) (car w.17$4716$4769)) #f)))) (lp.18$4717$4768 w.17$4716$4765 id-ls19$4718$4766 id-ls-ls20$4719$4767)) #f)) v.16$4715$4763 (quote ()) (quote ()))) (car v.15$4714$4761)) #f)) (cdr v.13$4712$4757))) v.14$4713$4759)) (car v.13$4712$4757)) #f)) (cdr v.11$4710$4753))) v.12$4711$4755)) (car v.11$4710$4753)) #f)) (cdr v.9$4708$4749))) v.10$4709$4751)) (car v.9$4708$4749)) #f)) (cdr v.7$4706$4745))) v.8$4707$4747)) (car v.7$4706$4745)) #f)) (cdr v.5$4704$4741))) v.6$4705$4743)) (car v.5$4704$4741)) #f)) (cdr v.3$4702$4737))) v.4$4703$4739)) (car v.3$4702$4737)) #f)) (cdr v.1$4700$4733))) v.2$4701$4735)) (car v.1$4700$4733)) #f)) (cdr expr$4692$4726))))) (match-verify-no-ellipsis lambda (expr$4585$4610 rename$4586$4611 compare$4587$4612) (car ((lambda (tmp$4614$4616) (if tmp$4614$4616 tmp$4614$4616 ((lambda (tmp$4618$4620) (if tmp$4618$4620 tmp$4618$4620 ((lambda (tmp$4622$4624) (if tmp$4622$4624 tmp$4622$4624 (cons (error "no expansion for" expr$4585$4610) #f))) ((lambda (v.13$4605$4625) (if (pair? v.13$4605$4625) ((lambda (v.14$4606$4627) ((lambda (x$4628) ((lambda (v.15$4607$4629) (if (pair? v.15$4607$4629) ((lambda (v.16$4608$4631) ((lambda (sk$4632) ((lambda (v.17$4609$4633) (if (null? v.17$4609$4633) (cons (cons-source (rename$4586$4611 (quote match-syntax-error)) (cons-source "dotted tail not allowed after ellipsis" (cons-source x$4628 (quote ()) (quote (x))) (quote ("dotted tail not allowed after ellipsis" x))) (quote (match-syntax-error "dotted tail not allowed after ellipsis" x))) #f) #f)) (cdr v.15$4607$4629))) v.16$4608$4631)) (car v.15$4607$4629)) #f)) (cdr v.13$4605$4625))) v.14$4606$4627)) (car v.13$4605$4625)) #f)) (cdr expr$4585$4610))))) ((lambda (v.8$4600$4635) (if (pair? v.8$4600$4635) ((lambda (v.9$4601$4637) (if (null? v.9$4601$4637) ((lambda (v.10$4602$4639) (if (pair? v.10$4602$4639) ((lambda (v.11$4603$4641) ((lambda (sk$4642) ((lambda (v.12$4604$4643) (if (null? v.12$4604$4643) (cons sk$4642 #f) #f)) (cdr v.10$4602$4639))) v.11$4603$4641)) (car v.10$4602$4639)) #f)) (cdr v.8$4600$4635)) #f)) (car v.8$4600$4635)) #f)) (cdr expr$4585$4610))))) ((lambda (v.1$4593$4645) (if (pair? v.1$4593$4645) ((lambda (v.2$4594$4647) (if (pair? v.2$4594$4647) ((lambda (v.3$4595$4649) ((lambda (x$4650) ((lambda (v.4$4596$4651) ((lambda (y$4652) ((lambda (v.5$4597$4653) (if (pair? v.5$4597$4653) ((lambda (v.6$4598$4655) ((lambda (sk$4656) ((lambda (v.7$4599$4657) (if (null? v.7$4599$4657) (cons (cons-source (rename$4586$4611 (quote match-check-ellipsis)) (cons-source x$4650 (cons-source (cons-source (rename$4586$4611 (quote match-syntax-error)) (cons-source "multiple ellipsis patterns not allowed at same level" (quote ()) (quote ("multiple ellipsis patterns not allowed at same level"))) (quote (match-syntax-error "multiple ellipsis patterns not allowed at same level"))) (cons-source (cons-source (rename$4586$4611 (quote match-verify-no-ellipsis)) (cons-source y$4652 (cons-source sk$4656 (quote ()) (quote (sk))) (quote (y sk))) (quote (match-verify-no-ellipsis y sk))) (quote ()) (quote ((match-verify-no-ellipsis y sk)))) (quote ((match-syntax-error "multiple ellipsis patterns not allowed at same level") (match-verify-no-ellipsis y sk)))) (quote (x (match-syntax-error "multiple ellipsis patterns not allowed at same level") (match-verify-no-ellipsis y sk)))) (quote (match-check-ellipsis x (match-syntax-error "multiple ellipsis patterns not allowed at same level") (match-verify-no-ellipsis y sk)))) #f) #f)) (cdr v.5$4597$4653))) v.6$4598$4655)) (car v.5$4597$4653)) #f)) (cdr v.1$4593$4645))) v.4$4596$4651)) (cdr v.2$4594$4647))) v.3$4595$4649)) (car v.2$4594$4647)) #f)) (car v.1$4593$4645)) #f)) (cdr expr$4585$4610))))) (match-gen-ellipsis/range lambda (expr$4410$4448 rename$4411$4449 compare$4412$4450) (car ((lambda (tmp$4452$4454) (if tmp$4452$4454 tmp$4452$4454 (cons (error "no expansion for" expr$4410$4448) #f))) ((lambda (v.1$4418$4455) (if (pair? v.1$4418$4455) ((lambda (v.2$4419$4457) ((lambda (%lo$4458) ((lambda (v.3$4420$4459) (if (pair? v.3$4420$4459) ((lambda (v.4$4421$4461) ((lambda (%hi$4462) ((lambda (v.5$4422$4463) (if (pair? v.5$4422$4463) ((lambda (v.6$4423$4465) ((lambda (v$4466) ((lambda (v.7$4424$4467) (if (pair? v.7$4424$4467) ((lambda (v.8$4425$4469) ((lambda (p$4470) ((lambda (v.9$4426$4471) (if (pair? v.9$4426$4471) ((lambda (v.10$4427$4473) ((lambda (r$4474) ((lambda (v.11$4428$4475) (if (pair? v.11$4428$4475) ((lambda (v.12$4429$4477) ((lambda (g+s$4478) ((lambda (v.13$4430$4479) (if (pair? v.13$4430$4479) ((lambda (v.14$4431$4481) (if (list? v.14$4431$4481) ((lambda (sk$4483) ((lambda (v.15$4432$4484) (if (pair? v.15$4432$4484) ((lambda (v.16$4433$4486) ((lambda (fk$4487) ((lambda (v.17$4434$4488) (if (pair? v.17$4434$4488) ((lambda (v.18$4435$4490) (if (list? v.18$4435$4490) ((lambda (i$4492) ((lambda (v.19$4436$4493) (if (pair? v.19$4436$4493) ((lambda (v.20$4437$4495) ((lambda (w.21$4438$4497 id-ls23$4440$4498 id-ls-ls24$4441$4499) ((lambda (lp.22$4439$4500) (set! lp.22$4439$4500 (lambda (w.21$4438$4501 id-ls23$4440$4502 id-ls-ls24$4441$4503) (if (null? w.21$4438$4501) ((lambda (id$4504 id-ls$4505) ((lambda (v.30$4447$4506) (if (null? v.30$4447$4506) (cons (cons-source (rename$4411$4449 (quote match-verify-no-ellipsis)) (cons-source r$4474 (cons-source (cons-source (rename$4411$4449 (quote let*)) (cons-source (cons-source (cons-source (rename$4411$4449 (quote lo)) (cons-source %lo$4458 (quote ()) (quote (%lo))) (quote (lo %lo))) (cons-source (cons-source (rename$4411$4449 (quote hi)) (cons-source %hi$4462 (quote ()) (quote (%hi))) (quote (hi %hi))) (cons-source (cons-source (rename$4411$4449 (quote tail-len)) (cons-source (cons-source (rename$4411$4449 (quote length)) (cons-source (cons-source (rename$4411$4449 (quote quote)) (cons-source r$4474 (quote ()) (quote (r))) (quote (quote r))) (quote ()) (quote ((quote r)))) (quote (length (quote r)))) (quote ()) (quote ((length (quote r))))) (quote (tail-len (length (quote r))))) (cons-source (cons-source (rename$4411$4449 (quote ls)) (cons-source v$4466 (quote ()) (quote (v))) (quote (ls v))) (cons-source (cons-source (rename$4411$4449 (quote len)) (cons-source (cons-source (rename$4411$4449 (quote and)) (cons-source (cons-source (rename$4411$4449 (quote list?)) (cons-source (rename$4411$4449 (quote ls)) (quote ()) (quote (ls))) (quote (list? ls))) (cons-source (cons-source (rename$4411$4449 (quote -)) (cons-source (cons-source (rename$4411$4449 (quote length)) (cons-source (rename$4411$4449 (quote ls)) (quote ()) (quote (ls))) (quote (length ls))) (cons-source (rename$4411$4449 (quote tail-len)) (quote ()) (quote (tail-len))) (quote ((length ls) tail-len))) (quote (- (length ls) tail-len))) (quote ()) (quote ((- (length ls) tail-len)))) (quote ((list? ls) (- (length ls) tail-len)))) (quote (and (list? ls) (- (length ls) tail-len)))) (quote ()) (quote ((and (list? ls) (- (length ls) tail-len))))) (quote (len (and (list? ls) (- (length ls) tail-len))))) (quote ()) (quote ((len (and (list? ls) (- (length ls) tail-len)))))) (quote ((ls v) (len (and (list? ls) (- (length ls) tail-len)))))) (quote ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))))) (quote ((hi %hi) (tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))))) (quote ((lo %lo) (hi %hi) (tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))))) (cons-source (cons-source (rename$4411$4449 (quote if)) (cons-source (cons-source (rename$4411$4449 (quote and)) (cons-source (rename$4411$4449 (quote len)) (cons-source (cons-source (rename$4411$4449 (quote <=)) (cons-source (rename$4411$4449 (quote lo)) (cons-source (rename$4411$4449 (quote len)) (cons-source (rename$4411$4449 (quote hi)) (quote ()) (quote (hi))) (quote (len hi))) (quote (lo len hi))) (quote (<= lo len hi))) (quote ()) (quote ((<= lo len hi)))) (quote (len (<= lo len hi)))) (quote (and len (<= lo len hi)))) (cons-source (cons-source (rename$4411$4449 (quote let)) (cons-source (rename$4411$4449 (quote loop)) (cons-source (cons-source (cons-source (rename$4411$4449 (quote ls)) (cons-source (rename$4411$4449 (quote ls)) (quote ()) (quote (ls))) (quote (ls ls))) (cons-source (cons-source (rename$4411$4449 (quote j)) (cons-source 0 (quote ()) (quote (0))) (quote (j 0))) (map (lambda (id-ls$4508) (cons-source id-ls$4508 (cons-source (cons-source (rename$4411$4449 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$4505) (quote ((j 0) (id-ls (quote ())) ...))) (quote ((ls ls) (j 0) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$4411$4449 (quote cond)) (cons-source (cons-source (cons-source (rename$4411$4449 (quote =)) (cons-source (rename$4411$4449 (quote j)) (cons-source (rename$4411$4449 (quote len)) (quote ()) (quote (len))) (quote (j len))) (quote (= j len))) (cons-source (cons-source (rename$4411$4449 (quote let)) (cons-source (map (lambda (id$4509 id-ls$4510) (cons-source id$4509 (cons-source (cons-source (rename$4411$4449 (quote reverse)) (cons-source id-ls$4510 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$4504 id-ls$4505) (cons-source (cons-source (rename$4411$4449 (quote match-one)) (cons-source (rename$4411$4449 (quote ls)) (cons-source r$4474 (cons-source (cons-source #f (cons-source #f (quote ()) (quote (#f))) (quote (#f #f))) (cons-source sk$4483 (cons-source fk$4487 (cons-source (append (map (lambda (i$4511) i$4511) i$4492) id$4504) (quote ()) (quote ((i ... id ...)))) (quote (fk (i ... id ...)))) (quote ((sk ...) fk (i ... id ...)))) (quote ((#f #f) (sk ...) fk (i ... id ...)))) (quote (r (#f #f) (sk ...) fk (i ... id ...)))) (quote (ls r (#f #f) (sk ...) fk (i ... id ...)))) (quote (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) (quote ()) (quote ((match-one ls r (#f #f) (sk ...) fk (i ... id ...))))) (quote (((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...))))) (quote (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...))))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))))) (quote ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))))) (cons-source (cons-source (cons-source (rename$4411$4449 (quote pair?)) (cons-source (rename$4411$4449 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$4411$4449 (quote let)) (cons-source (cons-source (cons-source (rename$4411$4449 (quote w)) (cons-source (cons-source (rename$4411$4449 (quote car)) (cons-source (rename$4411$4449 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (quote ()) (quote ((car ls)))) (quote (w (car ls)))) (quote ()) (quote ((w (car ls))))) (cons-source (cons-source (rename$4411$4449 (quote match-one)) (cons-source (rename$4411$4449 (quote w)) (cons-source p$4470 (cons-source (cons-source (cons-source (rename$4411$4449 (quote car)) (cons-source (rename$4411$4449 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$4411$4449 (quote set-car!)) (cons-source (rename$4411$4449 (quote ls)) (quote ()) (quote (ls))) (quote (set-car! ls))) (quote ()) (quote ((set-car! ls)))) (quote ((car ls) (set-car! ls)))) (cons-source (cons-source (rename$4411$4449 (quote match-drop-ids)) (cons-source (cons-source (rename$4411$4449 (quote loop)) (cons-source (cons-source (rename$4411$4449 (quote cdr)) (cons-source (rename$4411$4449 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (cons-source (cons-source (rename$4411$4449 (quote +)) (cons-source (rename$4411$4449 (quote j)) (cons-source 1 (quote ()) (quote (1))) (quote (j 1))) (quote (+ j 1))) (map (lambda (id$4512 id-ls$4513) (cons-source (rename$4411$4449 (quote cons)) (cons-source id$4512 (cons-source id-ls$4513 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$4504 id-ls$4505) (quote ((+ j 1) (cons id id-ls) ...))) (quote ((cdr ls) (+ j 1) (cons id id-ls) ...))) (quote (loop (cdr ls) (+ j 1) (cons id id-ls) ...))) (quote ()) (quote ((loop (cdr ls) (+ j 1) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)))) (cons-source fk$4487 (cons-source i$4492 (quote ()) (quote ((i ...)))) (quote (fk (i ...)))) (quote ((match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (quote (((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (quote (p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (quote (w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (quote (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (quote ()) (quote ((match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...))))) (quote (((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...))))) (quote (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...))))) (quote ()) (quote ((let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))))) (quote ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))))) (cons-source (cons-source (rename$4411$4449 (quote else)) (cons-source fk$4487 (quote ()) (quote (fk))) (quote (else fk))) (quote ()) (quote ((else fk)))) (quote (((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote (((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote ()) (quote ((cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (cons-source fk$4487 (quote ()) (quote (fk))) (quote ((let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk))) (quote ((and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk))) (quote (if (and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk))) (quote ()) (quote ((if (and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk)))) (quote (((lo %lo) (hi %hi) (tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))) (if (and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk)))) (quote (let* ((lo %lo) (hi %hi) (tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))) (if (and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk)))) (quote ()) (quote ((let* ((lo %lo) (hi %hi) (tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))) (if (and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk))))) (quote (r (let* ((lo %lo) (hi %hi) (tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))) (if (and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk))))) (quote (match-verify-no-ellipsis r (let* ((lo %lo) (hi %hi) (tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))) (if (and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk))))) #f) #f)) (cdr v.19$4436$4493))) (reverse id-ls23$4440$4502) (reverse id-ls-ls24$4441$4503)) (if (pair? w.21$4438$4501) ((lambda (v.25$4442$4515) (if (pair? v.25$4442$4515) ((lambda (v.26$4443$4517) ((lambda (id$4518) ((lambda (v.27$4444$4519) (if (pair? v.27$4444$4519) ((lambda (v.28$4445$4521) ((lambda (id-ls$4522) ((lambda (v.29$4446$4523) (if (null? v.29$4446$4523) (lp.22$4439$4500 (cdr w.21$4438$4501) (cons id$4518 id-ls23$4440$4502) (cons id-ls$4522 id-ls-ls24$4441$4503)) #f)) (cdr v.27$4444$4519))) v.28$4445$4521)) (car v.27$4444$4519)) #f)) (cdr v.25$4442$4515))) v.26$4443$4517)) (car v.25$4442$4515)) #f)) (car w.21$4438$4501)) #f)))) (lp.22$4439$4500 w.21$4438$4497 id-ls23$4440$4498 id-ls-ls24$4441$4499)) #f)) v.20$4437$4495 (quote ()) (quote ()))) (car v.19$4436$4493)) #f)) (cdr v.17$4434$4488))) v.18$4435$4490) #f)) (car v.17$4434$4488)) #f)) (cdr v.15$4432$4484))) v.16$4433$4486)) (car v.15$4432$4484)) #f)) (cdr v.13$4430$4479))) v.14$4431$4481) #f)) (car v.13$4430$4479)) #f)) (cdr v.11$4428$4475))) v.12$4429$4477)) (car v.11$4428$4475)) #f)) (cdr v.9$4426$4471))) v.10$4427$4473)) (car v.9$4426$4471)) #f)) (cdr v.7$4424$4467))) v.8$4425$4469)) (car v.7$4424$4467)) #f)) (cdr v.5$4422$4463))) v.6$4423$4465)) (car v.5$4422$4463)) #f)) (cdr v.3$4420$4459))) v.4$4421$4461)) (car v.3$4420$4459)) #f)) (cdr v.1$4418$4455))) v.2$4419$4457)) (car v.1$4418$4455)) #f)) (cdr expr$4410$4448))))) (match-gen-ellipsis/qq lambda (expr$4253$4287 rename$4254$4288 compare$4255$4289) (car ((lambda (tmp$4291$4293) (if tmp$4291$4293 tmp$4291$4293 (cons (error "no expansion for" expr$4253$4287) #f))) ((lambda (v.1$4261$4294) (if (pair? v.1$4261$4294) ((lambda (v.2$4262$4296) ((lambda (v$4297) ((lambda (v.3$4263$4298) (if (pair? v.3$4263$4298) ((lambda (v.4$4264$4300) ((lambda (p$4301) ((lambda (v.5$4265$4302) (if (pair? v.5$4265$4302) ((lambda (v.6$4266$4304) ((lambda (r$4305) ((lambda (v.7$4267$4306) (if (pair? v.7$4267$4306) ((lambda (v.8$4268$4308) ((lambda (g+s$4309) ((lambda (v.9$4269$4310) (if (pair? v.9$4269$4310) ((lambda (v.10$4270$4312) (if (list? v.10$4270$4312) ((lambda (sk$4314) ((lambda (v.11$4271$4315) (if (pair? v.11$4271$4315) ((lambda (v.12$4272$4317) ((lambda (fk$4318) ((lambda (v.13$4273$4319) (if (pair? v.13$4273$4319) ((lambda (v.14$4274$4321) (if (list? v.14$4274$4321) ((lambda (i$4323) ((lambda (v.15$4275$4324) (if (pair? v.15$4275$4324) ((lambda (v.16$4276$4326) ((lambda (w.17$4277$4328 id-ls19$4279$4329 id-ls-ls20$4280$4330) ((lambda (lp.18$4278$4331) (set! lp.18$4278$4331 (lambda (w.17$4277$4332 id-ls19$4279$4333 id-ls-ls20$4280$4334) (if (null? w.17$4277$4332) ((lambda (id$4335 id-ls$4336) ((lambda (v.26$4286$4337) (if (null? v.26$4286$4337) (cons (cons-source (rename$4254$4288 (quote match-verify-no-ellipsis)) (cons-source r$4305 (cons-source (cons-source (rename$4254$4288 (quote let*)) (cons-source (cons-source (cons-source (rename$4254$4288 (quote tail-len)) (cons-source (cons-source (rename$4254$4288 (quote length)) (cons-source (cons-source (rename$4254$4288 (quote quote)) (cons-source r$4305 (quote ()) (quote (r))) (quote (quote r))) (quote ()) (quote ((quote r)))) (quote (length (quote r)))) (quote ()) (quote ((length (quote r))))) (quote (tail-len (length (quote r))))) (cons-source (cons-source (rename$4254$4288 (quote ls)) (cons-source v$4297 (quote ()) (quote (v))) (quote (ls v))) (cons-source (cons-source (rename$4254$4288 (quote len)) (cons-source (cons-source (rename$4254$4288 (quote and)) (cons-source (cons-source (rename$4254$4288 (quote list?)) (cons-source (rename$4254$4288 (quote ls)) (quote ()) (quote (ls))) (quote (list? ls))) (cons-source (cons-source (rename$4254$4288 (quote length)) (cons-source (rename$4254$4288 (quote ls)) (quote ()) (quote (ls))) (quote (length ls))) (quote ()) (quote ((length ls)))) (quote ((list? ls) (length ls)))) (quote (and (list? ls) (length ls)))) (quote ()) (quote ((and (list? ls) (length ls))))) (quote (len (and (list? ls) (length ls))))) (quote ()) (quote ((len (and (list? ls) (length ls)))))) (quote ((ls v) (len (and (list? ls) (length ls)))))) (quote ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))))) (cons-source (cons-source (rename$4254$4288 (quote if)) (cons-source (cons-source (rename$4254$4288 (quote or)) (cons-source (cons-source (rename$4254$4288 (quote not)) (cons-source (rename$4254$4288 (quote len)) (quote ()) (quote (len))) (quote (not len))) (cons-source (cons-source (rename$4254$4288 (quote <)) (cons-source (rename$4254$4288 (quote len)) (cons-source (rename$4254$4288 (quote tail-len)) (quote ()) (quote (tail-len))) (quote (len tail-len))) (quote (< len tail-len))) (quote ()) (quote ((< len tail-len)))) (quote ((not len) (< len tail-len)))) (quote (or (not len) (< len tail-len)))) (cons-source fk$4318 (cons-source (cons-source (rename$4254$4288 (quote let)) (cons-source (rename$4254$4288 (quote loop)) (cons-source (cons-source (cons-source (rename$4254$4288 (quote ls)) (cons-source (rename$4254$4288 (quote ls)) (quote ()) (quote (ls))) (quote (ls ls))) (cons-source (cons-source (rename$4254$4288 (quote n)) (cons-source (rename$4254$4288 (quote len)) (quote ()) (quote (len))) (quote (n len))) (map (lambda (id-ls$4339) (cons-source id-ls$4339 (cons-source (cons-source (rename$4254$4288 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$4336) (quote ((n len) (id-ls (quote ())) ...))) (quote ((ls ls) (n len) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$4254$4288 (quote cond)) (cons-source (cons-source (cons-source (rename$4254$4288 (quote =)) (cons-source (rename$4254$4288 (quote n)) (cons-source (rename$4254$4288 (quote tail-len)) (quote ()) (quote (tail-len))) (quote (n tail-len))) (quote (= n tail-len))) (cons-source (cons-source (rename$4254$4288 (quote let)) (cons-source (map (lambda (id$4340 id-ls$4341) (cons-source id$4340 (cons-source (cons-source (rename$4254$4288 (quote reverse)) (cons-source id-ls$4341 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$4335 id-ls$4336) (cons-source (cons-source (rename$4254$4288 (quote match-quasiquote)) (cons-source (rename$4254$4288 (quote ls)) (cons-source r$4305 (cons-source g+s$4309 (cons-source sk$4314 (cons-source fk$4318 (cons-source (append (map (lambda (i$4342) i$4342) i$4323) id$4335) (quote ()) (quote ((i ... id ...)))) (quote (fk (i ... id ...)))) (quote ((sk ...) fk (i ... id ...)))) (quote (g+s (sk ...) fk (i ... id ...)))) (quote (r g+s (sk ...) fk (i ... id ...)))) (quote (ls r g+s (sk ...) fk (i ... id ...)))) (quote (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) (quote ()) (quote ((match-quasiquote ls r g+s (sk ...) fk (i ... id ...))))) (quote (((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...))))) (quote (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...))))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))))) (quote ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))))) (cons-source (cons-source (cons-source (rename$4254$4288 (quote pair?)) (cons-source (rename$4254$4288 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$4254$4288 (quote let)) (cons-source (cons-source (cons-source (rename$4254$4288 (quote w)) (cons-source (cons-source (rename$4254$4288 (quote car)) (cons-source (rename$4254$4288 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (quote ()) (quote ((car ls)))) (quote (w (car ls)))) (quote ()) (quote ((w (car ls))))) (cons-source (cons-source (rename$4254$4288 (quote match-one)) (cons-source (rename$4254$4288 (quote w)) (cons-source p$4301 (cons-source (cons-source (cons-source (rename$4254$4288 (quote car)) (cons-source (rename$4254$4288 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$4254$4288 (quote set-car!)) (cons-source (rename$4254$4288 (quote ls)) (quote ()) (quote (ls))) (quote (set-car! ls))) (quote ()) (quote ((set-car! ls)))) (quote ((car ls) (set-car! ls)))) (cons-source (cons-source (rename$4254$4288 (quote match-drop-ids)) (cons-source (cons-source (rename$4254$4288 (quote loop)) (cons-source (cons-source (rename$4254$4288 (quote cdr)) (cons-source (rename$4254$4288 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (cons-source (cons-source (rename$4254$4288 (quote -)) (cons-source (rename$4254$4288 (quote n)) (cons-source 1 (quote ()) (quote (1))) (quote (n 1))) (quote (- n 1))) (map (lambda (id$4343 id-ls$4344) (cons-source (rename$4254$4288 (quote cons)) (cons-source id$4343 (cons-source id-ls$4344 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$4335 id-ls$4336) (quote ((- n 1) (cons id id-ls) ...))) (quote ((cdr ls) (- n 1) (cons id id-ls) ...))) (quote (loop (cdr ls) (- n 1) (cons id id-ls) ...))) (quote ()) (quote ((loop (cdr ls) (- n 1) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)))) (cons-source fk$4318 (cons-source i$4323 (quote ()) (quote ((i ...)))) (quote (fk (i ...)))) (quote ((match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote ()) (quote ((match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...))))) (quote (((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...))))) (quote (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...))))) (quote ()) (quote ((let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))))) (quote ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))))) (cons-source (cons-source (rename$4254$4288 (quote else)) (cons-source fk$4318 (quote ()) (quote (fk))) (quote (else fk))) (quote ()) (quote ((else fk)))) (quote (((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote (((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote ()) (quote ((cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote ()) (quote ((let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote (fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote ((or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote ()) (quote ((if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))))) (quote (((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))))) (quote (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))))) (quote ()) (quote ((let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))))) (quote (r (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))))) (quote (match-verify-no-ellipsis r (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))))) #f) #f)) (cdr v.15$4275$4324))) (reverse id-ls19$4279$4333) (reverse id-ls-ls20$4280$4334)) (if (pair? w.17$4277$4332) ((lambda (v.21$4281$4346) (if (pair? v.21$4281$4346) ((lambda (v.22$4282$4348) ((lambda (id$4349) ((lambda (v.23$4283$4350) (if (pair? v.23$4283$4350) ((lambda (v.24$4284$4352) ((lambda (id-ls$4353) ((lambda (v.25$4285$4354) (if (null? v.25$4285$4354) (lp.18$4278$4331 (cdr w.17$4277$4332) (cons id$4349 id-ls19$4279$4333) (cons id-ls$4353 id-ls-ls20$4280$4334)) #f)) (cdr v.23$4283$4350))) v.24$4284$4352)) (car v.23$4283$4350)) #f)) (cdr v.21$4281$4346))) v.22$4282$4348)) (car v.21$4281$4346)) #f)) (car w.17$4277$4332)) #f)))) (lp.18$4278$4331 w.17$4277$4328 id-ls19$4279$4329 id-ls-ls20$4280$4330)) #f)) v.16$4276$4326 (quote ()) (quote ()))) (car v.15$4275$4324)) #f)) (cdr v.13$4273$4319))) v.14$4274$4321) #f)) (car v.13$4273$4319)) #f)) (cdr v.11$4271$4315))) v.12$4272$4317)) (car v.11$4271$4315)) #f)) (cdr v.9$4269$4310))) v.10$4270$4312) #f)) (car v.9$4269$4310)) #f)) (cdr v.7$4267$4306))) v.8$4268$4308)) (car v.7$4267$4306)) #f)) (cdr v.5$4265$4302))) v.6$4266$4304)) (car v.5$4265$4302)) #f)) (cdr v.3$4263$4298))) v.4$4264$4300)) (car v.3$4263$4298)) #f)) (cdr v.1$4261$4294))) v.2$4262$4296)) (car v.1$4261$4294)) #f)) (cdr expr$4253$4287))))) (match-gen-ellipsis lambda (expr$3958$4018 rename$3959$4019 compare$3960$4020) (car ((lambda (tmp$4022$4024) (if tmp$4022$4024 tmp$4022$4024 ((lambda (tmp$4026$4028) (if tmp$4026$4028 tmp$4026$4028 (cons (error "no expansion for" expr$3958$4018) #f))) ((lambda (v.27$3992$4029) (if (pair? v.27$3992$4029) ((lambda (v.28$3993$4031) ((lambda (v$4032) ((lambda (v.29$3994$4033) (if (pair? v.29$3994$4033) ((lambda (v.30$3995$4035) ((lambda (p$4036) ((lambda (v.31$3996$4037) (if (pair? v.31$3996$4037) ((lambda (v.32$3997$4039) ((lambda (r$4040) ((lambda (v.33$3998$4041) (if (pair? v.33$3998$4041) ((lambda (v.34$3999$4043) ((lambda (g+s$4044) ((lambda (v.35$4000$4045) (if (pair? v.35$4000$4045) ((lambda (v.36$4001$4047) ((lambda (sk$4048) ((lambda (v.37$4002$4049) (if (pair? v.37$4002$4049) ((lambda (v.38$4003$4051) ((lambda (fk$4052) ((lambda (v.39$4004$4053) (if (pair? v.39$4004$4053) ((lambda (v.40$4005$4055) (if (list? v.40$4005$4055) ((lambda (i$4057) ((lambda (v.41$4006$4058) (if (pair? v.41$4006$4058) ((lambda (v.42$4007$4060) ((lambda (w.43$4008$4062 id-ls45$4010$4063 id-ls-ls46$4011$4064) ((lambda (lp.44$4009$4065) (set! lp.44$4009$4065 (lambda (w.43$4008$4066 id-ls45$4010$4067 id-ls-ls46$4011$4068) (if (null? w.43$4008$4066) ((lambda (id$4069 id-ls$4070) ((lambda (v.52$4017$4071) (if (null? v.52$4017$4071) (cons (cons-source (rename$3959$4019 (quote match-verify-no-ellipsis)) (cons-source r$4040 (cons-source (cons-source (rename$3959$4019 (quote let*)) (cons-source (cons-source (cons-source (rename$3959$4019 (quote tail-len)) (cons-source (cons-source (rename$3959$4019 (quote length)) (cons-source (cons-source (rename$3959$4019 (quote quote)) (cons-source r$4040 (quote ()) (quote (r))) (quote (quote r))) (quote ()) (quote ((quote r)))) (quote (length (quote r)))) (quote ()) (quote ((length (quote r))))) (quote (tail-len (length (quote r))))) (cons-source (cons-source (rename$3959$4019 (quote ls)) (cons-source v$4032 (quote ()) (quote (v))) (quote (ls v))) (cons-source (cons-source (rename$3959$4019 (quote len)) (cons-source (cons-source (rename$3959$4019 (quote and)) (cons-source (cons-source (rename$3959$4019 (quote list?)) (cons-source (rename$3959$4019 (quote ls)) (quote ()) (quote (ls))) (quote (list? ls))) (cons-source (cons-source (rename$3959$4019 (quote length)) (cons-source (rename$3959$4019 (quote ls)) (quote ()) (quote (ls))) (quote (length ls))) (quote ()) (quote ((length ls)))) (quote ((list? ls) (length ls)))) (quote (and (list? ls) (length ls)))) (quote ()) (quote ((and (list? ls) (length ls))))) (quote (len (and (list? ls) (length ls))))) (quote ()) (quote ((len (and (list? ls) (length ls)))))) (quote ((ls v) (len (and (list? ls) (length ls)))))) (quote ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))))) (cons-source (cons-source (rename$3959$4019 (quote if)) (cons-source (cons-source (rename$3959$4019 (quote or)) (cons-source (cons-source (rename$3959$4019 (quote not)) (cons-source (rename$3959$4019 (quote len)) (quote ()) (quote (len))) (quote (not len))) (cons-source (cons-source (rename$3959$4019 (quote <)) (cons-source (rename$3959$4019 (quote len)) (cons-source (rename$3959$4019 (quote tail-len)) (quote ()) (quote (tail-len))) (quote (len tail-len))) (quote (< len tail-len))) (quote ()) (quote ((< len tail-len)))) (quote ((not len) (< len tail-len)))) (quote (or (not len) (< len tail-len)))) (cons-source fk$4052 (cons-source (cons-source (rename$3959$4019 (quote let)) (cons-source (rename$3959$4019 (quote loop)) (cons-source (cons-source (cons-source (rename$3959$4019 (quote ls)) (cons-source (rename$3959$4019 (quote ls)) (quote ()) (quote (ls))) (quote (ls ls))) (cons-source (cons-source (rename$3959$4019 (quote n)) (cons-source (rename$3959$4019 (quote len)) (quote ()) (quote (len))) (quote (n len))) (map (lambda (id-ls$4073) (cons-source id-ls$4073 (cons-source (cons-source (rename$3959$4019 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$4070) (quote ((n len) (id-ls (quote ())) ...))) (quote ((ls ls) (n len) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$3959$4019 (quote cond)) (cons-source (cons-source (cons-source (rename$3959$4019 (quote =)) (cons-source (rename$3959$4019 (quote n)) (cons-source (rename$3959$4019 (quote tail-len)) (quote ()) (quote (tail-len))) (quote (n tail-len))) (quote (= n tail-len))) (cons-source (cons-source (rename$3959$4019 (quote let)) (cons-source (map (lambda (id$4074 id-ls$4075) (cons-source id$4074 (cons-source (cons-source (rename$3959$4019 (quote reverse)) (cons-source id-ls$4075 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$4069 id-ls$4070) (cons-source (cons-source (rename$3959$4019 (quote match-one)) (cons-source (rename$3959$4019 (quote ls)) (cons-source r$4040 (cons-source (cons-source #f (cons-source #f (quote ()) (quote (#f))) (quote (#f #f))) (cons-source sk$4048 (cons-source fk$4052 (cons-source (append (map (lambda (i$4076) i$4076) i$4057) id$4069) (quote ()) (quote ((i ... id ...)))) (quote (fk (i ... id ...)))) (quote (sk fk (i ... id ...)))) (quote ((#f #f) sk fk (i ... id ...)))) (quote (r (#f #f) sk fk (i ... id ...)))) (quote (ls r (#f #f) sk fk (i ... id ...)))) (quote (match-one ls r (#f #f) sk fk (i ... id ...)))) (quote ()) (quote ((match-one ls r (#f #f) sk fk (i ... id ...))))) (quote (((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...))))) (quote (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...))))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))))) (quote ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))))) (cons-source (cons-source (cons-source (rename$3959$4019 (quote pair?)) (cons-source (rename$3959$4019 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$3959$4019 (quote let)) (cons-source (cons-source (cons-source (rename$3959$4019 (quote w)) (cons-source (cons-source (rename$3959$4019 (quote car)) (cons-source (rename$3959$4019 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (quote ()) (quote ((car ls)))) (quote (w (car ls)))) (quote ()) (quote ((w (car ls))))) (cons-source (cons-source (rename$3959$4019 (quote match-one)) (cons-source (rename$3959$4019 (quote w)) (cons-source p$4036 (cons-source (cons-source (cons-source (rename$3959$4019 (quote car)) (cons-source (rename$3959$4019 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$3959$4019 (quote set-car!)) (cons-source (rename$3959$4019 (quote ls)) (quote ()) (quote (ls))) (quote (set-car! ls))) (quote ()) (quote ((set-car! ls)))) (quote ((car ls) (set-car! ls)))) (cons-source (cons-source (rename$3959$4019 (quote match-drop-ids)) (cons-source (cons-source (rename$3959$4019 (quote loop)) (cons-source (cons-source (rename$3959$4019 (quote cdr)) (cons-source (rename$3959$4019 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (cons-source (cons-source (rename$3959$4019 (quote -)) (cons-source (rename$3959$4019 (quote n)) (cons-source 1 (quote ()) (quote (1))) (quote (n 1))) (quote (- n 1))) (map (lambda (id$4077 id-ls$4078) (cons-source (rename$3959$4019 (quote cons)) (cons-source id$4077 (cons-source id-ls$4078 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$4069 id-ls$4070) (quote ((- n 1) (cons id id-ls) ...))) (quote ((cdr ls) (- n 1) (cons id id-ls) ...))) (quote (loop (cdr ls) (- n 1) (cons id id-ls) ...))) (quote ()) (quote ((loop (cdr ls) (- n 1) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)))) (cons-source fk$4052 (cons-source i$4057 (quote ()) (quote ((i ...)))) (quote (fk (i ...)))) (quote ((match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote ()) (quote ((match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...))))) (quote (((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...))))) (quote (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...))))) (quote ()) (quote ((let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))))) (quote ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))))) (cons-source (cons-source (rename$3959$4019 (quote else)) (cons-source fk$4052 (quote ()) (quote (fk))) (quote (else fk))) (quote ()) (quote ((else fk)))) (quote (((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote (((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote ()) (quote ((cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote ()) (quote ((let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote (fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote ((or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote ()) (quote ((if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))))) (quote (((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))))) (quote (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))))) (quote ()) (quote ((let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))))) (quote (r (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))))) (quote (match-verify-no-ellipsis r (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))))) #f) #f)) (cdr v.41$4006$4058))) (reverse id-ls45$4010$4067) (reverse id-ls-ls46$4011$4068)) (if (pair? w.43$4008$4066) ((lambda (v.47$4012$4080) (if (pair? v.47$4012$4080) ((lambda (v.48$4013$4082) ((lambda (id$4083) ((lambda (v.49$4014$4084) (if (pair? v.49$4014$4084) ((lambda (v.50$4015$4086) ((lambda (id-ls$4087) ((lambda (v.51$4016$4088) (if (null? v.51$4016$4088) (lp.44$4009$4065 (cdr w.43$4008$4066) (cons id$4083 id-ls45$4010$4067) (cons id-ls$4087 id-ls-ls46$4011$4068)) #f)) (cdr v.49$4014$4084))) v.50$4015$4086)) (car v.49$4014$4084)) #f)) (cdr v.47$4012$4080))) v.48$4013$4082)) (car v.47$4012$4080)) #f)) (car w.43$4008$4066)) #f)))) (lp.44$4009$4065 w.43$4008$4062 id-ls45$4010$4063 id-ls-ls46$4011$4064)) #f)) v.42$4007$4060 (quote ()) (quote ()))) (car v.41$4006$4058)) #f)) (cdr v.39$4004$4053))) v.40$4005$4055) #f)) (car v.39$4004$4053)) #f)) (cdr v.37$4002$4049))) v.38$4003$4051)) (car v.37$4002$4049)) #f)) (cdr v.35$4000$4045))) v.36$4001$4047)) (car v.35$4000$4045)) #f)) (cdr v.33$3998$4041))) v.34$3999$4043)) (car v.33$3998$4041)) #f)) (cdr v.31$3996$4037))) v.32$3997$4039)) (car v.31$3996$4037)) #f)) (cdr v.29$3994$4033))) v.30$3995$4035)) (car v.29$3994$4033)) #f)) (cdr v.27$3992$4029))) v.28$3993$4031)) (car v.27$3992$4029)) #f)) (cdr expr$3958$4018))))) ((lambda (v.1$3966$4090) (if (pair? v.1$3966$4090) ((lambda (v.2$3967$4092) ((lambda (v$4093) ((lambda (v.3$3968$4094) (if (pair? v.3$3968$4094) ((lambda (v.4$3969$4096) ((lambda (p$4097) ((lambda (v.5$3970$4098) (if (pair? v.5$3970$4098) ((lambda (v.6$3971$4100) (if (null? v.6$3971$4100) ((lambda (v.7$3972$4102) (if (pair? v.7$3972$4102) ((lambda (v.8$3973$4104) ((lambda (g+s$4105) ((lambda (v.9$3974$4106) (if (pair? v.9$3974$4106) ((lambda (v.10$3975$4108) (if (list? v.10$3975$4108) ((lambda (sk$4110) ((lambda (v.11$3976$4111) (if (pair? v.11$3976$4111) ((lambda (v.12$3977$4113) ((lambda (fk$4114) ((lambda (v.13$3978$4115) (if (pair? v.13$3978$4115) ((lambda (v.14$3979$4117) ((lambda (i$4118) ((lambda (v.15$3980$4119) (if (pair? v.15$3980$4119) ((lambda (v.16$3981$4121) ((lambda (w.17$3982$4123 id-ls19$3984$4124 id-ls-ls20$3985$4125) ((lambda (lp.18$3983$4126) (set! lp.18$3983$4126 (lambda (w.17$3982$4127 id-ls19$3984$4128 id-ls-ls20$3985$4129) (if (null? w.17$3982$4127) ((lambda (id$4130 id-ls$4131) ((lambda (v.26$3991$4132) (if (null? v.26$3991$4132) (cons (cons-source (rename$3959$4019 (quote match-check-identifier)) (cons-source p$4097 (cons-source (cons-source (rename$3959$4019 (quote let)) (cons-source (cons-source (cons-source p$4097 (cons-source v$4093 (quote ()) (quote (v))) (quote (p v))) (quote ()) (quote ((p v)))) (cons-source (cons-source (rename$3959$4019 (quote if)) (cons-source (cons-source (rename$3959$4019 (quote list?)) (cons-source p$4097 (quote ()) (quote (p))) (quote (list? p))) (cons-source (append (map (lambda (sk$4134) sk$4134) sk$4110) (cons-source i$4118 (quote ()) (quote (i)))) (cons-source fk$4114 (quote ()) (quote (fk))) (quote ((sk ... i) fk))) (quote ((list? p) (sk ... i) fk))) (quote (if (list? p) (sk ... i) fk))) (quote ()) (quote ((if (list? p) (sk ... i) fk)))) (quote (((p v)) (if (list? p) (sk ... i) fk)))) (quote (let ((p v)) (if (list? p) (sk ... i) fk)))) (cons-source (cons-source (rename$3959$4019 (quote let)) (cons-source (rename$3959$4019 (quote loop)) (cons-source (cons-source (cons-source (rename$3959$4019 (quote ls)) (cons-source v$4093 (quote ()) (quote (v))) (quote (ls v))) (map (lambda (id-ls$4135) (cons-source id-ls$4135 (cons-source (cons-source (rename$3959$4019 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$4131) (quote ((ls v) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$3959$4019 (quote cond)) (cons-source (cons-source (cons-source (rename$3959$4019 (quote null?)) (cons-source (rename$3959$4019 (quote ls)) (quote ()) (quote (ls))) (quote (null? ls))) (cons-source (cons-source (rename$3959$4019 (quote let)) (cons-source (map (lambda (id$4136 id-ls$4137) (cons-source id$4136 (cons-source (cons-source (rename$3959$4019 (quote reverse)) (cons-source id-ls$4137 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$4130 id-ls$4131) (cons-source (append (map (lambda (sk$4138) sk$4138) sk$4110) (cons-source i$4118 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((id (reverse id-ls)) ...) (sk ... i)))) (quote (let ((id (reverse id-ls)) ...) (sk ... i)))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) (sk ... i))))) (quote ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))))) (cons-source (cons-source (cons-source (rename$3959$4019 (quote pair?)) (cons-source (rename$3959$4019 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$3959$4019 (quote let)) (cons-source (cons-source (cons-source (rename$3959$4019 (quote w)) (cons-source (cons-source (rename$3959$4019 (quote car)) (cons-source (rename$3959$4019 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (quote ()) (quote ((car ls)))) (quote (w (car ls)))) (quote ()) (quote ((w (car ls))))) (cons-source (cons-source (rename$3959$4019 (quote match-one)) (cons-source (rename$3959$4019 (quote w)) (cons-source p$4097 (cons-source (cons-source (cons-source (rename$3959$4019 (quote car)) (cons-source (rename$3959$4019 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$3959$4019 (quote set-car!)) (cons-source (rename$3959$4019 (quote ls)) (quote ()) (quote (ls))) (quote (set-car! ls))) (quote ()) (quote ((set-car! ls)))) (quote ((car ls) (set-car! ls)))) (cons-source (cons-source (rename$3959$4019 (quote match-drop-ids)) (cons-source (cons-source (rename$3959$4019 (quote loop)) (cons-source (cons-source (rename$3959$4019 (quote cdr)) (cons-source (rename$3959$4019 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (map (lambda (id$4139 id-ls$4140) (cons-source (rename$3959$4019 (quote cons)) (cons-source id$4139 (cons-source id-ls$4140 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$4130 id-ls$4131) (quote ((cdr ls) (cons id id-ls) ...))) (quote (loop (cdr ls) (cons id id-ls) ...))) (quote ()) (quote ((loop (cdr ls) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)))) (cons-source fk$4114 (cons-source i$4118 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote ()) (quote ((match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i)))) (quote (((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i)))) (quote (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i)))) (quote ()) (quote ((let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))))) (quote ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))))) (cons-source (cons-source (rename$3959$4019 (quote else)) (cons-source fk$4114 (quote ()) (quote (fk))) (quote (else fk))) (quote ()) (quote ((else fk)))) (quote (((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))) (quote (((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))) (quote (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))) (quote ()) (quote ((cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote ()) (quote ((let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote ((let ((p v)) (if (list? p) (sk ... i) fk)) (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote (p (let ((p v)) (if (list? p) (sk ... i) fk)) (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote (match-check-identifier p (let ((p v)) (if (list? p) (sk ... i) fk)) (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) #f) #f)) (cdr v.15$3980$4119))) (reverse id-ls19$3984$4128) (reverse id-ls-ls20$3985$4129)) (if (pair? w.17$3982$4127) ((lambda (v.21$3986$4142) (if (pair? v.21$3986$4142) ((lambda (v.22$3987$4144) ((lambda (id$4145) ((lambda (v.23$3988$4146) (if (pair? v.23$3988$4146) ((lambda (v.24$3989$4148) ((lambda (id-ls$4149) ((lambda (v.25$3990$4150) (if (null? v.25$3990$4150) (lp.18$3983$4126 (cdr w.17$3982$4127) (cons id$4145 id-ls19$3984$4128) (cons id-ls$4149 id-ls-ls20$3985$4129)) #f)) (cdr v.23$3988$4146))) v.24$3989$4148)) (car v.23$3988$4146)) #f)) (cdr v.21$3986$4142))) v.22$3987$4144)) (car v.21$3986$4142)) #f)) (car w.17$3982$4127)) #f)))) (lp.18$3983$4126 w.17$3982$4123 id-ls19$3984$4124 id-ls-ls20$3985$4125)) #f)) v.16$3981$4121 (quote ()) (quote ()))) (car v.15$3980$4119)) #f)) (cdr v.13$3978$4115))) v.14$3979$4117)) (car v.13$3978$4115)) #f)) (cdr v.11$3976$4111))) v.12$3977$4113)) (car v.11$3976$4111)) #f)) (cdr v.9$3974$4106))) v.10$3975$4108) #f)) (car v.9$3974$4106)) #f)) (cdr v.7$3972$4102))) v.8$3973$4104)) (car v.7$3972$4102)) #f)) (cdr v.5$3970$4098)) #f)) (car v.5$3970$4098)) #f)) (cdr v.3$3968$4094))) v.4$3969$4096)) (car v.3$3968$4094)) #f)) (cdr v.1$3966$4090))) v.2$3967$4092)) (car v.1$3966$4090)) #f)) (cdr expr$3958$4018))))) (match-gen-or-step lambda (expr$3778$3819 rename$3779$3820 compare$3780$3821) (car ((lambda (tmp$3823$3825) (if tmp$3823$3825 tmp$3823$3825 ((lambda (tmp$3827$3829) (if tmp$3827$3829 tmp$3827$3829 ((lambda (tmp$3831$3833) (if tmp$3831$3833 tmp$3831$3833 (cons (error "no expansion for" expr$3778$3819) #f))) ((lambda (v.19$3804$3834) (if (pair? v.19$3804$3834) ((lambda (v.20$3805$3836) ((lambda (v$3837) ((lambda (v.21$3806$3838) (if (pair? v.21$3806$3838) ((lambda (v.22$3807$3840) (if (pair? v.22$3807$3840) ((lambda (v.23$3808$3842) ((lambda (p$3843) ((lambda (v.24$3809$3844) ((lambda (q$3845) ((lambda (v.25$3810$3846) (if (pair? v.25$3810$3846) ((lambda (v.26$3811$3848) ((lambda (g+s$3849) ((lambda (v.27$3812$3850) (if (pair? v.27$3812$3850) ((lambda (v.28$3813$3852) ((lambda (sk$3853) ((lambda (v.29$3814$3854) (if (pair? v.29$3814$3854) ((lambda (v.30$3815$3856) ((lambda (fk$3857) ((lambda (v.31$3816$3858) (if (pair? v.31$3816$3858) ((lambda (v.32$3817$3860) ((lambda (i$3861) ((lambda (v.33$3818$3862) (if (null? v.33$3818$3862) (cons (cons-source (rename$3779$3820 (quote let)) (cons-source (cons-source (cons-source (rename$3779$3820 (quote fk2)) (cons-source (cons-source (rename$3779$3820 (quote lambda)) (cons-source (quote ()) (cons-source (cons-source (rename$3779$3820 (quote match-gen-or-step)) (cons-source v$3837 (cons-source q$3845 (cons-source g+s$3849 (cons-source sk$3853 (cons-source fk$3857 (cons-source i$3861 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (q g+s sk fk i))) (quote (v q g+s sk fk i))) (quote (match-gen-or-step v q g+s sk fk i))) (quote ()) (quote ((match-gen-or-step v q g+s sk fk i)))) (quote (() (match-gen-or-step v q g+s sk fk i)))) (quote (lambda () (match-gen-or-step v q g+s sk fk i)))) (quote ()) (quote ((lambda () (match-gen-or-step v q g+s sk fk i))))) (quote (fk2 (lambda () (match-gen-or-step v q g+s sk fk i))))) (quote ()) (quote ((fk2 (lambda () (match-gen-or-step v q g+s sk fk i)))))) (cons-source (cons-source (rename$3779$3820 (quote match-one)) (cons-source v$3837 (cons-source p$3843 (cons-source g+s$3849 (cons-source sk$3853 (cons-source (cons-source (rename$3779$3820 (quote fk2)) (quote ()) (quote (fk2))) (cons-source i$3861 (quote ()) (quote (i))) (quote ((fk2) i))) (quote (sk (fk2) i))) (quote (g+s sk (fk2) i))) (quote (p g+s sk (fk2) i))) (quote (v p g+s sk (fk2) i))) (quote (match-one v p g+s sk (fk2) i))) (quote ()) (quote ((match-one v p g+s sk (fk2) i)))) (quote (((fk2 (lambda () (match-gen-or-step v q g+s sk fk i)))) (match-one v p g+s sk (fk2) i)))) (quote (let ((fk2 (lambda () (match-gen-or-step v q g+s sk fk i)))) (match-one v p g+s sk (fk2) i)))) #f) #f)) (cdr v.31$3816$3858))) v.32$3817$3860)) (car v.31$3816$3858)) #f)) (cdr v.29$3814$3854))) v.30$3815$3856)) (car v.29$3814$3854)) #f)) (cdr v.27$3812$3850))) v.28$3813$3852)) (car v.27$3812$3850)) #f)) (cdr v.25$3810$3846))) v.26$3811$3848)) (car v.25$3810$3846)) #f)) (cdr v.21$3806$3838))) v.24$3809$3844)) (cdr v.22$3807$3840))) v.23$3808$3842)) (car v.22$3807$3840)) #f)) (car v.21$3806$3838)) #f)) (cdr v.19$3804$3834))) v.20$3805$3836)) (car v.19$3804$3834)) #f)) (cdr expr$3778$3819))))) ((lambda (v.12$3797$3864) (if (pair? v.12$3797$3864) ((lambda (v.13$3798$3866) ((lambda (v$3867) ((lambda (v.14$3799$3868) (if (pair? v.14$3799$3868) ((lambda (v.15$3800$3870) (if (pair? v.15$3800$3870) ((lambda (v.16$3801$3872) ((lambda (p$3873) ((lambda (v.17$3802$3874) (if (null? v.17$3802$3874) ((lambda (v.18$3803$3876) ((lambda (x$3877) (cons (cons-source (rename$3779$3820 (quote match-one)) (cons-source v$3867 (cons-source p$3873 x$3877 (quote (p . x))) (quote (v p . x))) (quote (match-one v p . x))) #f)) v.18$3803$3876)) (cdr v.14$3799$3868)) #f)) (cdr v.15$3800$3870))) v.16$3801$3872)) (car v.15$3800$3870)) #f)) (car v.14$3799$3868)) #f)) (cdr v.12$3797$3864))) v.13$3798$3866)) (car v.12$3797$3864)) #f)) (cdr expr$3778$3819))))) ((lambda (v.1$3786$3878) (if (pair? v.1$3786$3878) ((lambda (v.2$3787$3880) ((lambda (v$3881) ((lambda (v.3$3788$3882) (if (pair? v.3$3788$3882) ((lambda (v.4$3789$3884) (if (null? v.4$3789$3884) ((lambda (v.5$3790$3886) (if (pair? v.5$3790$3886) ((lambda (v.6$3791$3888) ((lambda (g+s$3889) ((lambda (v.7$3792$3890) (if (pair? v.7$3792$3890) ((lambda (v.8$3793$3892) ((lambda (sk$3893) ((lambda (v.9$3794$3894) (if (pair? v.9$3794$3894) ((lambda (v.10$3795$3896) ((lambda (fk$3897) ((lambda (v.11$3796$3898) ((lambda (x$3899) (cons fk$3897 #f)) v.11$3796$3898)) (cdr v.9$3794$3894))) v.10$3795$3896)) (car v.9$3794$3894)) #f)) (cdr v.7$3792$3890))) v.8$3793$3892)) (car v.7$3792$3890)) #f)) (cdr v.5$3790$3886))) v.6$3791$3888)) (car v.5$3790$3886)) #f)) (cdr v.3$3788$3882)) #f)) (car v.3$3788$3882)) #f)) (cdr v.1$3786$3878))) v.2$3787$3880)) (car v.1$3786$3878)) #f)) (cdr expr$3778$3819))))) (match-gen-or lambda (expr$3636$3668 rename$3637$3669 compare$3638$3670) (car ((lambda (tmp$3672$3674) (if tmp$3672$3674 tmp$3672$3674 (cons (error "no expansion for" expr$3636$3668) #f))) ((lambda (v.1$3644$3675) (if (pair? v.1$3644$3675) ((lambda (v.2$3645$3677) ((lambda (v$3678) ((lambda (v.3$3646$3679) (if (pair? v.3$3646$3679) ((lambda (v.4$3647$3681) ((lambda (p$3682) ((lambda (v.5$3648$3683) (if (pair? v.5$3648$3683) ((lambda (v.6$3649$3685) ((lambda (g+s$3686) ((lambda (v.7$3650$3687) (if (pair? v.7$3650$3687) ((lambda (v.8$3651$3689) (if (list? v.8$3651$3689) ((lambda (sk$3691) ((lambda (v.9$3652$3692) (if (pair? v.9$3652$3692) ((lambda (v.10$3653$3694) ((lambda (fk$3695) ((lambda (v.11$3654$3696) (if (pair? v.11$3654$3696) ((lambda (v.12$3655$3698) (if (list? v.12$3655$3698) ((lambda (i$3700) ((lambda (v.13$3656$3701) (if (pair? v.13$3656$3701) ((lambda (v.14$3657$3703) ((lambda (w.15$3658$3705 id-ls17$3660$3706 id-ls-ls18$3661$3707) ((lambda (lp.16$3659$3708) (set! lp.16$3659$3708 (lambda (w.15$3658$3709 id-ls17$3660$3710 id-ls-ls18$3661$3711) (if (null? w.15$3658$3709) ((lambda (id$3712 id-ls$3713) ((lambda (v.24$3667$3714) (if (null? v.24$3667$3714) (cons (cons-source (rename$3637$3669 (quote let)) (cons-source (cons-source (cons-source (rename$3637$3669 (quote sk2)) (cons-source (cons-source (rename$3637$3669 (quote lambda)) (cons-source id$3712 (cons-source (append (map (lambda (sk$3716) sk$3716) sk$3691) (cons-source (append (map (lambda (i$3717) i$3717) i$3700) id$3712) (quote ()) (quote ((i ... id ...))))) (quote ()) (quote ((sk ... (i ... id ...))))) (quote ((id ...) (sk ... (i ... id ...))))) (quote (lambda (id ...) (sk ... (i ... id ...))))) (quote ()) (quote ((lambda (id ...) (sk ... (i ... id ...)))))) (quote (sk2 (lambda (id ...) (sk ... (i ... id ...)))))) (map (lambda (id$3718) (cons-source id$3718 (cons-source (cons-source (rename$3637$3669 (quote if)) (cons-source #f (cons-source #f (quote ()) (quote (#f))) (quote (#f #f))) (quote (if #f #f))) (quote ()) (quote ((if #f #f)))) (quote (id (if #f #f))))) id$3712) (quote ((sk2 (lambda (id ...) (sk ... (i ... id ...)))) (id (if #f #f)) ...))) (cons-source (cons-source (rename$3637$3669 (quote match-gen-or-step)) (cons-source v$3678 (cons-source p$3682 (cons-source g+s$3686 (cons-source (cons-source (rename$3637$3669 (quote match-drop-ids)) (cons-source (cons-source (rename$3637$3669 (quote sk2)) id$3712 (quote (sk2 id ...))) (quote ()) (quote ((sk2 id ...)))) (quote (match-drop-ids (sk2 id ...)))) (cons-source fk$3695 (cons-source i$3700 (quote ()) (quote ((i ...)))) (quote (fk (i ...)))) (quote ((match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (p g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (v p g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote ()) (quote ((match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...))))) (quote (((sk2 (lambda (id ...) (sk ... (i ... id ...)))) (id (if #f #f)) ...) (match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...))))) (quote (let ((sk2 (lambda (id ...) (sk ... (i ... id ...)))) (id (if #f #f)) ...) (match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...))))) #f) #f)) (cdr v.13$3656$3701))) (reverse id-ls17$3660$3710) (reverse id-ls-ls18$3661$3711)) (if (pair? w.15$3658$3709) ((lambda (v.19$3662$3720) (if (pair? v.19$3662$3720) ((lambda (v.20$3663$3722) ((lambda (id$3723) ((lambda (v.21$3664$3724) (if (pair? v.21$3664$3724) ((lambda (v.22$3665$3726) ((lambda (id-ls$3727) ((lambda (v.23$3666$3728) (if (null? v.23$3666$3728) (lp.16$3659$3708 (cdr w.15$3658$3709) (cons id$3723 id-ls17$3660$3710) (cons id-ls$3727 id-ls-ls18$3661$3711)) #f)) (cdr v.21$3664$3724))) v.22$3665$3726)) (car v.21$3664$3724)) #f)) (cdr v.19$3662$3720))) v.20$3663$3722)) (car v.19$3662$3720)) #f)) (car w.15$3658$3709)) #f)))) (lp.16$3659$3708 w.15$3658$3705 id-ls17$3660$3706 id-ls-ls18$3661$3707)) #f)) v.14$3657$3703 (quote ()) (quote ()))) (car v.13$3656$3701)) #f)) (cdr v.11$3654$3696))) v.12$3655$3698) #f)) (car v.11$3654$3696)) #f)) (cdr v.9$3652$3692))) v.10$3653$3694)) (car v.9$3652$3692)) #f)) (cdr v.7$3650$3687))) v.8$3651$3689) #f)) (car v.7$3650$3687)) #f)) (cdr v.5$3648$3683))) v.6$3649$3685)) (car v.5$3648$3683)) #f)) (cdr v.3$3646$3679))) v.4$3647$3681)) (car v.3$3646$3679)) #f)) (cdr v.1$3644$3675))) v.2$3645$3677)) (car v.1$3644$3675)) #f)) (cdr expr$3636$3668))))) (match-drop-first-arg lambda (expr$3591$3604 rename$3592$3605 compare$3593$3606) (car ((lambda (tmp$3608$3610) (if tmp$3608$3610 tmp$3608$3610 (cons (error "no expansion for" expr$3591$3604) #f))) ((lambda (v.1$3599$3611) (if (pair? v.1$3599$3611) ((lambda (v.2$3600$3613) ((lambda (arg$3614) ((lambda (v.3$3601$3615) (if (pair? v.3$3601$3615) ((lambda (v.4$3602$3617) ((lambda (expr$3618) ((lambda (v.5$3603$3619) (if (null? v.5$3603$3619) (cons expr$3618 #f) #f)) (cdr v.3$3601$3615))) v.4$3602$3617)) (car v.3$3601$3615)) #f)) (cdr v.1$3599$3611))) v.2$3600$3613)) (car v.1$3599$3611)) #f)) (cdr expr$3591$3604))))) (match-tuck-ids lambda (expr$3524$3541 rename$3525$3542 compare$3526$3543) (car ((lambda (tmp$3545$3547) (if tmp$3545$3547 tmp$3545$3547 (cons (error "no expansion for" expr$3524$3541) #f))) ((lambda (v.1$3532$3548) (if (pair? v.1$3532$3548) ((lambda (v.2$3533$3550) (if (pair? v.2$3533$3550) ((lambda (v.3$3534$3552) ((lambda (letish$3553) ((lambda (v.4$3535$3554) (if (pair? v.4$3535$3554) ((lambda (v.5$3536$3556) ((lambda (args$3557) ((lambda (v.6$3537$3558) (if (pair? v.6$3537$3558) ((lambda (v.7$3538$3560) (if (list? v.7$3538$3560) ((lambda (expr$3562) ((lambda (v.8$3539$3563) (if (null? v.8$3539$3563) ((lambda (v.9$3540$3565) (if (list? v.9$3540$3565) ((lambda (ids$3567) (cons (cons-source letish$3553 (cons-source args$3557 (cons-source (append (map (lambda (expr$3568) expr$3568) expr$3562) ids$3567) (quote ()) (quote ((expr ... ids ...)))) (quote (args (expr ... ids ...)))) (quote (letish args (expr ... ids ...)))) #f)) v.9$3540$3565) #f)) (cdr v.1$3532$3548)) #f)) (cdr v.6$3537$3558))) v.7$3538$3560) #f)) (car v.6$3537$3558)) #f)) (cdr v.4$3535$3554))) v.5$3536$3556)) (car v.4$3535$3554)) #f)) (cdr v.2$3533$3550))) v.3$3534$3552)) (car v.2$3533$3550)) #f)) (car v.1$3532$3548)) #f)) (cdr expr$3524$3541))))) (match-drop-ids lambda (expr$3486$3497 rename$3487$3498 compare$3488$3499) (car ((lambda (tmp$3501$3503) (if tmp$3501$3503 tmp$3501$3503 (cons (error "no expansion for" expr$3486$3497) #f))) ((lambda (v.1$3494$3504) (if (pair? v.1$3494$3504) ((lambda (v.2$3495$3506) ((lambda (expr$3507) ((lambda (v.3$3496$3508) (if (list? v.3$3496$3508) ((lambda (ids$3510) (cons expr$3507 #f)) v.3$3496$3508) #f)) (cdr v.1$3494$3504))) v.2$3495$3506)) (car v.1$3494$3504)) #f)) (cdr expr$3486$3497))))) (match-quasiquote-step lambda (expr$3396$3419 rename$3397$3420 compare$3398$3421) (car ((lambda (tmp$3423$3425) (if tmp$3423$3425 tmp$3423$3425 (cons (error "no expansion for" expr$3396$3419) #f))) ((lambda (v.1$3404$3426) (if (pair? v.1$3404$3426) ((lambda (v.2$3405$3428) ((lambda (x$3429) ((lambda (v.3$3406$3430) (if (pair? v.3$3406$3430) ((lambda (v.4$3407$3432) ((lambda (q$3433) ((lambda (v.5$3408$3434) (if (pair? v.5$3408$3434) ((lambda (v.6$3409$3436) ((lambda (g+s$3437) ((lambda (v.7$3410$3438) (if (pair? v.7$3410$3438) ((lambda (v.8$3411$3440) ((lambda (sk$3441) ((lambda (v.9$3412$3442) (if (pair? v.9$3412$3442) ((lambda (v.10$3413$3444) ((lambda (fk$3445) ((lambda (v.11$3414$3446) (if (pair? v.11$3414$3446) ((lambda (v.12$3415$3448) ((lambda (depth$3449) ((lambda (v.13$3416$3450) (if (pair? v.13$3416$3450) ((lambda (v.14$3417$3452) ((lambda (i$3453) ((lambda (v.15$3418$3454) (if (null? v.15$3418$3454) (cons (cons-source (rename$3397$3420 (quote match-quasiquote)) (cons-source x$3429 (cons-source q$3433 (cons-source g+s$3437 (cons-source sk$3441 (cons-source fk$3445 (cons-source i$3453 depth$3449 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote (q g+s sk fk i . depth))) (quote (x q g+s sk fk i . depth))) (quote (match-quasiquote x q g+s sk fk i . depth))) #f) #f)) (cdr v.13$3416$3450))) v.14$3417$3452)) (car v.13$3416$3450)) #f)) (cdr v.11$3414$3446))) v.12$3415$3448)) (car v.11$3414$3446)) #f)) (cdr v.9$3412$3442))) v.10$3413$3444)) (car v.9$3412$3442)) #f)) (cdr v.7$3410$3438))) v.8$3411$3440)) (car v.7$3410$3438)) #f)) (cdr v.5$3408$3434))) v.6$3409$3436)) (car v.5$3408$3434)) #f)) (cdr v.3$3406$3430))) v.4$3407$3432)) (car v.3$3406$3430)) #f)) (cdr v.1$3404$3426))) v.2$3405$3428)) (car v.1$3404$3426)) #f)) (cdr expr$3396$3419))))) (match-quasiquote lambda (expr$2747$2888 rename$2748$2889 compare$2749$2890) (car ((lambda (tmp$2892$2894) (if tmp$2892$2894 tmp$2892$2894 ((lambda (tmp$2896$2898) (if tmp$2896$2898 tmp$2896$2898 ((lambda (tmp$2900$2902) (if tmp$2900$2902 tmp$2900$2902 ((lambda (tmp$2904$2906) (if tmp$2904$2906 tmp$2904$2906 ((lambda (tmp$2908$2910) (if tmp$2908$2910 tmp$2908$2910 ((lambda (tmp$2912$2914) (if tmp$2912$2914 tmp$2912$2914 ((lambda (tmp$2916$2918) (if tmp$2916$2918 tmp$2916$2918 ((lambda (tmp$2920$2922) (if tmp$2920$2922 tmp$2920$2922 (cons (error "no expansion for" expr$2747$2888) #f))) ((lambda (v.121$2875$2923) (if (pair? v.121$2875$2923) ((lambda (v.122$2876$2925) ((lambda (v$2926) ((lambda (v.123$2877$2927) (if (pair? v.123$2877$2927) ((lambda (v.124$2878$2929) ((lambda (x$2930) ((lambda (v.125$2879$2931) (if (pair? v.125$2879$2931) ((lambda (v.126$2880$2933) ((lambda (g+s$2934) ((lambda (v.127$2881$2935) (if (pair? v.127$2881$2935) ((lambda (v.128$2882$2937) ((lambda (sk$2938) ((lambda (v.129$2883$2939) (if (pair? v.129$2883$2939) ((lambda (v.130$2884$2941) ((lambda (fk$2942) ((lambda (v.131$2885$2943) (if (pair? v.131$2885$2943) ((lambda (v.132$2886$2945) ((lambda (i$2946) ((lambda (v.133$2887$2947) ((lambda (depth$2948) (cons (cons-source (rename$2748$2889 (quote match-one)) (cons-source v$2926 (cons-source (cons-source (rename$2748$2889 (quote quote)) (cons-source x$2930 (quote ()) (quote (x))) (quote (quote x))) (cons-source g+s$2934 (cons-source sk$2938 (cons-source fk$2942 (cons-source i$2946 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((quote x) g+s sk fk i))) (quote (v (quote x) g+s sk fk i))) (quote (match-one v (quote x) g+s sk fk i))) #f)) v.133$2887$2947)) (cdr v.131$2885$2943))) v.132$2886$2945)) (car v.131$2885$2943)) #f)) (cdr v.129$2883$2939))) v.130$2884$2941)) (car v.129$2883$2939)) #f)) (cdr v.127$2881$2935))) v.128$2882$2937)) (car v.127$2881$2935)) #f)) (cdr v.125$2879$2931))) v.126$2880$2933)) (car v.125$2879$2931)) #f)) (cdr v.123$2877$2927))) v.124$2878$2929)) (car v.123$2877$2927)) #f)) (cdr v.121$2875$2923))) v.122$2876$2925)) (car v.121$2875$2923)) #f)) (cdr expr$2747$2888))))) ((lambda (v.107$2861$2949) (if (pair? v.107$2861$2949) ((lambda (v.108$2862$2951) ((lambda (v$2952) ((lambda (v.109$2863$2953) (if (pair? v.109$2863$2953) ((lambda (v.110$2864$2955) (if (vector? v.110$2864$2955) ((lambda (v.111$2865$2957) (if (list? v.111$2865$2957) ((lambda (elt$2959) ((lambda (v.112$2866$2960) (if (pair? v.112$2866$2960) ((lambda (v.113$2867$2962) ((lambda (g+s$2963) ((lambda (v.114$2868$2964) (if (pair? v.114$2868$2964) ((lambda (v.115$2869$2966) ((lambda (sk$2967) ((lambda (v.116$2870$2968) (if (pair? v.116$2870$2968) ((lambda (v.117$2871$2970) ((lambda (fk$2971) ((lambda (v.118$2872$2972) (if (pair? v.118$2872$2972) ((lambda (v.119$2873$2974) ((lambda (i$2975) ((lambda (v.120$2874$2976) ((lambda (depth$2977) (cons (cons-source (rename$2748$2889 (quote if)) (cons-source (cons-source (rename$2748$2889 (quote vector?)) (cons-source v$2952 (quote ()) (quote (v))) (quote (vector? v))) (cons-source (cons-source (rename$2748$2889 (quote let)) (cons-source (cons-source (cons-source (rename$2748$2889 (quote ls)) (cons-source (cons-source (rename$2748$2889 (quote vector->list)) (cons-source v$2952 (quote ()) (quote (v))) (quote (vector->list v))) (quote ()) (quote ((vector->list v)))) (quote (ls (vector->list v)))) (quote ()) (quote ((ls (vector->list v))))) (cons-source (cons-source (rename$2748$2889 (quote match-quasiquote)) (cons-source (rename$2748$2889 (quote ls)) (cons-source elt$2959 (cons-source g+s$2963 (cons-source sk$2967 (cons-source fk$2971 (cons-source i$2975 depth$2977 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote ((elt ...) g+s sk fk i . depth))) (quote (ls (elt ...) g+s sk fk i . depth))) (quote (match-quasiquote ls (elt ...) g+s sk fk i . depth))) (quote ()) (quote ((match-quasiquote ls (elt ...) g+s sk fk i . depth)))) (quote (((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)))) (quote (let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)))) (cons-source fk$2971 (quote ()) (quote (fk))) (quote ((let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)) fk))) (quote ((vector? v) (let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)) fk))) (quote (if (vector? v) (let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)) fk))) #f)) v.120$2874$2976)) (cdr v.118$2872$2972))) v.119$2873$2974)) (car v.118$2872$2972)) #f)) (cdr v.116$2870$2968))) v.117$2871$2970)) (car v.116$2870$2968)) #f)) (cdr v.114$2868$2964))) v.115$2869$2966)) (car v.114$2868$2964)) #f)) (cdr v.112$2866$2960))) v.113$2867$2962)) (car v.112$2866$2960)) #f)) (cdr v.109$2863$2953))) v.111$2865$2957) #f)) (vector->list v.110$2864$2955)) #f)) (car v.109$2863$2953)) #f)) (cdr v.107$2861$2949))) v.108$2862$2951)) (car v.107$2861$2949)) #f)) (cdr expr$2747$2888))))) ((lambda (v.92$2846$2978) (if (pair? v.92$2846$2978) ((lambda (v.93$2847$2980) ((lambda (v$2981) ((lambda (v.94$2848$2982) (if (pair? v.94$2848$2982) ((lambda (v.95$2849$2984) (if (pair? v.95$2849$2984) ((lambda (v.96$2850$2986) ((lambda (p$2987) ((lambda (v.97$2851$2988) ((lambda (q$2989) ((lambda (v.98$2852$2990) (if (pair? v.98$2852$2990) ((lambda (v.99$2853$2992) ((lambda (g+s$2993) ((lambda (v.100$2854$2994) (if (pair? v.100$2854$2994) ((lambda (v.101$2855$2996) ((lambda (sk$2997) ((lambda (v.102$2856$2998) (if (pair? v.102$2856$2998) ((lambda (v.103$2857$3000) ((lambda (fk$3001) ((lambda (v.104$2858$3002) (if (pair? v.104$2858$3002) ((lambda (v.105$2859$3004) ((lambda (i$3005) ((lambda (v.106$2860$3006) ((lambda (depth$3007) (cons (cons-source (rename$2748$2889 (quote if)) (cons-source (cons-source (rename$2748$2889 (quote pair?)) (cons-source v$2981 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$2748$2889 (quote let)) (cons-source (cons-source (cons-source (rename$2748$2889 (quote w)) (cons-source (cons-source (rename$2748$2889 (quote car)) (cons-source v$2981 (quote ()) (quote (v))) (quote (car v))) (quote ()) (quote ((car v)))) (quote (w (car v)))) (cons-source (cons-source (rename$2748$2889 (quote x)) (cons-source (cons-source (rename$2748$2889 (quote cdr)) (cons-source v$2981 (quote ()) (quote (v))) (quote (cdr v))) (quote ()) (quote ((cdr v)))) (quote (x (cdr v)))) (quote ()) (quote ((x (cdr v))))) (quote ((w (car v)) (x (cdr v))))) (cons-source (cons-source (rename$2748$2889 (quote match-quasiquote)) (cons-source (rename$2748$2889 (quote w)) (cons-source p$2987 (cons-source g+s$2993 (cons-source (cons-source (rename$2748$2889 (quote match-quasiquote-step)) (cons-source (rename$2748$2889 (quote x)) (cons-source q$2989 (cons-source g+s$2993 (cons-source sk$2997 (cons-source fk$3001 (cons-source depth$3007 (quote ()) (quote (depth))) (quote (fk depth))) (quote (sk fk depth))) (quote (g+s sk fk depth))) (quote (q g+s sk fk depth))) (quote (x q g+s sk fk depth))) (quote (match-quasiquote-step x q g+s sk fk depth))) (cons-source fk$3001 (cons-source i$3005 depth$3007 (quote (i . depth))) (quote (fk i . depth))) (quote ((match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote ()) (quote ((match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)))) (quote (((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)))) (quote (let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)))) (cons-source fk$3001 (quote ()) (quote (fk))) (quote ((let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)) fk))) (quote ((pair? v) (let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)) fk))) (quote (if (pair? v) (let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)) fk))) #f)) v.106$2860$3006)) (cdr v.104$2858$3002))) v.105$2859$3004)) (car v.104$2858$3002)) #f)) (cdr v.102$2856$2998))) v.103$2857$3000)) (car v.102$2856$2998)) #f)) (cdr v.100$2854$2994))) v.101$2855$2996)) (car v.100$2854$2994)) #f)) (cdr v.98$2852$2990))) v.99$2853$2992)) (car v.98$2852$2990)) #f)) (cdr v.94$2848$2982))) v.97$2851$2988)) (cdr v.95$2849$2984))) v.96$2850$2986)) (car v.95$2849$2984)) #f)) (car v.94$2848$2982)) #f)) (cdr v.92$2846$2978))) v.93$2847$2980)) (car v.92$2846$2978)) #f)) (cdr expr$2747$2888))))) ((lambda (v.73$2827$3008) (if (pair? v.73$2827$3008) ((lambda (v.74$2828$3010) ((lambda (v$3011) ((lambda (v.75$2829$3012) (if (pair? v.75$2829$3012) ((lambda (v.76$2830$3014) (if (pair? v.76$2830$3014) ((lambda (v.77$2831$3016) (if (compare$2749$2890 v.77$2831$3016 (rename$2748$2889 (quote unquote-splicing))) ((lambda (v.78$2832$3018) (if (pair? v.78$2832$3018) ((lambda (v.79$2833$3020) ((lambda (p$3021) ((lambda (v.80$2834$3022) (if (null? v.80$2834$3022) ((lambda (v.81$2835$3024) (if (pair? v.81$2835$3024) ((lambda (v.82$2836$3026) ((lambda (g+s$3027) ((lambda (v.83$2837$3028) (if (pair? v.83$2837$3028) ((lambda (v.84$2838$3030) ((lambda (sk$3031) ((lambda (v.85$2839$3032) (if (pair? v.85$2839$3032) ((lambda (v.86$2840$3034) ((lambda (fk$3035) ((lambda (v.87$2841$3036) (if (pair? v.87$2841$3036) ((lambda (v.88$2842$3038) ((lambda (i$3039) ((lambda (v.89$2843$3040) (if (pair? v.89$2843$3040) ((lambda (v.90$2844$3042) ((lambda (x$3043) ((lambda (v.91$2845$3044) ((lambda (depth$3045) (cons (cons-source (rename$2748$2889 (quote match-quasiquote)) (cons-source v$3011 (cons-source p$3021 (cons-source g+s$3027 (cons-source sk$3031 (cons-source fk$3035 (cons-source i$3039 depth$3045 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote (p g+s sk fk i . depth))) (quote (v p g+s sk fk i . depth))) (quote (match-quasiquote v p g+s sk fk i . depth))) #f)) v.91$2845$3044)) (cdr v.89$2843$3040))) v.90$2844$3042)) (car v.89$2843$3040)) #f)) (cdr v.87$2841$3036))) v.88$2842$3038)) (car v.87$2841$3036)) #f)) (cdr v.85$2839$3032))) v.86$2840$3034)) (car v.85$2839$3032)) #f)) (cdr v.83$2837$3028))) v.84$2838$3030)) (car v.83$2837$3028)) #f)) (cdr v.81$2835$3024))) v.82$2836$3026)) (car v.81$2835$3024)) #f)) (cdr v.75$2829$3012)) #f)) (cdr v.78$2832$3018))) v.79$2833$3020)) (car v.78$2832$3018)) #f)) (cdr v.76$2830$3014)) #f)) (car v.76$2830$3014)) #f)) (car v.75$2829$3012)) #f)) (cdr v.73$2827$3008))) v.74$2828$3010)) (car v.73$2827$3008)) #f)) (cdr expr$2747$2888))))) ((lambda (v.54$2808$3046) (if (pair? v.54$2808$3046) ((lambda (v.55$2809$3048) ((lambda (v$3049) ((lambda (v.56$2810$3050) (if (pair? v.56$2810$3050) ((lambda (v.57$2811$3052) (if (pair? v.57$2811$3052) ((lambda (v.58$2812$3054) (if (compare$2749$2890 v.58$2812$3054 (rename$2748$2889 (quote unquote))) ((lambda (v.59$2813$3056) (if (pair? v.59$2813$3056) ((lambda (v.60$2814$3058) ((lambda (p$3059) ((lambda (v.61$2815$3060) (if (null? v.61$2815$3060) ((lambda (v.62$2816$3062) (if (pair? v.62$2816$3062) ((lambda (v.63$2817$3064) ((lambda (g+s$3065) ((lambda (v.64$2818$3066) (if (pair? v.64$2818$3066) ((lambda (v.65$2819$3068) ((lambda (sk$3069) ((lambda (v.66$2820$3070) (if (pair? v.66$2820$3070) ((lambda (v.67$2821$3072) ((lambda (fk$3073) ((lambda (v.68$2822$3074) (if (pair? v.68$2822$3074) ((lambda (v.69$2823$3076) ((lambda (i$3077) ((lambda (v.70$2824$3078) (if (pair? v.70$2824$3078) ((lambda (v.71$2825$3080) ((lambda (x$3081) ((lambda (v.72$2826$3082) ((lambda (depth$3083) (cons (cons-source (rename$2748$2889 (quote match-quasiquote)) (cons-source v$3049 (cons-source p$3059 (cons-source g+s$3065 (cons-source sk$3069 (cons-source fk$3073 (cons-source i$3077 depth$3083 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote (p g+s sk fk i . depth))) (quote (v p g+s sk fk i . depth))) (quote (match-quasiquote v p g+s sk fk i . depth))) #f)) v.72$2826$3082)) (cdr v.70$2824$3078))) v.71$2825$3080)) (car v.70$2824$3078)) #f)) (cdr v.68$2822$3074))) v.69$2823$3076)) (car v.68$2822$3074)) #f)) (cdr v.66$2820$3070))) v.67$2821$3072)) (car v.66$2820$3070)) #f)) (cdr v.64$2818$3066))) v.65$2819$3068)) (car v.64$2818$3066)) #f)) (cdr v.62$2816$3062))) v.63$2817$3064)) (car v.62$2816$3062)) #f)) (cdr v.56$2810$3050)) #f)) (cdr v.59$2813$3056))) v.60$2814$3058)) (car v.59$2813$3056)) #f)) (cdr v.57$2811$3052)) #f)) (car v.57$2811$3052)) #f)) (car v.56$2810$3050)) #f)) (cdr v.54$2808$3046))) v.55$2809$3048)) (car v.54$2808$3046)) #f)) (cdr expr$2747$2888))))) ((lambda (v.37$2791$3084) (if (pair? v.37$2791$3084) ((lambda (v.38$2792$3086) ((lambda (v$3087) ((lambda (v.39$2793$3088) (if (pair? v.39$2793$3088) ((lambda (v.40$2794$3090) (if (pair? v.40$2794$3090) ((lambda (v.41$2795$3092) (if (compare$2749$2890 v.41$2795$3092 (rename$2748$2889 (quote quasiquote))) ((lambda (v.42$2796$3094) (if (pair? v.42$2796$3094) ((lambda (v.43$2797$3096) ((lambda (p$3097) ((lambda (v.44$2798$3098) (if (null? v.44$2798$3098) ((lambda (v.45$2799$3100) (if (pair? v.45$2799$3100) ((lambda (v.46$2800$3102) ((lambda (g+s$3103) ((lambda (v.47$2801$3104) (if (pair? v.47$2801$3104) ((lambda (v.48$2802$3106) ((lambda (sk$3107) ((lambda (v.49$2803$3108) (if (pair? v.49$2803$3108) ((lambda (v.50$2804$3110) ((lambda (fk$3111) ((lambda (v.51$2805$3112) (if (pair? v.51$2805$3112) ((lambda (v.52$2806$3114) ((lambda (i$3115) ((lambda (v.53$2807$3116) ((lambda (depth$3117) (cons (cons-source (rename$2748$2889 (quote match-quasiquote)) (cons-source v$3087 (cons-source p$3097 (cons-source g+s$3103 (cons-source sk$3107 (cons-source fk$3111 (cons-source i$3115 (cons-source #f depth$3117 (quote (#f . depth))) (quote (i #f . depth))) (quote (fk i #f . depth))) (quote (sk fk i #f . depth))) (quote (g+s sk fk i #f . depth))) (quote (p g+s sk fk i #f . depth))) (quote (v p g+s sk fk i #f . depth))) (quote (match-quasiquote v p g+s sk fk i #f . depth))) #f)) v.53$2807$3116)) (cdr v.51$2805$3112))) v.52$2806$3114)) (car v.51$2805$3112)) #f)) (cdr v.49$2803$3108))) v.50$2804$3110)) (car v.49$2803$3108)) #f)) (cdr v.47$2801$3104))) v.48$2802$3106)) (car v.47$2801$3104)) #f)) (cdr v.45$2799$3100))) v.46$2800$3102)) (car v.45$2799$3100)) #f)) (cdr v.39$2793$3088)) #f)) (cdr v.42$2796$3094))) v.43$2797$3096)) (car v.42$2796$3094)) #f)) (cdr v.40$2794$3090)) #f)) (car v.40$2794$3090)) #f)) (car v.39$2793$3088)) #f)) (cdr v.37$2791$3084))) v.38$2792$3086)) (car v.37$2791$3084)) #f)) (cdr expr$2747$2888))))) ((lambda (v.18$2772$3118) (if (pair? v.18$2772$3118) ((lambda (v.19$2773$3120) ((lambda (v$3121) ((lambda (v.20$2774$3122) (if (pair? v.20$2774$3122) ((lambda (v.21$2775$3124) (if (pair? v.21$2775$3124) ((lambda (v.22$2776$3126) (if (pair? v.22$2776$3126) ((lambda (v.23$2777$3128) (if (compare$2749$2890 v.23$2777$3128 (rename$2748$2889 (quote unquote-splicing))) ((lambda (v.24$2778$3130) (if (pair? v.24$2778$3130) ((lambda (v.25$2779$3132) ((lambda (p$3133) ((lambda (v.26$2780$3134) (if (null? v.26$2780$3134) ((lambda (v.27$2781$3136) ((lambda (rest$3137) ((lambda (v.28$2782$3138) (if (pair? v.28$2782$3138) ((lambda (v.29$2783$3140) ((lambda (g+s$3141) ((lambda (v.30$2784$3142) (if (pair? v.30$2784$3142) ((lambda (v.31$2785$3144) ((lambda (sk$3145) ((lambda (v.32$2786$3146) (if (pair? v.32$2786$3146) ((lambda (v.33$2787$3148) ((lambda (fk$3149) ((lambda (v.34$2788$3150) (if (pair? v.34$2788$3150) ((lambda (v.35$2789$3152) ((lambda (i$3153) ((lambda (v.36$2790$3154) (if (null? v.36$2790$3154) (cons (cons-source (rename$2748$2889 (quote match-extract-underscore)) (cons-source p$3133 (cons-source (cons-source (rename$2748$2889 (quote match-gen-ellipsis/qq)) (cons-source v$3121 (cons-source p$3133 (cons-source rest$3137 (cons-source g+s$3141 (cons-source sk$3145 (cons-source fk$3149 (cons-source i$3153 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (rest g+s sk fk i))) (quote (p rest g+s sk fk i))) (quote (v p rest g+s sk fk i))) (quote (match-gen-ellipsis/qq v p rest g+s sk fk i))) (cons-source i$3153 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-ellipsis/qq v p rest g+s sk fk i) i ()))) (quote (p (match-gen-ellipsis/qq v p rest g+s sk fk i) i ()))) (quote (match-extract-underscore p (match-gen-ellipsis/qq v p rest g+s sk fk i) i ()))) #f) #f)) (cdr v.34$2788$3150))) v.35$2789$3152)) (car v.34$2788$3150)) #f)) (cdr v.32$2786$3146))) v.33$2787$3148)) (car v.32$2786$3146)) #f)) (cdr v.30$2784$3142))) v.31$2785$3144)) (car v.30$2784$3142)) #f)) (cdr v.28$2782$3138))) v.29$2783$3140)) (car v.28$2782$3138)) #f)) (cdr v.20$2774$3122))) v.27$2781$3136)) (cdr v.21$2775$3124)) #f)) (cdr v.24$2778$3130))) v.25$2779$3132)) (car v.24$2778$3130)) #f)) (cdr v.22$2776$3126)) #f)) (car v.22$2776$3126)) #f)) (car v.21$2775$3124)) #f)) (car v.20$2774$3122)) #f)) (cdr v.18$2772$3118))) v.19$2773$3120)) (car v.18$2772$3118)) #f)) (cdr expr$2747$2888))))) ((lambda (v.1$2755$3156) (if (pair? v.1$2755$3156) ((lambda (v.2$2756$3158) ((lambda (v$3159) ((lambda (v.3$2757$3160) (if (pair? v.3$2757$3160) ((lambda (v.4$2758$3162) (if (pair? v.4$2758$3162) ((lambda (v.5$2759$3164) (if (compare$2749$2890 v.5$2759$3164 (rename$2748$2889 (quote unquote))) ((lambda (v.6$2760$3166) (if (pair? v.6$2760$3166) ((lambda (v.7$2761$3168) ((lambda (p$3169) ((lambda (v.8$2762$3170) (if (null? v.8$2762$3170) ((lambda (v.9$2763$3172) (if (pair? v.9$2763$3172) ((lambda (v.10$2764$3174) ((lambda (g+s$3175) ((lambda (v.11$2765$3176) (if (pair? v.11$2765$3176) ((lambda (v.12$2766$3178) ((lambda (sk$3179) ((lambda (v.13$2767$3180) (if (pair? v.13$2767$3180) ((lambda (v.14$2768$3182) ((lambda (fk$3183) ((lambda (v.15$2769$3184) (if (pair? v.15$2769$3184) ((lambda (v.16$2770$3186) ((lambda (i$3187) ((lambda (v.17$2771$3188) (if (null? v.17$2771$3188) (cons (cons-source (rename$2748$2889 (quote match-one)) (cons-source v$3159 (cons-source p$3169 (cons-source g+s$3175 (cons-source sk$3179 (cons-source fk$3183 (cons-source i$3187 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (p g+s sk fk i))) (quote (v p g+s sk fk i))) (quote (match-one v p g+s sk fk i))) #f) #f)) (cdr v.15$2769$3184))) v.16$2770$3186)) (car v.15$2769$3184)) #f)) (cdr v.13$2767$3180))) v.14$2768$3182)) (car v.13$2767$3180)) #f)) (cdr v.11$2765$3176))) v.12$2766$3178)) (car v.11$2765$3176)) #f)) (cdr v.9$2763$3172))) v.10$2764$3174)) (car v.9$2763$3172)) #f)) (cdr v.3$2757$3160)) #f)) (cdr v.6$2760$3166))) v.7$2761$3168)) (car v.6$2760$3166)) #f)) (cdr v.4$2758$3162)) #f)) (car v.4$2758$3162)) #f)) (car v.3$2757$3160)) #f)) (cdr v.1$2755$3156))) v.2$2756$3158)) (car v.1$2755$3156)) #f)) (cdr expr$2747$2888))))) (match-two lambda (expr$767$1184 rename$768$1185 compare$769$1186) (car ((lambda (tmp$1188$1190) (if tmp$1188$1190 tmp$1188$1190 ((lambda (tmp$1192$1194) (if tmp$1192$1194 tmp$1192$1194 ((lambda (tmp$1196$1198) (if tmp$1196$1198 tmp$1196$1198 ((lambda (tmp$1200$1202) (if tmp$1200$1202 tmp$1200$1202 ((lambda (tmp$1204$1206) (if tmp$1204$1206 tmp$1204$1206 ((lambda (tmp$1208$1210) (if tmp$1208$1210 tmp$1208$1210 ((lambda (tmp$1212$1214) (if tmp$1212$1214 tmp$1212$1214 ((lambda (tmp$1216$1218) (if tmp$1216$1218 tmp$1216$1218 ((lambda (tmp$1220$1222) (if tmp$1220$1222 tmp$1220$1222 ((lambda (tmp$1224$1226) (if tmp$1224$1226 tmp$1224$1226 ((lambda (tmp$1228$1230) (if tmp$1228$1230 tmp$1228$1230 ((lambda (tmp$1232$1234) (if tmp$1232$1234 tmp$1232$1234 ((lambda (tmp$1236$1238) (if tmp$1236$1238 tmp$1236$1238 ((lambda (tmp$1240$1242) (if tmp$1240$1242 tmp$1240$1242 ((lambda (tmp$1244$1246) (if tmp$1244$1246 tmp$1244$1246 ((lambda (tmp$1248$1250) (if tmp$1248$1250 tmp$1248$1250 ((lambda (tmp$1252$1254) (if tmp$1252$1254 tmp$1252$1254 ((lambda (tmp$1256$1258) (if tmp$1256$1258 tmp$1256$1258 ((lambda (tmp$1260$1262) (if tmp$1260$1262 tmp$1260$1262 ((lambda (tmp$1264$1266) (if tmp$1264$1266 tmp$1264$1266 ((lambda (tmp$1268$1270) (if tmp$1268$1270 tmp$1268$1270 ((lambda (tmp$1272$1274) (if tmp$1272$1274 tmp$1272$1274 ((lambda (tmp$1276$1278) (if tmp$1276$1278 tmp$1276$1278 ((lambda (tmp$1280$1282) (if tmp$1280$1282 tmp$1280$1282 ((lambda (tmp$1284$1286) (if tmp$1284$1286 tmp$1284$1286 ((lambda (tmp$1288$1290) (if tmp$1288$1290 tmp$1288$1290 (cons (error "no expansion for" expr$767$1184) #f))) ((lambda (v.397$1171$1291) (if (pair? v.397$1171$1291) ((lambda (v.398$1172$1293) ((lambda (v$1294) ((lambda (v.399$1173$1295) (if (pair? v.399$1173$1295) ((lambda (v.400$1174$1297) ((lambda (x$1298) ((lambda (v.401$1175$1299) (if (pair? v.401$1175$1299) ((lambda (v.402$1176$1301) ((lambda (g+s$1302) ((lambda (v.403$1177$1303) (if (pair? v.403$1177$1303) ((lambda (v.404$1178$1305) (if (list? v.404$1178$1305) ((lambda (sk$1307) ((lambda (v.405$1179$1308) (if (pair? v.405$1179$1308) ((lambda (v.406$1180$1310) ((lambda (fk$1311) ((lambda (v.407$1181$1312) (if (pair? v.407$1181$1312) ((lambda (v.408$1182$1314) (if (list? v.408$1182$1314) ((lambda (id$1316) ((lambda (v.409$1183$1317) (if (null? v.409$1183$1317) (cons (cons-source (rename$768$1185 (quote match-check-identifier)) (cons-source x$1298 (cons-source (cons-source (rename$768$1185 (quote let-syntax)) (cons-source (cons-source (cons-source (rename$768$1185 (quote new-sym?)) (cons-source (cons-source (rename$768$1185 (quote syntax-rules)) (cons-source id$1316 (cons-source (cons-source (cons-source (rename$768$1185 (quote new-sym?)) (cons-source x$1298 (cons-source (rename$768$1185 (quote sk2)) (cons-source (rename$768$1185 (quote fk2)) (quote ()) (quote (fk2))) (quote (sk2 fk2))) (quote (x sk2 fk2))) (quote (new-sym? x sk2 fk2))) (cons-source (rename$768$1185 (quote sk2)) (quote ()) (quote (sk2))) (quote ((new-sym? x sk2 fk2) sk2))) (cons-source (cons-source (cons-source (rename$768$1185 (quote new-sym?)) (cons-source (rename$768$1185 (quote y)) (cons-source (rename$768$1185 (quote sk2)) (cons-source (rename$768$1185 (quote fk2)) (quote ()) (quote (fk2))) (quote (sk2 fk2))) (quote (y sk2 fk2))) (quote (new-sym? y sk2 fk2))) (cons-source (rename$768$1185 (quote fk2)) (quote ()) (quote (fk2))) (quote ((new-sym? y sk2 fk2) fk2))) (quote ()) (quote (((new-sym? y sk2 fk2) fk2)))) (quote (((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (quote ((id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (quote (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (quote ()) (quote ((syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2))))) (quote (new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2))))) (quote ()) (quote ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))))) (cons-source (cons-source (rename$768$1185 (quote new-sym?)) (cons-source (rename$768$1185 (quote random-sym-to-match)) (cons-source (cons-source (rename$768$1185 (quote let)) (cons-source (cons-source (cons-source x$1298 (cons-source v$1294 (quote ()) (quote (v))) (quote (x v))) (quote ()) (quote ((x v)))) (cons-source (append (map (lambda (sk$1319) sk$1319) sk$1307) (cons-source (append (map (lambda (id$1320) id$1320) id$1316) (cons-source x$1298 (quote ()) (quote (x)))) (quote ()) (quote ((id ... x))))) (quote ()) (quote ((sk ... (id ... x))))) (quote (((x v)) (sk ... (id ... x))))) (quote (let ((x v)) (sk ... (id ... x))))) (cons-source (cons-source (rename$768$1185 (quote if)) (cons-source (cons-source (rename$768$1185 (quote equal?)) (cons-source v$1294 (cons-source x$1298 (quote ()) (quote (x))) (quote (v x))) (quote (equal? v x))) (cons-source (append (map (lambda (sk$1321) sk$1321) sk$1307) (cons-source id$1316 (quote ()) (quote ((id ...))))) (cons-source fk$1311 (quote ()) (quote (fk))) (quote ((sk ... (id ...)) fk))) (quote ((equal? v x) (sk ... (id ...)) fk))) (quote (if (equal? v x) (sk ... (id ...)) fk))) (quote ()) (quote ((if (equal? v x) (sk ... (id ...)) fk)))) (quote ((let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote ()) (quote ((new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))))) (quote (((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))))) (quote (let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))))) (cons-source (cons-source (rename$768$1185 (quote if)) (cons-source (cons-source (rename$768$1185 (quote equal?)) (cons-source v$1294 (cons-source x$1298 (quote ()) (quote (x))) (quote (v x))) (quote (equal? v x))) (cons-source (append (map (lambda (sk$1322) sk$1322) sk$1307) (cons-source id$1316 (quote ()) (quote ((id ...))))) (cons-source fk$1311 (quote ()) (quote (fk))) (quote ((sk ... (id ...)) fk))) (quote ((equal? v x) (sk ... (id ...)) fk))) (quote (if (equal? v x) (sk ... (id ...)) fk))) (quote ()) (quote ((if (equal? v x) (sk ... (id ...)) fk)))) (quote ((let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (x (let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (match-check-identifier x (let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))) (if (equal? v x) (sk ... (id ...)) fk)))) #f) #f)) (cdr v.407$1181$1312))) v.408$1182$1314) #f)) (car v.407$1181$1312)) #f)) (cdr v.405$1179$1308))) v.406$1180$1310)) (car v.405$1179$1308)) #f)) (cdr v.403$1177$1303))) v.404$1178$1305) #f)) (car v.403$1177$1303)) #f)) (cdr v.401$1175$1299))) v.402$1176$1301)) (car v.401$1175$1299)) #f)) (cdr v.399$1173$1295))) v.400$1174$1297)) (car v.399$1173$1295)) #f)) (cdr v.397$1171$1291))) v.398$1172$1293)) (car v.397$1171$1291)) #f)) (cdr expr$767$1184))))) ((lambda (v.389$1163$1323) (if (pair? v.389$1163$1323) ((lambda (v.390$1164$1325) ((lambda (v$1326) ((lambda (v.391$1165$1327) (if (pair? v.391$1165$1327) ((lambda (v.392$1166$1329) (if (vector? v.392$1166$1329) ((lambda (v.393$1167$1331) (if (list? v.393$1167$1331) ((lambda (p$1333) ((lambda (v.394$1168$1334) (if (pair? v.394$1168$1334) ((lambda (v.395$1169$1336) ((lambda (g+s$1337) ((lambda (v.396$1170$1338) ((lambda (x$1339) (cons (cons-source (rename$768$1185 (quote match-vector)) (cons-source v$1326 (cons-source 0 (cons-source (quote ()) (cons-source p$1333 x$1339 (quote ((p ...) . x))) (quote (() (p ...) . x))) (quote (0 () (p ...) . x))) (quote (v 0 () (p ...) . x))) (quote (match-vector v 0 () (p ...) . x))) #f)) v.396$1170$1338)) (cdr v.394$1168$1334))) v.395$1169$1336)) (car v.394$1168$1334)) #f)) (cdr v.391$1165$1327))) v.393$1167$1331) #f)) (vector->list v.392$1166$1329)) #f)) (car v.391$1165$1327)) #f)) (cdr v.389$1163$1323))) v.390$1164$1325)) (car v.389$1163$1323)) #f)) (cdr expr$767$1184))))) ((lambda (v.374$1148$1340) (if (pair? v.374$1148$1340) ((lambda (v.375$1149$1342) ((lambda (v$1343) ((lambda (v.376$1150$1344) (if (pair? v.376$1150$1344) ((lambda (v.377$1151$1346) (if (pair? v.377$1151$1346) ((lambda (v.378$1152$1348) ((lambda (p$1349) ((lambda (v.379$1153$1350) ((lambda (q$1351) ((lambda (v.380$1154$1352) (if (pair? v.380$1154$1352) ((lambda (v.381$1155$1354) ((lambda (g+s$1355) ((lambda (v.382$1156$1356) (if (pair? v.382$1156$1356) ((lambda (v.383$1157$1358) ((lambda (sk$1359) ((lambda (v.384$1158$1360) (if (pair? v.384$1158$1360) ((lambda (v.385$1159$1362) ((lambda (fk$1363) ((lambda (v.386$1160$1364) (if (pair? v.386$1160$1364) ((lambda (v.387$1161$1366) ((lambda (i$1367) ((lambda (v.388$1162$1368) (if (null? v.388$1162$1368) (cons (cons-source (rename$768$1185 (quote if)) (cons-source (cons-source (rename$768$1185 (quote pair?)) (cons-source v$1343 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$768$1185 (quote let)) (cons-source (cons-source (cons-source (rename$768$1185 (quote w)) (cons-source (cons-source (rename$768$1185 (quote car)) (cons-source v$1343 (quote ()) (quote (v))) (quote (car v))) (quote ()) (quote ((car v)))) (quote (w (car v)))) (cons-source (cons-source (rename$768$1185 (quote x)) (cons-source (cons-source (rename$768$1185 (quote cdr)) (cons-source v$1343 (quote ()) (quote (v))) (quote (cdr v))) (quote ()) (quote ((cdr v)))) (quote (x (cdr v)))) (quote ()) (quote ((x (cdr v))))) (quote ((w (car v)) (x (cdr v))))) (cons-source (cons-source (rename$768$1185 (quote match-one)) (cons-source (rename$768$1185 (quote w)) (cons-source p$1349 (cons-source (cons-source (cons-source (rename$768$1185 (quote car)) (cons-source v$1343 (quote ()) (quote (v))) (quote (car v))) (cons-source (cons-source (rename$768$1185 (quote set-car!)) (cons-source v$1343 (quote ()) (quote (v))) (quote (set-car! v))) (quote ()) (quote ((set-car! v)))) (quote ((car v) (set-car! v)))) (cons-source (cons-source (rename$768$1185 (quote match-one)) (cons-source (rename$768$1185 (quote x)) (cons-source q$1351 (cons-source (cons-source (cons-source (rename$768$1185 (quote cdr)) (cons-source v$1343 (quote ()) (quote (v))) (quote (cdr v))) (cons-source (cons-source (rename$768$1185 (quote set-cdr!)) (cons-source v$1343 (quote ()) (quote (v))) (quote (set-cdr! v))) (quote ()) (quote ((set-cdr! v)))) (quote ((cdr v) (set-cdr! v)))) (cons-source sk$1359 (cons-source fk$1363 (quote ()) (quote (fk))) (quote (sk fk))) (quote (((cdr v) (set-cdr! v)) sk fk))) (quote (q ((cdr v) (set-cdr! v)) sk fk))) (quote (x q ((cdr v) (set-cdr! v)) sk fk))) (quote (match-one x q ((cdr v) (set-cdr! v)) sk fk))) (cons-source fk$1363 (cons-source i$1367 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote ()) (quote ((match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)))) (quote (((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)))) (quote (let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)))) (cons-source fk$1363 (quote ()) (quote (fk))) (quote ((let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)) fk))) (quote ((pair? v) (let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)) fk))) (quote (if (pair? v) (let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)) fk))) #f) #f)) (cdr v.386$1160$1364))) v.387$1161$1366)) (car v.386$1160$1364)) #f)) (cdr v.384$1158$1360))) v.385$1159$1362)) (car v.384$1158$1360)) #f)) (cdr v.382$1156$1356))) v.383$1157$1358)) (car v.382$1156$1356)) #f)) (cdr v.380$1154$1352))) v.381$1155$1354)) (car v.380$1154$1352)) #f)) (cdr v.376$1150$1344))) v.379$1153$1350)) (cdr v.377$1151$1346))) v.378$1152$1348)) (car v.377$1151$1346)) #f)) (car v.376$1150$1344)) #f)) (cdr v.374$1148$1340))) v.375$1149$1342)) (car v.374$1148$1340)) #f)) (cdr expr$767$1184))))) ((lambda (v.357$1131$1370) (if (pair? v.357$1131$1370) ((lambda (v.358$1132$1372) ((lambda (v$1373) ((lambda (v.359$1133$1374) (if (pair? v.359$1133$1374) ((lambda (v.360$1134$1376) (if (pair? v.360$1134$1376) ((lambda (v.361$1135$1378) (if (compare$769$1186 v.361$1135$1378 (rename$768$1185 (quote object))) ((lambda (v.362$1136$1380) (if (pair? v.362$1136$1380) ((lambda (v.363$1137$1382) ((lambda (rec$1383) ((lambda (v.364$1138$1384) (if (list? v.364$1138$1384) ((lambda (p$1386) ((lambda (v.365$1139$1387) (if (pair? v.365$1139$1387) ((lambda (v.366$1140$1389) ((lambda (g+s$1390) ((lambda (v.367$1141$1391) (if (pair? v.367$1141$1391) ((lambda (v.368$1142$1393) ((lambda (sk$1394) ((lambda (v.369$1143$1395) (if (pair? v.369$1143$1395) ((lambda (v.370$1144$1397) ((lambda (fk$1398) ((lambda (v.371$1145$1399) (if (pair? v.371$1145$1399) ((lambda (v.372$1146$1401) ((lambda (i$1402) ((lambda (v.373$1147$1403) (if (null? v.373$1147$1403) (cons (cons-source (rename$768$1185 (quote if)) (cons-source (cons-source (rename$768$1185 (quote is-a?)) (cons-source v$1373 (cons-source rec$1383 (quote ()) (quote (rec))) (quote (v rec))) (quote (is-a? v rec))) (cons-source (cons-source (rename$768$1185 (quote match-record-named-refs)) (cons-source v$1373 (cons-source rec$1383 (cons-source p$1386 (cons-source g+s$1390 (cons-source sk$1394 (cons-source fk$1398 (cons-source i$1402 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (rec (p ...) g+s sk fk i))) (quote (v rec (p ...) g+s sk fk i))) (quote (match-record-named-refs v rec (p ...) g+s sk fk i))) (cons-source fk$1398 (quote ()) (quote (fk))) (quote ((match-record-named-refs v rec (p ...) g+s sk fk i) fk))) (quote ((is-a? v rec) (match-record-named-refs v rec (p ...) g+s sk fk i) fk))) (quote (if (is-a? v rec) (match-record-named-refs v rec (p ...) g+s sk fk i) fk))) #f) #f)) (cdr v.371$1145$1399))) v.372$1146$1401)) (car v.371$1145$1399)) #f)) (cdr v.369$1143$1395))) v.370$1144$1397)) (car v.369$1143$1395)) #f)) (cdr v.367$1141$1391))) v.368$1142$1393)) (car v.367$1141$1391)) #f)) (cdr v.365$1139$1387))) v.366$1140$1389)) (car v.365$1139$1387)) #f)) (cdr v.359$1133$1374))) v.364$1138$1384) #f)) (cdr v.362$1136$1380))) v.363$1137$1382)) (car v.362$1136$1380)) #f)) (cdr v.360$1134$1376)) #f)) (car v.360$1134$1376)) #f)) (car v.359$1133$1374)) #f)) (cdr v.357$1131$1370))) v.358$1132$1372)) (car v.357$1131$1370)) #f)) (cdr expr$767$1184))))) ((lambda (v.340$1114$1405) (if (pair? v.340$1114$1405) ((lambda (v.341$1115$1407) ((lambda (v$1408) ((lambda (v.342$1116$1409) (if (pair? v.342$1116$1409) ((lambda (v.343$1117$1411) (if (pair? v.343$1117$1411) ((lambda (v.344$1118$1413) (if (compare$769$1186 v.344$1118$1413 (rename$768$1185 (quote struct))) ((lambda (v.345$1119$1415) (if (pair? v.345$1119$1415) ((lambda (v.346$1120$1417) ((lambda (rec$1418) ((lambda (v.347$1121$1419) (if (list? v.347$1121$1419) ((lambda (p$1421) ((lambda (v.348$1122$1422) (if (pair? v.348$1122$1422) ((lambda (v.349$1123$1424) ((lambda (g+s$1425) ((lambda (v.350$1124$1426) (if (pair? v.350$1124$1426) ((lambda (v.351$1125$1428) ((lambda (sk$1429) ((lambda (v.352$1126$1430) (if (pair? v.352$1126$1430) ((lambda (v.353$1127$1432) ((lambda (fk$1433) ((lambda (v.354$1128$1434) (if (pair? v.354$1128$1434) ((lambda (v.355$1129$1436) ((lambda (i$1437) ((lambda (v.356$1130$1438) (if (null? v.356$1130$1438) (cons (cons-source (rename$768$1185 (quote if)) (cons-source (cons-source (rename$768$1185 (quote is-a?)) (cons-source v$1408 (cons-source rec$1418 (quote ()) (quote (rec))) (quote (v rec))) (quote (is-a? v rec))) (cons-source (cons-source (rename$768$1185 (quote match-record-refs)) (cons-source v$1408 (cons-source rec$1418 (cons-source 0 (cons-source p$1421 (cons-source g+s$1425 (cons-source sk$1429 (cons-source fk$1433 (cons-source i$1437 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (0 (p ...) g+s sk fk i))) (quote (rec 0 (p ...) g+s sk fk i))) (quote (v rec 0 (p ...) g+s sk fk i))) (quote (match-record-refs v rec 0 (p ...) g+s sk fk i))) (cons-source fk$1433 (quote ()) (quote (fk))) (quote ((match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote ((is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote (if (is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) #f) #f)) (cdr v.354$1128$1434))) v.355$1129$1436)) (car v.354$1128$1434)) #f)) (cdr v.352$1126$1430))) v.353$1127$1432)) (car v.352$1126$1430)) #f)) (cdr v.350$1124$1426))) v.351$1125$1428)) (car v.350$1124$1426)) #f)) (cdr v.348$1122$1422))) v.349$1123$1424)) (car v.348$1122$1422)) #f)) (cdr v.342$1116$1409))) v.347$1121$1419) #f)) (cdr v.345$1119$1415))) v.346$1120$1417)) (car v.345$1119$1415)) #f)) (cdr v.343$1117$1411)) #f)) (car v.343$1117$1411)) #f)) (car v.342$1116$1409)) #f)) (cdr v.340$1114$1405))) v.341$1115$1407)) (car v.340$1114$1405)) #f)) (cdr expr$767$1184))))) ((lambda (v.323$1097$1440) (if (pair? v.323$1097$1440) ((lambda (v.324$1098$1442) ((lambda (v$1443) ((lambda (v.325$1099$1444) (if (pair? v.325$1099$1444) ((lambda (v.326$1100$1446) (if (pair? v.326$1100$1446) ((lambda (v.327$1101$1448) (if (compare$769$1186 v.327$1101$1448 (rename$768$1185 (quote $))) ((lambda (v.328$1102$1450) (if (pair? v.328$1102$1450) ((lambda (v.329$1103$1452) ((lambda (rec$1453) ((lambda (v.330$1104$1454) (if (list? v.330$1104$1454) ((lambda (p$1456) ((lambda (v.331$1105$1457) (if (pair? v.331$1105$1457) ((lambda (v.332$1106$1459) ((lambda (g+s$1460) ((lambda (v.333$1107$1461) (if (pair? v.333$1107$1461) ((lambda (v.334$1108$1463) ((lambda (sk$1464) ((lambda (v.335$1109$1465) (if (pair? v.335$1109$1465) ((lambda (v.336$1110$1467) ((lambda (fk$1468) ((lambda (v.337$1111$1469) (if (pair? v.337$1111$1469) ((lambda (v.338$1112$1471) ((lambda (i$1472) ((lambda (v.339$1113$1473) (if (null? v.339$1113$1473) (cons (cons-source (rename$768$1185 (quote if)) (cons-source (cons-source (rename$768$1185 (quote is-a?)) (cons-source v$1443 (cons-source rec$1453 (quote ()) (quote (rec))) (quote (v rec))) (quote (is-a? v rec))) (cons-source (cons-source (rename$768$1185 (quote match-record-refs)) (cons-source v$1443 (cons-source rec$1453 (cons-source 0 (cons-source p$1456 (cons-source g+s$1460 (cons-source sk$1464 (cons-source fk$1468 (cons-source i$1472 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (0 (p ...) g+s sk fk i))) (quote (rec 0 (p ...) g+s sk fk i))) (quote (v rec 0 (p ...) g+s sk fk i))) (quote (match-record-refs v rec 0 (p ...) g+s sk fk i))) (cons-source fk$1468 (quote ()) (quote (fk))) (quote ((match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote ((is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote (if (is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) #f) #f)) (cdr v.337$1111$1469))) v.338$1112$1471)) (car v.337$1111$1469)) #f)) (cdr v.335$1109$1465))) v.336$1110$1467)) (car v.335$1109$1465)) #f)) (cdr v.333$1107$1461))) v.334$1108$1463)) (car v.333$1107$1461)) #f)) (cdr v.331$1105$1457))) v.332$1106$1459)) (car v.331$1105$1457)) #f)) (cdr v.325$1099$1444))) v.330$1104$1454) #f)) (cdr v.328$1102$1450))) v.329$1103$1452)) (car v.328$1102$1450)) #f)) (cdr v.326$1100$1446)) #f)) (car v.326$1100$1446)) #f)) (car v.325$1099$1444)) #f)) (cdr v.323$1097$1440))) v.324$1098$1442)) (car v.323$1097$1440)) #f)) (cdr expr$767$1184))))) ((lambda (v.302$1076$1475) (if (pair? v.302$1076$1475) ((lambda (v.303$1077$1477) ((lambda (v$1478) ((lambda (v.304$1078$1479) (if (pair? v.304$1078$1479) ((lambda (v.305$1079$1481) (if (pair? v.305$1079$1481) ((lambda (v.306$1080$1483) ((lambda (p$1484) ((lambda (v.307$1081$1485) (if (pair? v.307$1081$1485) ((lambda (v.308$1082$1487) (if (compare$769$1186 v.308$1082$1487 (rename$768$1185 (quote *..))) ((lambda (v.309$1083$1489) (if (pair? v.309$1083$1489) ((lambda (v.310$1084$1491) ((lambda (n$1492) ((lambda (v.311$1085$1493) (if (pair? v.311$1085$1493) ((lambda (v.312$1086$1495) ((lambda (m$1496) ((lambda (v.313$1087$1497) ((lambda (r$1498) ((lambda (v.314$1088$1499) (if (pair? v.314$1088$1499) ((lambda (v.315$1089$1501) ((lambda (g+s$1502) ((lambda (v.316$1090$1503) (if (pair? v.316$1090$1503) ((lambda (v.317$1091$1505) ((lambda (sk$1506) ((lambda (v.318$1092$1507) (if (pair? v.318$1092$1507) ((lambda (v.319$1093$1509) ((lambda (fk$1510) ((lambda (v.320$1094$1511) (if (pair? v.320$1094$1511) ((lambda (v.321$1095$1513) ((lambda (i$1514) ((lambda (v.322$1096$1515) (if (null? v.322$1096$1515) (cons (cons-source (rename$768$1185 (quote match-extract-underscore)) (cons-source p$1484 (cons-source (cons-source (rename$768$1185 (quote match-gen-ellipsis/range)) (cons-source n$1492 (cons-source m$1496 (cons-source v$1478 (cons-source p$1484 (cons-source r$1498 (cons-source g+s$1502 (cons-source sk$1506 (cons-source fk$1510 (cons-source i$1514 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (r g+s sk fk i))) (quote (p r g+s sk fk i))) (quote (v p r g+s sk fk i))) (quote (m v p r g+s sk fk i))) (quote (n m v p r g+s sk fk i))) (quote (match-gen-ellipsis/range n m v p r g+s sk fk i))) (cons-source i$1514 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-ellipsis/range n m v p r g+s sk fk i) i ()))) (quote (p (match-gen-ellipsis/range n m v p r g+s sk fk i) i ()))) (quote (match-extract-underscore p (match-gen-ellipsis/range n m v p r g+s sk fk i) i ()))) #f) #f)) (cdr v.320$1094$1511))) v.321$1095$1513)) (car v.320$1094$1511)) #f)) (cdr v.318$1092$1507))) v.319$1093$1509)) (car v.318$1092$1507)) #f)) (cdr v.316$1090$1503))) v.317$1091$1505)) (car v.316$1090$1503)) #f)) (cdr v.314$1088$1499))) v.315$1089$1501)) (car v.314$1088$1499)) #f)) (cdr v.304$1078$1479))) v.313$1087$1497)) (cdr v.311$1085$1493))) v.312$1086$1495)) (car v.311$1085$1493)) #f)) (cdr v.309$1083$1489))) v.310$1084$1491)) (car v.309$1083$1489)) #f)) (cdr v.307$1081$1485)) #f)) (car v.307$1081$1485)) #f)) (cdr v.305$1079$1481))) v.306$1080$1483)) (car v.305$1079$1481)) #f)) (car v.304$1078$1479)) #f)) (cdr v.302$1076$1475))) v.303$1077$1477)) (car v.302$1076$1475)) #f)) (cdr expr$767$1184))))) ((lambda (v.283$1057$1517) (if (pair? v.283$1057$1517) ((lambda (v.284$1058$1519) ((lambda (v$1520) ((lambda (v.285$1059$1521) (if (pair? v.285$1059$1521) ((lambda (v.286$1060$1523) (if (pair? v.286$1060$1523) ((lambda (v.287$1061$1525) ((lambda (p$1526) ((lambda (v.288$1062$1527) (if (pair? v.288$1062$1527) ((lambda (v.289$1063$1529) (if (compare$769$1186 v.289$1063$1529 (rename$768$1185 (quote =..))) ((lambda (v.290$1064$1531) (if (pair? v.290$1064$1531) ((lambda (v.291$1065$1533) ((lambda (n$1534) ((lambda (v.292$1066$1535) ((lambda (r$1536) ((lambda (v.293$1067$1537) (if (pair? v.293$1067$1537) ((lambda (v.294$1068$1539) ((lambda (g+s$1540) ((lambda (v.295$1069$1541) (if (pair? v.295$1069$1541) ((lambda (v.296$1070$1543) ((lambda (sk$1544) ((lambda (v.297$1071$1545) (if (pair? v.297$1071$1545) ((lambda (v.298$1072$1547) ((lambda (fk$1548) ((lambda (v.299$1073$1549) (if (pair? v.299$1073$1549) ((lambda (v.300$1074$1551) ((lambda (i$1552) ((lambda (v.301$1075$1553) (if (null? v.301$1075$1553) (cons (cons-source (rename$768$1185 (quote match-extract-underscore)) (cons-source p$1526 (cons-source (cons-source (rename$768$1185 (quote match-gen-ellipsis/range)) (cons-source n$1534 (cons-source n$1534 (cons-source v$1520 (cons-source p$1526 (cons-source r$1536 (cons-source g+s$1540 (cons-source sk$1544 (cons-source fk$1548 (cons-source i$1552 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (r g+s sk fk i))) (quote (p r g+s sk fk i))) (quote (v p r g+s sk fk i))) (quote (n v p r g+s sk fk i))) (quote (n n v p r g+s sk fk i))) (quote (match-gen-ellipsis/range n n v p r g+s sk fk i))) (cons-source i$1552 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-ellipsis/range n n v p r g+s sk fk i) i ()))) (quote (p (match-gen-ellipsis/range n n v p r g+s sk fk i) i ()))) (quote (match-extract-underscore p (match-gen-ellipsis/range n n v p r g+s sk fk i) i ()))) #f) #f)) (cdr v.299$1073$1549))) v.300$1074$1551)) (car v.299$1073$1549)) #f)) (cdr v.297$1071$1545))) v.298$1072$1547)) (car v.297$1071$1545)) #f)) (cdr v.295$1069$1541))) v.296$1070$1543)) (car v.295$1069$1541)) #f)) (cdr v.293$1067$1537))) v.294$1068$1539)) (car v.293$1067$1537)) #f)) (cdr v.285$1059$1521))) v.292$1066$1535)) (cdr v.290$1064$1531))) v.291$1065$1533)) (car v.290$1064$1531)) #f)) (cdr v.288$1062$1527)) #f)) (car v.288$1062$1527)) #f)) (cdr v.286$1060$1523))) v.287$1061$1525)) (car v.286$1060$1523)) #f)) (car v.285$1059$1521)) #f)) (cdr v.283$1057$1517))) v.284$1058$1519)) (car v.283$1057$1517)) #f)) (cdr expr$767$1184))))) ((lambda (v.266$1040$1555) (if (pair? v.266$1040$1555) ((lambda (v.267$1041$1557) ((lambda (v$1558) ((lambda (v.268$1042$1559) (if (pair? v.268$1042$1559) ((lambda (v.269$1043$1561) (if (pair? v.269$1043$1561) ((lambda (v.270$1044$1563) ((lambda (p$1564) ((lambda (v.271$1045$1565) (if (pair? v.271$1045$1565) ((lambda (v.272$1046$1567) (if (compare$769$1186 v.272$1046$1567 (rename$768$1185 (quote **1))) ((lambda (v.273$1047$1569) (if (null? v.273$1047$1569) ((lambda (v.274$1048$1571) (if (pair? v.274$1048$1571) ((lambda (v.275$1049$1573) ((lambda (g+s$1574) ((lambda (v.276$1050$1575) (if (pair? v.276$1050$1575) ((lambda (v.277$1051$1577) ((lambda (sk$1578) ((lambda (v.278$1052$1579) (if (pair? v.278$1052$1579) ((lambda (v.279$1053$1581) ((lambda (fk$1582) ((lambda (v.280$1054$1583) (if (pair? v.280$1054$1583) ((lambda (v.281$1055$1585) ((lambda (i$1586) ((lambda (v.282$1056$1587) (if (null? v.282$1056$1587) (cons (cons-source (rename$768$1185 (quote if)) (cons-source (cons-source (rename$768$1185 (quote pair?)) (cons-source v$1558 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$768$1185 (quote match-one)) (cons-source v$1558 (cons-source (cons-source p$1564 (cons-source (rename$768$1185 (quote ___)) (quote ()) (quote (___))) (quote (p ___))) (cons-source g+s$1574 (cons-source sk$1578 (cons-source fk$1582 (cons-source i$1586 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ___) g+s sk fk i))) (quote (v (p ___) g+s sk fk i))) (quote (match-one v (p ___) g+s sk fk i))) (cons-source fk$1582 (quote ()) (quote (fk))) (quote ((match-one v (p ___) g+s sk fk i) fk))) (quote ((pair? v) (match-one v (p ___) g+s sk fk i) fk))) (quote (if (pair? v) (match-one v (p ___) g+s sk fk i) fk))) #f) #f)) (cdr v.280$1054$1583))) v.281$1055$1585)) (car v.280$1054$1583)) #f)) (cdr v.278$1052$1579))) v.279$1053$1581)) (car v.278$1052$1579)) #f)) (cdr v.276$1050$1575))) v.277$1051$1577)) (car v.276$1050$1575)) #f)) (cdr v.274$1048$1571))) v.275$1049$1573)) (car v.274$1048$1571)) #f)) (cdr v.268$1042$1559)) #f)) (cdr v.271$1045$1565)) #f)) (car v.271$1045$1565)) #f)) (cdr v.269$1043$1561))) v.270$1044$1563)) (car v.269$1043$1561)) #f)) (car v.268$1042$1559)) #f)) (cdr v.266$1040$1555))) v.267$1041$1557)) (car v.266$1040$1555)) #f)) (cdr expr$767$1184))))) ((lambda (v.249$1023$1589) (if (pair? v.249$1023$1589) ((lambda (v.250$1024$1591) ((lambda (v$1592) ((lambda (v.251$1025$1593) (if (pair? v.251$1025$1593) ((lambda (v.252$1026$1595) (if (pair? v.252$1026$1595) ((lambda (v.253$1027$1597) ((lambda (p$1598) ((lambda (v.254$1028$1599) (if (pair? v.254$1028$1599) ((lambda (v.255$1029$1601) (if (compare$769$1186 v.255$1029$1601 (rename$768$1185 (quote ***))) ((lambda (v.256$1030$1603) ((lambda (q$1604) ((lambda (v.257$1031$1605) (if (pair? v.257$1031$1605) ((lambda (v.258$1032$1607) ((lambda (g+s$1608) ((lambda (v.259$1033$1609) (if (pair? v.259$1033$1609) ((lambda (v.260$1034$1611) ((lambda (sk$1612) ((lambda (v.261$1035$1613) (if (pair? v.261$1035$1613) ((lambda (v.262$1036$1615) ((lambda (fk$1616) ((lambda (v.263$1037$1617) (if (pair? v.263$1037$1617) ((lambda (v.264$1038$1619) ((lambda (i$1620) ((lambda (v.265$1039$1621) (if (null? v.265$1039$1621) (cons (cons-source (rename$768$1185 (quote match-syntax-error)) (cons-source "invalid use of ***" (cons-source (cons-source p$1598 (cons-source (rename$768$1185 (quote ***)) q$1604 (quote (*** . q))) (quote (p *** . q))) (quote ()) (quote ((p *** . q)))) (quote ("invalid use of ***" (p *** . q)))) (quote (match-syntax-error "invalid use of ***" (p *** . q)))) #f) #f)) (cdr v.263$1037$1617))) v.264$1038$1619)) (car v.263$1037$1617)) #f)) (cdr v.261$1035$1613))) v.262$1036$1615)) (car v.261$1035$1613)) #f)) (cdr v.259$1033$1609))) v.260$1034$1611)) (car v.259$1033$1609)) #f)) (cdr v.257$1031$1605))) v.258$1032$1607)) (car v.257$1031$1605)) #f)) (cdr v.251$1025$1593))) v.256$1030$1603)) (cdr v.254$1028$1599)) #f)) (car v.254$1028$1599)) #f)) (cdr v.252$1026$1595))) v.253$1027$1597)) (car v.252$1026$1595)) #f)) (car v.251$1025$1593)) #f)) (cdr v.249$1023$1589))) v.250$1024$1591)) (car v.249$1023$1589)) #f)) (cdr expr$767$1184))))) ((lambda (v.230$1004$1623) (if (pair? v.230$1004$1623) ((lambda (v.231$1005$1625) ((lambda (v$1626) ((lambda (v.232$1006$1627) (if (pair? v.232$1006$1627) ((lambda (v.233$1007$1629) (if (pair? v.233$1007$1629) ((lambda (v.234$1008$1631) ((lambda (p$1632) ((lambda (v.235$1009$1633) (if (pair? v.235$1009$1633) ((lambda (v.236$1010$1635) (if (compare$769$1186 v.236$1010$1635 (rename$768$1185 (quote ***))) ((lambda (v.237$1011$1637) (if (pair? v.237$1011$1637) ((lambda (v.238$1012$1639) ((lambda (q$1640) ((lambda (v.239$1013$1641) (if (null? v.239$1013$1641) ((lambda (v.240$1014$1643) (if (pair? v.240$1014$1643) ((lambda (v.241$1015$1645) ((lambda (g+s$1646) ((lambda (v.242$1016$1647) (if (pair? v.242$1016$1647) ((lambda (v.243$1017$1649) ((lambda (sk$1650) ((lambda (v.244$1018$1651) (if (pair? v.244$1018$1651) ((lambda (v.245$1019$1653) ((lambda (fk$1654) ((lambda (v.246$1020$1655) (if (pair? v.246$1020$1655) ((lambda (v.247$1021$1657) ((lambda (i$1658) ((lambda (v.248$1022$1659) (if (null? v.248$1022$1659) (cons (cons-source (rename$768$1185 (quote match-extract-underscore)) (cons-source p$1632 (cons-source (cons-source (rename$768$1185 (quote match-gen-search)) (cons-source v$1626 (cons-source p$1632 (cons-source q$1640 (cons-source g+s$1646 (cons-source sk$1650 (cons-source fk$1654 (cons-source i$1658 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (q g+s sk fk i))) (quote (p q g+s sk fk i))) (quote (v p q g+s sk fk i))) (quote (match-gen-search v p q g+s sk fk i))) (cons-source i$1658 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-search v p q g+s sk fk i) i ()))) (quote (p (match-gen-search v p q g+s sk fk i) i ()))) (quote (match-extract-underscore p (match-gen-search v p q g+s sk fk i) i ()))) #f) #f)) (cdr v.246$1020$1655))) v.247$1021$1657)) (car v.246$1020$1655)) #f)) (cdr v.244$1018$1651))) v.245$1019$1653)) (car v.244$1018$1651)) #f)) (cdr v.242$1016$1647))) v.243$1017$1649)) (car v.242$1016$1647)) #f)) (cdr v.240$1014$1643))) v.241$1015$1645)) (car v.240$1014$1643)) #f)) (cdr v.232$1006$1627)) #f)) (cdr v.237$1011$1637))) v.238$1012$1639)) (car v.237$1011$1637)) #f)) (cdr v.235$1009$1633)) #f)) (car v.235$1009$1633)) #f)) (cdr v.233$1007$1629))) v.234$1008$1631)) (car v.233$1007$1629)) #f)) (car v.232$1006$1627)) #f)) (cdr v.230$1004$1623))) v.231$1005$1625)) (car v.230$1004$1623)) #f)) (cdr expr$767$1184))))) ((lambda (v.215$989$1661) (if (pair? v.215$989$1661) ((lambda (v.216$990$1663) ((lambda (v$1664) ((lambda (v.217$991$1665) (if (pair? v.217$991$1665) ((lambda (v.218$992$1667) (if (pair? v.218$992$1667) ((lambda (v.219$993$1669) ((lambda (p$1670) ((lambda (v.220$994$1671) (if (null? v.220$994$1671) ((lambda (v.221$995$1673) (if (pair? v.221$995$1673) ((lambda (v.222$996$1675) ((lambda (g+s$1676) ((lambda (v.223$997$1677) (if (pair? v.223$997$1677) ((lambda (v.224$998$1679) ((lambda (sk$1680) ((lambda (v.225$999$1681) (if (pair? v.225$999$1681) ((lambda (v.226$1000$1683) ((lambda (fk$1684) ((lambda (v.227$1001$1685) (if (pair? v.227$1001$1685) ((lambda (v.228$1002$1687) ((lambda (i$1688) ((lambda (v.229$1003$1689) (if (null? v.229$1003$1689) (cons (cons-source (rename$768$1185 (quote if)) (cons-source (cons-source (rename$768$1185 (quote and)) (cons-source (cons-source (rename$768$1185 (quote pair?)) (cons-source v$1664 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$768$1185 (quote null?)) (cons-source (cons-source (rename$768$1185 (quote cdr)) (cons-source v$1664 (quote ()) (quote (v))) (quote (cdr v))) (quote ()) (quote ((cdr v)))) (quote (null? (cdr v)))) (quote ()) (quote ((null? (cdr v))))) (quote ((pair? v) (null? (cdr v))))) (quote (and (pair? v) (null? (cdr v))))) (cons-source (cons-source (rename$768$1185 (quote let)) (cons-source (cons-source (cons-source (rename$768$1185 (quote w)) (cons-source (cons-source (rename$768$1185 (quote car)) (cons-source v$1664 (quote ()) (quote (v))) (quote (car v))) (quote ()) (quote ((car v)))) (quote (w (car v)))) (quote ()) (quote ((w (car v))))) (cons-source (cons-source (rename$768$1185 (quote match-one)) (cons-source (rename$768$1185 (quote w)) (cons-source p$1670 (cons-source (cons-source (cons-source (rename$768$1185 (quote car)) (cons-source v$1664 (quote ()) (quote (v))) (quote (car v))) (cons-source (cons-source (rename$768$1185 (quote set-car!)) (cons-source v$1664 (quote ()) (quote (v))) (quote (set-car! v))) (quote ()) (quote ((set-car! v)))) (quote ((car v) (set-car! v)))) (cons-source sk$1680 (cons-source fk$1684 (cons-source i$1688 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (((car v) (set-car! v)) sk fk i))) (quote (p ((car v) (set-car! v)) sk fk i))) (quote (w p ((car v) (set-car! v)) sk fk i))) (quote (match-one w p ((car v) (set-car! v)) sk fk i))) (quote ()) (quote ((match-one w p ((car v) (set-car! v)) sk fk i)))) (quote (((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)))) (quote (let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)))) (cons-source fk$1684 (quote ()) (quote (fk))) (quote ((let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)) fk))) (quote ((and (pair? v) (null? (cdr v))) (let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)) fk))) (quote (if (and (pair? v) (null? (cdr v))) (let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)) fk))) #f) #f)) (cdr v.227$1001$1685))) v.228$1002$1687)) (car v.227$1001$1685)) #f)) (cdr v.225$999$1681))) v.226$1000$1683)) (car v.225$999$1681)) #f)) (cdr v.223$997$1677))) v.224$998$1679)) (car v.223$997$1677)) #f)) (cdr v.221$995$1673))) v.222$996$1675)) (car v.221$995$1673)) #f)) (cdr v.217$991$1665)) #f)) (cdr v.218$992$1667))) v.219$993$1669)) (car v.218$992$1667)) #f)) (car v.217$991$1665)) #f)) (cdr v.215$989$1661))) v.216$990$1663)) (car v.215$989$1661)) #f)) (cdr expr$767$1184))))) ((lambda (v.198$972$1691) (if (pair? v.198$972$1691) ((lambda (v.199$973$1693) ((lambda (v$1694) ((lambda (v.200$974$1695) (if (pair? v.200$974$1695) ((lambda (v.201$975$1697) (if (pair? v.201$975$1697) ((lambda (v.202$976$1699) ((lambda (p$1700) ((lambda (v.203$977$1701) (if (pair? v.203$977$1701) ((lambda (v.204$978$1703) (if (compare$769$1186 v.204$978$1703 (rename$768$1185 (quote ___))) ((lambda (v.205$979$1705) ((lambda (r$1706) ((lambda (v.206$980$1707) (if (pair? v.206$980$1707) ((lambda (v.207$981$1709) ((lambda (g+s$1710) ((lambda (v.208$982$1711) (if (pair? v.208$982$1711) ((lambda (v.209$983$1713) ((lambda (sk$1714) ((lambda (v.210$984$1715) (if (pair? v.210$984$1715) ((lambda (v.211$985$1717) ((lambda (fk$1718) ((lambda (v.212$986$1719) (if (pair? v.212$986$1719) ((lambda (v.213$987$1721) ((lambda (i$1722) ((lambda (v.214$988$1723) (if (null? v.214$988$1723) (cons (cons-source (rename$768$1185 (quote match-extract-underscore)) (cons-source p$1700 (cons-source (cons-source (rename$768$1185 (quote match-gen-ellipsis)) (cons-source v$1694 (cons-source p$1700 (cons-source r$1706 (cons-source g+s$1710 (cons-source sk$1714 (cons-source fk$1718 (cons-source i$1722 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (r g+s sk fk i))) (quote (p r g+s sk fk i))) (quote (v p r g+s sk fk i))) (quote (match-gen-ellipsis v p r g+s sk fk i))) (cons-source i$1722 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (p (match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (match-extract-underscore p (match-gen-ellipsis v p r g+s sk fk i) i ()))) #f) #f)) (cdr v.212$986$1719))) v.213$987$1721)) (car v.212$986$1719)) #f)) (cdr v.210$984$1715))) v.211$985$1717)) (car v.210$984$1715)) #f)) (cdr v.208$982$1711))) v.209$983$1713)) (car v.208$982$1711)) #f)) (cdr v.206$980$1707))) v.207$981$1709)) (car v.206$980$1707)) #f)) (cdr v.200$974$1695))) v.205$979$1705)) (cdr v.203$977$1701)) #f)) (car v.203$977$1701)) #f)) (cdr v.201$975$1697))) v.202$976$1699)) (car v.201$975$1697)) #f)) (car v.200$974$1695)) #f)) (cdr v.198$972$1691))) v.199$973$1693)) (car v.198$972$1691)) #f)) (cdr expr$767$1184))))) ((lambda (v.187$961$1725) (if (pair? v.187$961$1725) ((lambda (v.188$962$1727) ((lambda (v$1728) ((lambda (v.189$963$1729) (if (pair? v.189$963$1729) ((lambda (v.190$964$1731) (if (pair? v.190$964$1731) ((lambda (v.191$965$1733) (if (compare$769$1186 v.191$965$1733 (rename$768$1185 (quote =))) ((lambda (v.192$966$1735) (if (pair? v.192$966$1735) ((lambda (v.193$967$1737) ((lambda (proc$1738) ((lambda (v.194$968$1739) (if (pair? v.194$968$1739) ((lambda (v.195$969$1741) ((lambda (p$1742) ((lambda (v.196$970$1743) (if (null? v.196$970$1743) ((lambda (v.197$971$1745) ((lambda (x$1746) (cons (cons-source (rename$768$1185 (quote let)) (cons-source (cons-source (cons-source (rename$768$1185 (quote w)) (cons-source (cons-source proc$1738 (cons-source v$1728 (quote ()) (quote (v))) (quote (proc v))) (quote ()) (quote ((proc v)))) (quote (w (proc v)))) (quote ()) (quote ((w (proc v))))) (cons-source (cons-source (rename$768$1185 (quote match-one)) (cons-source (rename$768$1185 (quote w)) (cons-source p$1742 x$1746 (quote (p . x))) (quote (w p . x))) (quote (match-one w p . x))) (quote ()) (quote ((match-one w p . x)))) (quote (((w (proc v))) (match-one w p . x)))) (quote (let ((w (proc v))) (match-one w p . x)))) #f)) v.197$971$1745)) (cdr v.189$963$1729)) #f)) (cdr v.194$968$1739))) v.195$969$1741)) (car v.194$968$1739)) #f)) (cdr v.192$966$1735))) v.193$967$1737)) (car v.192$966$1735)) #f)) (cdr v.190$964$1731)) #f)) (car v.190$964$1731)) #f)) (car v.189$963$1729)) #f)) (cdr v.187$961$1725))) v.188$962$1727)) (car v.187$961$1725)) #f)) (cdr expr$767$1184))))) ((lambda (v.170$944$1747) (if (pair? v.170$944$1747) ((lambda (v.171$945$1749) ((lambda (v$1750) ((lambda (v.172$946$1751) (if (pair? v.172$946$1751) ((lambda (v.173$947$1753) (if (pair? v.173$947$1753) ((lambda (v.174$948$1755) (if (compare$769$1186 v.174$948$1755 (rename$768$1185 (quote ?))) ((lambda (v.175$949$1757) (if (pair? v.175$949$1757) ((lambda (v.176$950$1759) ((lambda (pred$1760) ((lambda (v.177$951$1761) ((lambda (p$1762) ((lambda (v.178$952$1763) (if (pair? v.178$952$1763) ((lambda (v.179$953$1765) ((lambda (g+s$1766) ((lambda (v.180$954$1767) (if (pair? v.180$954$1767) ((lambda (v.181$955$1769) ((lambda (sk$1770) ((lambda (v.182$956$1771) (if (pair? v.182$956$1771) ((lambda (v.183$957$1773) ((lambda (fk$1774) ((lambda (v.184$958$1775) (if (pair? v.184$958$1775) ((lambda (v.185$959$1777) ((lambda (i$1778) ((lambda (v.186$960$1779) (if (null? v.186$960$1779) (cons (cons-source (rename$768$1185 (quote if)) (cons-source (cons-source pred$1760 (cons-source v$1750 (quote ()) (quote (v))) (quote (pred v))) (cons-source (cons-source (rename$768$1185 (quote match-one)) (cons-source v$1750 (cons-source (cons-source (rename$768$1185 (quote and)) p$1762 (quote (and . p))) (cons-source g+s$1766 (cons-source sk$1770 (cons-source fk$1774 (cons-source i$1778 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((and . p) g+s sk fk i))) (quote (v (and . p) g+s sk fk i))) (quote (match-one v (and . p) g+s sk fk i))) (cons-source fk$1774 (quote ()) (quote (fk))) (quote ((match-one v (and . p) g+s sk fk i) fk))) (quote ((pred v) (match-one v (and . p) g+s sk fk i) fk))) (quote (if (pred v) (match-one v (and . p) g+s sk fk i) fk))) #f) #f)) (cdr v.184$958$1775))) v.185$959$1777)) (car v.184$958$1775)) #f)) (cdr v.182$956$1771))) v.183$957$1773)) (car v.182$956$1771)) #f)) (cdr v.180$954$1767))) v.181$955$1769)) (car v.180$954$1767)) #f)) (cdr v.178$952$1763))) v.179$953$1765)) (car v.178$952$1763)) #f)) (cdr v.172$946$1751))) v.177$951$1761)) (cdr v.175$949$1757))) v.176$950$1759)) (car v.175$949$1757)) #f)) (cdr v.173$947$1753)) #f)) (car v.173$947$1753)) #f)) (car v.172$946$1751)) #f)) (cdr v.170$944$1747))) v.171$945$1749)) (car v.170$944$1747)) #f)) (cdr expr$767$1184))))) ((lambda (v.149$923$1781) (if (pair? v.149$923$1781) ((lambda (v.150$924$1783) ((lambda (v$1784) ((lambda (v.151$925$1785) (if (pair? v.151$925$1785) ((lambda (v.152$926$1787) (if (pair? v.152$926$1787) ((lambda (v.153$927$1789) (if (compare$769$1186 v.153$927$1789 (rename$768$1185 (quote set!))) ((lambda (v.154$928$1791) (if (pair? v.154$928$1791) ((lambda (v.155$929$1793) ((lambda (setter$1794) ((lambda (v.156$930$1795) (if (null? v.156$930$1795) ((lambda (v.157$931$1797) (if (pair? v.157$931$1797) ((lambda (v.158$932$1799) (if (pair? v.158$932$1799) ((lambda (v.159$933$1801) ((lambda (g$1802) ((lambda (v.160$934$1803) (if (pair? v.160$934$1803) ((lambda (v.161$935$1805) (if (list? v.161$935$1805) ((lambda (s$1807) ((lambda (v.162$936$1808) (if (null? v.162$936$1808) ((lambda (v.163$937$1810) (if (pair? v.163$937$1810) ((lambda (v.164$938$1812) (if (list? v.164$938$1812) ((lambda (sk$1814) ((lambda (v.165$939$1815) (if (pair? v.165$939$1815) ((lambda (v.166$940$1817) ((lambda (fk$1818) ((lambda (v.167$941$1819) (if (pair? v.167$941$1819) ((lambda (v.168$942$1821) ((lambda (i$1822) ((lambda (v.169$943$1823) (if (null? v.169$943$1823) (cons (cons-source (rename$768$1185 (quote let)) (cons-source (cons-source (cons-source setter$1794 (cons-source (cons-source (rename$768$1185 (quote lambda)) (cons-source (cons-source (rename$768$1185 (quote x)) (quote ()) (quote (x))) (cons-source (append (map (lambda (s$1825) s$1825) s$1807) (cons-source (rename$768$1185 (quote x)) (quote ()) (quote (x)))) (quote ()) (quote ((s ... x)))) (quote ((x) (s ... x)))) (quote (lambda (x) (s ... x)))) (quote ()) (quote ((lambda (x) (s ... x))))) (quote (setter (lambda (x) (s ... x))))) (quote ()) (quote ((setter (lambda (x) (s ... x)))))) (cons-source (append (map (lambda (sk$1826) sk$1826) sk$1814) (cons-source i$1822 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((setter (lambda (x) (s ... x)))) (sk ... i)))) (quote (let ((setter (lambda (x) (s ... x)))) (sk ... i)))) #f) #f)) (cdr v.167$941$1819))) v.168$942$1821)) (car v.167$941$1819)) #f)) (cdr v.165$939$1815))) v.166$940$1817)) (car v.165$939$1815)) #f)) (cdr v.163$937$1810))) v.164$938$1812) #f)) (car v.163$937$1810)) #f)) (cdr v.157$931$1797)) #f)) (cdr v.160$934$1803))) v.161$935$1805) #f)) (car v.160$934$1803)) #f)) (cdr v.158$932$1799))) v.159$933$1801)) (car v.158$932$1799)) #f)) (car v.157$931$1797)) #f)) (cdr v.151$925$1785)) #f)) (cdr v.154$928$1791))) v.155$929$1793)) (car v.154$928$1791)) #f)) (cdr v.152$926$1787)) #f)) (car v.152$926$1787)) #f)) (car v.151$925$1785)) #f)) (cdr v.149$923$1781))) v.150$924$1783)) (car v.149$923$1781)) #f)) (cdr expr$767$1184))))) ((lambda (v.128$902$1827) (if (pair? v.128$902$1827) ((lambda (v.129$903$1829) ((lambda (v$1830) ((lambda (v.130$904$1831) (if (pair? v.130$904$1831) ((lambda (v.131$905$1833) (if (pair? v.131$905$1833) ((lambda (v.132$906$1835) (if (compare$769$1186 v.132$906$1835 (rename$768$1185 (quote get!))) ((lambda (v.133$907$1837) (if (pair? v.133$907$1837) ((lambda (v.134$908$1839) ((lambda (getter$1840) ((lambda (v.135$909$1841) (if (null? v.135$909$1841) ((lambda (v.136$910$1843) (if (pair? v.136$910$1843) ((lambda (v.137$911$1845) (if (pair? v.137$911$1845) ((lambda (v.138$912$1847) ((lambda (g$1848) ((lambda (v.139$913$1849) (if (pair? v.139$913$1849) ((lambda (v.140$914$1851) ((lambda (s$1852) ((lambda (v.141$915$1853) (if (null? v.141$915$1853) ((lambda (v.142$916$1855) (if (pair? v.142$916$1855) ((lambda (v.143$917$1857) (if (list? v.143$917$1857) ((lambda (sk$1859) ((lambda (v.144$918$1860) (if (pair? v.144$918$1860) ((lambda (v.145$919$1862) ((lambda (fk$1863) ((lambda (v.146$920$1864) (if (pair? v.146$920$1864) ((lambda (v.147$921$1866) ((lambda (i$1867) ((lambda (v.148$922$1868) (if (null? v.148$922$1868) (cons (cons-source (rename$768$1185 (quote let)) (cons-source (cons-source (cons-source getter$1840 (cons-source (cons-source (rename$768$1185 (quote lambda)) (cons-source (quote ()) (cons-source g$1848 (quote ()) (quote (g))) (quote (() g))) (quote (lambda () g))) (quote ()) (quote ((lambda () g)))) (quote (getter (lambda () g)))) (quote ()) (quote ((getter (lambda () g))))) (cons-source (append (map (lambda (sk$1870) sk$1870) sk$1859) (cons-source i$1867 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((getter (lambda () g))) (sk ... i)))) (quote (let ((getter (lambda () g))) (sk ... i)))) #f) #f)) (cdr v.146$920$1864))) v.147$921$1866)) (car v.146$920$1864)) #f)) (cdr v.144$918$1860))) v.145$919$1862)) (car v.144$918$1860)) #f)) (cdr v.142$916$1855))) v.143$917$1857) #f)) (car v.142$916$1855)) #f)) (cdr v.136$910$1843)) #f)) (cdr v.139$913$1849))) v.140$914$1851)) (car v.139$913$1849)) #f)) (cdr v.137$911$1845))) v.138$912$1847)) (car v.137$911$1845)) #f)) (car v.136$910$1843)) #f)) (cdr v.130$904$1831)) #f)) (cdr v.133$907$1837))) v.134$908$1839)) (car v.133$907$1837)) #f)) (cdr v.131$905$1833)) #f)) (car v.131$905$1833)) #f)) (car v.130$904$1831)) #f)) (cdr v.128$902$1827))) v.129$903$1829)) (car v.128$902$1827)) #f)) (cdr expr$767$1184))))) ((lambda (v.111$885$1871) (if (pair? v.111$885$1871) ((lambda (v.112$886$1873) ((lambda (v$1874) ((lambda (v.113$887$1875) (if (pair? v.113$887$1875) ((lambda (v.114$888$1877) (if (pair? v.114$888$1877) ((lambda (v.115$889$1879) (if (compare$769$1186 v.115$889$1879 (rename$768$1185 (quote not))) ((lambda (v.116$890$1881) (if (pair? v.116$890$1881) ((lambda (v.117$891$1883) ((lambda (p$1884) ((lambda (v.118$892$1885) (if (null? v.118$892$1885) ((lambda (v.119$893$1887) (if (pair? v.119$893$1887) ((lambda (v.120$894$1889) ((lambda (g+s$1890) ((lambda (v.121$895$1891) (if (pair? v.121$895$1891) ((lambda (v.122$896$1893) (if (list? v.122$896$1893) ((lambda (sk$1895) ((lambda (v.123$897$1896) (if (pair? v.123$897$1896) ((lambda (v.124$898$1898) ((lambda (fk$1899) ((lambda (v.125$899$1900) (if (pair? v.125$899$1900) ((lambda (v.126$900$1902) ((lambda (i$1903) ((lambda (v.127$901$1904) (if (null? v.127$901$1904) (cons (cons-source (rename$768$1185 (quote match-one)) (cons-source v$1874 (cons-source p$1884 (cons-source g+s$1890 (cons-source (cons-source (rename$768$1185 (quote match-drop-ids)) (cons-source fk$1899 (quote ()) (quote (fk))) (quote (match-drop-ids fk))) (cons-source (append (map (lambda (sk$1906) sk$1906) sk$1895) (cons-source i$1903 (quote ()) (quote (i)))) (cons-source i$1903 (quote ()) (quote (i))) (quote ((sk ... i) i))) (quote ((match-drop-ids fk) (sk ... i) i))) (quote (g+s (match-drop-ids fk) (sk ... i) i))) (quote (p g+s (match-drop-ids fk) (sk ... i) i))) (quote (v p g+s (match-drop-ids fk) (sk ... i) i))) (quote (match-one v p g+s (match-drop-ids fk) (sk ... i) i))) #f) #f)) (cdr v.125$899$1900))) v.126$900$1902)) (car v.125$899$1900)) #f)) (cdr v.123$897$1896))) v.124$898$1898)) (car v.123$897$1896)) #f)) (cdr v.121$895$1891))) v.122$896$1893) #f)) (car v.121$895$1891)) #f)) (cdr v.119$893$1887))) v.120$894$1889)) (car v.119$893$1887)) #f)) (cdr v.113$887$1875)) #f)) (cdr v.116$890$1881))) v.117$891$1883)) (car v.116$890$1881)) #f)) (cdr v.114$888$1877)) #f)) (car v.114$888$1877)) #f)) (car v.113$887$1875)) #f)) (cdr v.111$885$1871))) v.112$886$1873)) (car v.111$885$1871)) #f)) (cdr expr$767$1184))))) ((lambda (v.96$870$1907) (if (pair? v.96$870$1907) ((lambda (v.97$871$1909) ((lambda (v$1910) ((lambda (v.98$872$1911) (if (pair? v.98$872$1911) ((lambda (v.99$873$1913) (if (pair? v.99$873$1913) ((lambda (v.100$874$1915) (if (compare$769$1186 v.100$874$1915 (rename$768$1185 (quote or))) ((lambda (v.101$875$1917) (if (list? v.101$875$1917) ((lambda (p$1919) ((lambda (v.102$876$1920) (if (pair? v.102$876$1920) ((lambda (v.103$877$1922) ((lambda (g+s$1923) ((lambda (v.104$878$1924) (if (pair? v.104$878$1924) ((lambda (v.105$879$1926) ((lambda (sk$1927) ((lambda (v.106$880$1928) (if (pair? v.106$880$1928) ((lambda (v.107$881$1930) ((lambda (fk$1931) ((lambda (v.108$882$1932) (if (pair? v.108$882$1932) ((lambda (v.109$883$1934) ((lambda (i$1935) ((lambda (v.110$884$1936) (if (null? v.110$884$1936) (cons (cons-source (rename$768$1185 (quote match-extract-underscore)) (cons-source (cons-source (rename$768$1185 (quote or)) p$1919 (quote (or p ...))) (cons-source (cons-source (rename$768$1185 (quote match-gen-or)) (cons-source v$1910 (cons-source p$1919 (cons-source g+s$1923 (cons-source sk$1927 (cons-source fk$1931 (cons-source i$1935 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (v (p ...) g+s sk fk i))) (quote (match-gen-or v (p ...) g+s sk fk i))) (cons-source i$1935 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-or v (p ...) g+s sk fk i) i ()))) (quote ((or p ...) (match-gen-or v (p ...) g+s sk fk i) i ()))) (quote (match-extract-underscore (or p ...) (match-gen-or v (p ...) g+s sk fk i) i ()))) #f) #f)) (cdr v.108$882$1932))) v.109$883$1934)) (car v.108$882$1932)) #f)) (cdr v.106$880$1928))) v.107$881$1930)) (car v.106$880$1928)) #f)) (cdr v.104$878$1924))) v.105$879$1926)) (car v.104$878$1924)) #f)) (cdr v.102$876$1920))) v.103$877$1922)) (car v.102$876$1920)) #f)) (cdr v.98$872$1911))) v.101$875$1917) #f)) (cdr v.99$873$1913)) #f)) (car v.99$873$1913)) #f)) (car v.98$872$1911)) #f)) (cdr v.96$870$1907))) v.97$871$1909)) (car v.96$870$1907)) #f)) (cdr expr$767$1184))))) ((lambda (v.87$861$1938) (if (pair? v.87$861$1938) ((lambda (v.88$862$1940) ((lambda (v$1941) ((lambda (v.89$863$1942) (if (pair? v.89$863$1942) ((lambda (v.90$864$1944) (if (pair? v.90$864$1944) ((lambda (v.91$865$1946) (if (compare$769$1186 v.91$865$1946 (rename$768$1185 (quote or))) ((lambda (v.92$866$1948) (if (pair? v.92$866$1948) ((lambda (v.93$867$1950) ((lambda (p$1951) ((lambda (v.94$868$1952) (if (null? v.94$868$1952) ((lambda (v.95$869$1954) ((lambda (x$1955) (cons (cons-source (rename$768$1185 (quote match-one)) (cons-source v$1941 (cons-source p$1951 x$1955 (quote (p . x))) (quote (v p . x))) (quote (match-one v p . x))) #f)) v.95$869$1954)) (cdr v.89$863$1942)) #f)) (cdr v.92$866$1948))) v.93$867$1950)) (car v.92$866$1948)) #f)) (cdr v.90$864$1944)) #f)) (car v.90$864$1944)) #f)) (car v.89$863$1942)) #f)) (cdr v.87$861$1938))) v.88$862$1940)) (car v.87$861$1938)) #f)) (cdr expr$767$1184))))) ((lambda (v.72$846$1956) (if (pair? v.72$846$1956) ((lambda (v.73$847$1958) ((lambda (v$1959) ((lambda (v.74$848$1960) (if (pair? v.74$848$1960) ((lambda (v.75$849$1962) (if (pair? v.75$849$1962) ((lambda (v.76$850$1964) (if (compare$769$1186 v.76$850$1964 (rename$768$1185 (quote or))) ((lambda (v.77$851$1966) (if (null? v.77$851$1966) ((lambda (v.78$852$1968) (if (pair? v.78$852$1968) ((lambda (v.79$853$1970) ((lambda (g+s$1971) ((lambda (v.80$854$1972) (if (pair? v.80$854$1972) ((lambda (v.81$855$1974) ((lambda (sk$1975) ((lambda (v.82$856$1976) (if (pair? v.82$856$1976) ((lambda (v.83$857$1978) ((lambda (fk$1979) ((lambda (v.84$858$1980) (if (pair? v.84$858$1980) ((lambda (v.85$859$1982) ((lambda (i$1983) ((lambda (v.86$860$1984) (if (null? v.86$860$1984) (cons fk$1979 #f) #f)) (cdr v.84$858$1980))) v.85$859$1982)) (car v.84$858$1980)) #f)) (cdr v.82$856$1976))) v.83$857$1978)) (car v.82$856$1976)) #f)) (cdr v.80$854$1972))) v.81$855$1974)) (car v.80$854$1972)) #f)) (cdr v.78$852$1968))) v.79$853$1970)) (car v.78$852$1968)) #f)) (cdr v.74$848$1960)) #f)) (cdr v.75$849$1962)) #f)) (car v.75$849$1962)) #f)) (car v.74$848$1960)) #f)) (cdr v.72$846$1956))) v.73$847$1958)) (car v.72$846$1956)) #f)) (cdr expr$767$1184))))) ((lambda (v.55$829$1986) (if (pair? v.55$829$1986) ((lambda (v.56$830$1988) ((lambda (v$1989) ((lambda (v.57$831$1990) (if (pair? v.57$831$1990) ((lambda (v.58$832$1992) (if (pair? v.58$832$1992) ((lambda (v.59$833$1994) (if (compare$769$1186 v.59$833$1994 (rename$768$1185 (quote and))) ((lambda (v.60$834$1996) (if (pair? v.60$834$1996) ((lambda (v.61$835$1998) ((lambda (p$1999) ((lambda (v.62$836$2000) (if (list? v.62$836$2000) ((lambda (q$2002) ((lambda (v.63$837$2003) (if (pair? v.63$837$2003) ((lambda (v.64$838$2005) ((lambda (g+s$2006) ((lambda (v.65$839$2007) (if (pair? v.65$839$2007) ((lambda (v.66$840$2009) ((lambda (sk$2010) ((lambda (v.67$841$2011) (if (pair? v.67$841$2011) ((lambda (v.68$842$2013) ((lambda (fk$2014) ((lambda (v.69$843$2015) (if (pair? v.69$843$2015) ((lambda (v.70$844$2017) ((lambda (i$2018) ((lambda (v.71$845$2019) (if (null? v.71$845$2019) (cons (cons-source (rename$768$1185 (quote match-one)) (cons-source v$1989 (cons-source p$1999 (cons-source g+s$2006 (cons-source (cons-source (rename$768$1185 (quote match-one)) (cons-source v$1989 (cons-source (cons-source (rename$768$1185 (quote and)) q$2002 (quote (and q ...))) (cons-source g+s$2006 (cons-source sk$2010 (cons-source fk$2014 (quote ()) (quote (fk))) (quote (sk fk))) (quote (g+s sk fk))) (quote ((and q ...) g+s sk fk))) (quote (v (and q ...) g+s sk fk))) (quote (match-one v (and q ...) g+s sk fk))) (cons-source fk$2014 (cons-source i$2018 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-one v (and q ...) g+s sk fk) fk i))) (quote (g+s (match-one v (and q ...) g+s sk fk) fk i))) (quote (p g+s (match-one v (and q ...) g+s sk fk) fk i))) (quote (v p g+s (match-one v (and q ...) g+s sk fk) fk i))) (quote (match-one v p g+s (match-one v (and q ...) g+s sk fk) fk i))) #f) #f)) (cdr v.69$843$2015))) v.70$844$2017)) (car v.69$843$2015)) #f)) (cdr v.67$841$2011))) v.68$842$2013)) (car v.67$841$2011)) #f)) (cdr v.65$839$2007))) v.66$840$2009)) (car v.65$839$2007)) #f)) (cdr v.63$837$2003))) v.64$838$2005)) (car v.63$837$2003)) #f)) (cdr v.57$831$1990))) v.62$836$2000) #f)) (cdr v.60$834$1996))) v.61$835$1998)) (car v.60$834$1996)) #f)) (cdr v.58$832$1992)) #f)) (car v.58$832$1992)) #f)) (car v.57$831$1990)) #f)) (cdr v.55$829$1986))) v.56$830$1988)) (car v.55$829$1986)) #f)) (cdr expr$767$1184))))) ((lambda (v.40$814$2021) (if (pair? v.40$814$2021) ((lambda (v.41$815$2023) ((lambda (v$2024) ((lambda (v.42$816$2025) (if (pair? v.42$816$2025) ((lambda (v.43$817$2027) (if (pair? v.43$817$2027) ((lambda (v.44$818$2029) (if (compare$769$1186 v.44$818$2029 (rename$768$1185 (quote and))) ((lambda (v.45$819$2031) (if (null? v.45$819$2031) ((lambda (v.46$820$2033) (if (pair? v.46$820$2033) ((lambda (v.47$821$2035) ((lambda (g+s$2036) ((lambda (v.48$822$2037) (if (pair? v.48$822$2037) ((lambda (v.49$823$2039) (if (list? v.49$823$2039) ((lambda (sk$2041) ((lambda (v.50$824$2042) (if (pair? v.50$824$2042) ((lambda (v.51$825$2044) ((lambda (fk$2045) ((lambda (v.52$826$2046) (if (pair? v.52$826$2046) ((lambda (v.53$827$2048) ((lambda (i$2049) ((lambda (v.54$828$2050) (if (null? v.54$828$2050) (cons (append (map (lambda (sk$2052) sk$2052) sk$2041) (cons-source i$2049 (quote ()) (quote (i)))) #f) #f)) (cdr v.52$826$2046))) v.53$827$2048)) (car v.52$826$2046)) #f)) (cdr v.50$824$2042))) v.51$825$2044)) (car v.50$824$2042)) #f)) (cdr v.48$822$2037))) v.49$823$2039) #f)) (car v.48$822$2037)) #f)) (cdr v.46$820$2033))) v.47$821$2035)) (car v.46$820$2033)) #f)) (cdr v.42$816$2025)) #f)) (cdr v.43$817$2027)) #f)) (car v.43$817$2027)) #f)) (car v.42$816$2025)) #f)) (cdr v.40$814$2021))) v.41$815$2023)) (car v.40$814$2021)) #f)) (cdr expr$767$1184))))) ((lambda (v.31$805$2053) (if (pair? v.31$805$2053) ((lambda (v.32$806$2055) ((lambda (v$2056) ((lambda (v.33$807$2057) (if (pair? v.33$807$2057) ((lambda (v.34$808$2059) (if (pair? v.34$808$2059) ((lambda (v.35$809$2061) (if (compare$769$1186 v.35$809$2061 (rename$768$1185 (quote quasiquote))) ((lambda (v.36$810$2063) (if (pair? v.36$810$2063) ((lambda (v.37$811$2065) ((lambda (p$2066) ((lambda (v.38$812$2067) (if (null? v.38$812$2067) ((lambda (v.39$813$2069) ((lambda (x$2070) (cons (cons-source (rename$768$1185 (quote match-quasiquote)) (cons-source v$2056 (cons-source p$2066 x$2070 (quote (p . x))) (quote (v p . x))) (quote (match-quasiquote v p . x))) #f)) v.39$813$2069)) (cdr v.33$807$2057)) #f)) (cdr v.36$810$2063))) v.37$811$2065)) (car v.36$810$2063)) #f)) (cdr v.34$808$2059)) #f)) (car v.34$808$2059)) #f)) (car v.33$807$2057)) #f)) (cdr v.31$805$2053))) v.32$806$2055)) (car v.31$805$2053)) #f)) (cdr expr$767$1184))))) ((lambda (v.14$788$2071) (if (pair? v.14$788$2071) ((lambda (v.15$789$2073) ((lambda (v$2074) ((lambda (v.16$790$2075) (if (pair? v.16$790$2075) ((lambda (v.17$791$2077) (if (pair? v.17$791$2077) ((lambda (v.18$792$2079) (if (compare$769$1186 v.18$792$2079 (rename$768$1185 (quote quote))) ((lambda (v.19$793$2081) (if (pair? v.19$793$2081) ((lambda (v.20$794$2083) ((lambda (p$2084) ((lambda (v.21$795$2085) (if (null? v.21$795$2085) ((lambda (v.22$796$2087) (if (pair? v.22$796$2087) ((lambda (v.23$797$2089) ((lambda (g+s$2090) ((lambda (v.24$798$2091) (if (pair? v.24$798$2091) ((lambda (v.25$799$2093) (if (list? v.25$799$2093) ((lambda (sk$2095) ((lambda (v.26$800$2096) (if (pair? v.26$800$2096) ((lambda (v.27$801$2098) ((lambda (fk$2099) ((lambda (v.28$802$2100) (if (pair? v.28$802$2100) ((lambda (v.29$803$2102) ((lambda (i$2103) ((lambda (v.30$804$2104) (if (null? v.30$804$2104) (cons (cons-source (rename$768$1185 (quote if)) (cons-source (cons-source (rename$768$1185 (quote equal?)) (cons-source v$2074 (cons-source (cons-source (rename$768$1185 (quote quote)) (cons-source p$2084 (quote ()) (quote (p))) (quote (quote p))) (quote ()) (quote ((quote p)))) (quote (v (quote p)))) (quote (equal? v (quote p)))) (cons-source (append (map (lambda (sk$2106) sk$2106) sk$2095) (cons-source i$2103 (quote ()) (quote (i)))) (cons-source fk$2099 (quote ()) (quote (fk))) (quote ((sk ... i) fk))) (quote ((equal? v (quote p)) (sk ... i) fk))) (quote (if (equal? v (quote p)) (sk ... i) fk))) #f) #f)) (cdr v.28$802$2100))) v.29$803$2102)) (car v.28$802$2100)) #f)) (cdr v.26$800$2096))) v.27$801$2098)) (car v.26$800$2096)) #f)) (cdr v.24$798$2091))) v.25$799$2093) #f)) (car v.24$798$2091)) #f)) (cdr v.22$796$2087))) v.23$797$2089)) (car v.22$796$2087)) #f)) (cdr v.16$790$2075)) #f)) (cdr v.19$793$2081))) v.20$794$2083)) (car v.19$793$2081)) #f)) (cdr v.17$791$2077)) #f)) (car v.17$791$2077)) #f)) (car v.16$790$2075)) #f)) (cdr v.14$788$2071))) v.15$789$2073)) (car v.14$788$2071)) #f)) (cdr expr$767$1184))))) ((lambda (v.1$775$2107) (if (pair? v.1$775$2107) ((lambda (v.2$776$2109) ((lambda (v$2110) ((lambda (v.3$777$2111) (if (pair? v.3$777$2111) ((lambda (v.4$778$2113) (if (null? v.4$778$2113) ((lambda (v.5$779$2115) (if (pair? v.5$779$2115) ((lambda (v.6$780$2117) ((lambda (g+s$2118) ((lambda (v.7$781$2119) (if (pair? v.7$781$2119) ((lambda (v.8$782$2121) (if (list? v.8$782$2121) ((lambda (sk$2123) ((lambda (v.9$783$2124) (if (pair? v.9$783$2124) ((lambda (v.10$784$2126) ((lambda (fk$2127) ((lambda (v.11$785$2128) (if (pair? v.11$785$2128) ((lambda (v.12$786$2130) ((lambda (i$2131) ((lambda (v.13$787$2132) (if (null? v.13$787$2132) (cons (cons-source (rename$768$1185 (quote if)) (cons-source (cons-source (rename$768$1185 (quote null?)) (cons-source v$2110 (quote ()) (quote (v))) (quote (null? v))) (cons-source (append (map (lambda (sk$2134) sk$2134) sk$2123) (cons-source i$2131 (quote ()) (quote (i)))) (cons-source fk$2127 (quote ()) (quote (fk))) (quote ((sk ... i) fk))) (quote ((null? v) (sk ... i) fk))) (quote (if (null? v) (sk ... i) fk))) #f) #f)) (cdr v.11$785$2128))) v.12$786$2130)) (car v.11$785$2128)) #f)) (cdr v.9$783$2124))) v.10$784$2126)) (car v.9$783$2124)) #f)) (cdr v.7$781$2119))) v.8$782$2121) #f)) (car v.7$781$2119)) #f)) (cdr v.5$779$2115))) v.6$780$2117)) (car v.5$779$2115)) #f)) (cdr v.3$777$2111)) #f)) (car v.3$777$2111)) #f)) (cdr v.1$775$2107))) v.2$776$2109)) (car v.1$775$2107)) #f)) (cdr expr$767$1184))))) (match-underscore lambda (expr$683$704 rename$684$705 compare$685$706) (car ((lambda (tmp$708$710) (if tmp$708$710 tmp$708$710 (cons (error "no expansion for" expr$683$704) #f))) ((lambda (v.1$691$711) (if (pair? v.1$691$711) ((lambda (v.2$692$713) ((lambda (v$714) ((lambda (v.3$693$715) (if (pair? v.3$693$715) ((lambda (v.4$694$717) ((lambda (p$718) ((lambda (v.5$695$719) (if (pair? v.5$695$719) ((lambda (v.6$696$721) ((lambda (g+s$722) ((lambda (v.7$697$723) (if (pair? v.7$697$723) ((lambda (v.8$698$725) (if (list? v.8$698$725) ((lambda (sk$727) ((lambda (v.9$699$728) (if (pair? v.9$699$728) ((lambda (v.10$700$730) ((lambda (fk$731) ((lambda (v.11$701$732) (if (pair? v.11$701$732) ((lambda (v.12$702$734) ((lambda (i$735) ((lambda (v.13$703$736) (if (null? v.13$703$736) (cons (cons-source (rename$684$705 (quote underscore?)) (cons-source p$718 (cons-source (append (map (lambda (sk$738) sk$738) sk$727) (cons-source i$735 (quote ()) (quote (i)))) (cons-source (cons-source (rename$684$705 (quote match-two)) (cons-source v$714 (cons-source p$718 (cons-source g+s$722 (cons-source sk$727 (cons-source fk$731 (cons-source i$735 (quote ()) (quote (i))) (quote (fk i))) (quote ((sk ...) fk i))) (quote (g+s (sk ...) fk i))) (quote (p g+s (sk ...) fk i))) (quote (v p g+s (sk ...) fk i))) (quote (match-two v p g+s (sk ...) fk i))) (quote ()) (quote ((match-two v p g+s (sk ...) fk i)))) (quote ((sk ... i) (match-two v p g+s (sk ...) fk i)))) (quote (p (sk ... i) (match-two v p g+s (sk ...) fk i)))) (quote (underscore? p (sk ... i) (match-two v p g+s (sk ...) fk i)))) #f) #f)) (cdr v.11$701$732))) v.12$702$734)) (car v.11$701$732)) #f)) (cdr v.9$699$728))) v.10$700$730)) (car v.9$699$728)) #f)) (cdr v.7$697$723))) v.8$698$725) #f)) (car v.7$697$723)) #f)) (cdr v.5$695$719))) v.6$696$721)) (car v.5$695$719)) #f)) (cdr v.3$693$715))) v.4$694$717)) (car v.3$693$715)) #f)) (cdr v.1$691$711))) v.2$692$713)) (car v.1$691$711)) #f)) (cdr expr$683$704))))) (underscore? lambda (expr$594$616 rename$595$617 compare$596$618) (car ((lambda (tmp$620$622) (if tmp$620$622 tmp$620$622 ((lambda (tmp$624$626) (if tmp$624$626 tmp$624$626 (cons (error "no expansion for" expr$594$616) #f))) ((lambda (v.8$609$627) (if (pair? v.8$609$627) ((lambda (v.9$610$629) ((lambda (x$630) ((lambda (v.10$611$631) (if (pair? v.10$611$631) ((lambda (v.11$612$633) ((lambda (kt$634) ((lambda (v.12$613$635) (if (pair? v.12$613$635) ((lambda (v.13$614$637) ((lambda (kf$638) ((lambda (v.14$615$639) (if (null? v.14$615$639) (cons kf$638 #f) #f)) (cdr v.12$613$635))) v.13$614$637)) (car v.12$613$635)) #f)) (cdr v.10$611$631))) v.11$612$633)) (car v.10$611$631)) #f)) (cdr v.8$609$627))) v.9$610$629)) (car v.8$609$627)) #f)) (cdr expr$594$616))))) ((lambda (v.1$602$641) (if (pair? v.1$602$641) ((lambda (v.2$603$643) (if (compare$596$618 v.2$603$643 (rename$595$617 (quote _))) ((lambda (v.3$604$645) (if (pair? v.3$604$645) ((lambda (v.4$605$647) ((lambda (kt$648) ((lambda (v.5$606$649) (if (pair? v.5$606$649) ((lambda (v.6$607$651) ((lambda (kf$652) ((lambda (v.7$608$653) (if (null? v.7$608$653) (cons kt$648 #f) #f)) (cdr v.5$606$649))) v.6$607$651)) (car v.5$606$649)) #f)) (cdr v.3$604$645))) v.4$605$647)) (car v.3$604$645)) #f)) (cdr v.1$602$641)) #f)) (car v.1$602$641)) #f)) (cdr expr$594$616))))) (match-one lambda (expr$485$511 rename$486$512 compare$487$513) (car ((lambda (tmp$515$517) (if tmp$515$517 tmp$515$517 ((lambda (tmp$519$521) (if tmp$519$521 tmp$519$521 (cons (error "no expansion for" expr$485$511) #f))) ((lambda (v.18$510$522) ((lambda (x$523) (cons (cons-source (rename$486$512 (quote match-underscore)) x$523 (quote (match-underscore . x))) #f)) v.18$510$522)) (cdr expr$485$511))))) ((lambda (v.1$493$524) (if (pair? v.1$493$524) ((lambda (v.2$494$526) ((lambda (v$527) ((lambda (v.3$495$528) (if (pair? v.3$495$528) ((lambda (v.4$496$530) (if (pair? v.4$496$530) ((lambda (v.5$497$532) ((lambda (p$533) ((lambda (v.6$498$534) (if (pair? v.6$498$534) ((lambda (v.7$499$536) ((lambda (q$537) ((lambda (v.8$500$538) ((lambda (r$539) ((lambda (v.9$501$540) (if (pair? v.9$501$540) ((lambda (v.10$502$542) ((lambda (g+s$543) ((lambda (v.11$503$544) (if (pair? v.11$503$544) ((lambda (v.12$504$546) ((lambda (sk$547) ((lambda (v.13$505$548) (if (pair? v.13$505$548) ((lambda (v.14$506$550) ((lambda (fk$551) ((lambda (v.15$507$552) (if (pair? v.15$507$552) ((lambda (v.16$508$554) ((lambda (i$555) ((lambda (v.17$509$556) (if (null? v.17$509$556) (cons (cons-source (rename$486$512 (quote match-check-ellipsis)) (cons-source q$537 (cons-source (cons-source (rename$486$512 (quote match-extract-underscore)) (cons-source p$533 (cons-source (cons-source (rename$486$512 (quote match-gen-ellipsis)) (cons-source v$527 (cons-source p$533 (cons-source r$539 (cons-source g+s$543 (cons-source sk$547 (cons-source fk$551 (cons-source i$555 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (r g+s sk fk i))) (quote (p r g+s sk fk i))) (quote (v p r g+s sk fk i))) (quote (match-gen-ellipsis v p r g+s sk fk i))) (cons-source i$555 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (p (match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (match-extract-underscore p (match-gen-ellipsis v p r g+s sk fk i) i ()))) (cons-source (cons-source (rename$486$512 (quote match-underscore)) (cons-source v$527 (cons-source (cons-source p$533 (cons-source q$537 r$539 (quote (q . r))) (quote (p q . r))) (cons-source g+s$543 (cons-source sk$547 (cons-source fk$551 (cons-source i$555 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p q . r) g+s sk fk i))) (quote (v (p q . r) g+s sk fk i))) (quote (match-underscore v (p q . r) g+s sk fk i))) (quote ()) (quote ((match-underscore v (p q . r) g+s sk fk i)))) (quote ((match-extract-underscore p (match-gen-ellipsis v p r g+s sk fk i) i ()) (match-underscore v (p q . r) g+s sk fk i)))) (quote (q (match-extract-underscore p (match-gen-ellipsis v p r g+s sk fk i) i ()) (match-underscore v (p q . r) g+s sk fk i)))) (quote (match-check-ellipsis q (match-extract-underscore p (match-gen-ellipsis v p r g+s sk fk i) i ()) (match-underscore v (p q . r) g+s sk fk i)))) #f) #f)) (cdr v.15$507$552))) v.16$508$554)) (car v.15$507$552)) #f)) (cdr v.13$505$548))) v.14$506$550)) (car v.13$505$548)) #f)) (cdr v.11$503$544))) v.12$504$546)) (car v.11$503$544)) #f)) (cdr v.9$501$540))) v.10$502$542)) (car v.9$501$540)) #f)) (cdr v.3$495$528))) v.8$500$538)) (cdr v.6$498$534))) v.7$499$536)) (car v.6$498$534)) #f)) (cdr v.4$496$530))) v.5$497$532)) (car v.4$496$530)) #f)) (car v.3$495$528)) #f)) (cdr v.1$493$524))) v.2$494$526)) (car v.1$493$524)) #f)) (cdr expr$485$511))))) (match-next lambda (expr$323$360 rename$324$361 compare$325$362) (car ((lambda (tmp$364$366) (if tmp$364$366 tmp$364$366 ((lambda (tmp$368$370) (if tmp$368$370 tmp$368$370 ((lambda (tmp$372$374) (if tmp$372$374 tmp$372$374 (cons (error "no expansion for" expr$323$360) #f))) ((lambda (v.21$351$375) (if (pair? v.21$351$375) ((lambda (v.22$352$377) ((lambda (v$378) ((lambda (v.23$353$379) (if (pair? v.23$353$379) ((lambda (v.24$354$381) ((lambda (g+s$382) ((lambda (v.25$355$383) (if (pair? v.25$355$383) ((lambda (v.26$356$385) (if (pair? v.26$356$385) ((lambda (v.27$357$387) ((lambda (pat$388) ((lambda (v.28$358$389) ((lambda (body$390) ((lambda (v.29$359$391) ((lambda (rest$392) (cons (cons-source (rename$324$361 (quote match-next)) (cons-source v$378 (cons-source g+s$382 (cons-source (cons-source pat$388 (cons-source (cons-source (rename$324$361 (quote =>)) (cons-source (rename$324$361 (quote failure)) (quote ()) (quote (failure))) (quote (=> failure))) body$390 (quote ((=> failure) . body))) (quote (pat (=> failure) . body))) rest$392 (quote ((pat (=> failure) . body) . rest))) (quote (g+s (pat (=> failure) . body) . rest))) (quote (v g+s (pat (=> failure) . body) . rest))) (quote (match-next v g+s (pat (=> failure) . body) . rest))) #f)) v.29$359$391)) (cdr v.25$355$383))) v.28$358$389)) (cdr v.26$356$385))) v.27$357$387)) (car v.26$356$385)) #f)) (car v.25$355$383)) #f)) (cdr v.23$353$379))) v.24$354$381)) (car v.23$353$379)) #f)) (cdr v.21$351$375))) v.22$352$377)) (car v.21$351$375)) #f)) (cdr expr$323$360))))) ((lambda (v.6$336$393) (if (pair? v.6$336$393) ((lambda (v.7$337$395) ((lambda (v$396) ((lambda (v.8$338$397) (if (pair? v.8$338$397) ((lambda (v.9$339$399) ((lambda (g+s$400) ((lambda (v.10$340$401) (if (pair? v.10$340$401) ((lambda (v.11$341$403) (if (pair? v.11$341$403) ((lambda (v.12$342$405) ((lambda (pat$406) ((lambda (v.13$343$407) (if (pair? v.13$343$407) ((lambda (v.14$344$409) (if (pair? v.14$344$409) ((lambda (v.15$345$411) (if (compare$325$362 v.15$345$411 (rename$324$361 (quote =>))) ((lambda (v.16$346$413) (if (pair? v.16$346$413) ((lambda (v.17$347$415) ((lambda (failure$416) ((lambda (v.18$348$417) (if (null? v.18$348$417) ((lambda (v.19$349$419) ((lambda (body$420) ((lambda (v.20$350$421) ((lambda (rest$422) (cons (cons-source (rename$324$361 (quote let)) (cons-source (cons-source (cons-source failure$416 (cons-source (cons-source (rename$324$361 (quote lambda)) (cons-source (quote ()) (cons-source (cons-source (rename$324$361 (quote match-next)) (cons-source v$396 (cons-source g+s$400 rest$422 (quote (g+s . rest))) (quote (v g+s . rest))) (quote (match-next v g+s . rest))) (quote ()) (quote ((match-next v g+s . rest)))) (quote (() (match-next v g+s . rest)))) (quote (lambda () (match-next v g+s . rest)))) (quote ()) (quote ((lambda () (match-next v g+s . rest))))) (quote (failure (lambda () (match-next v g+s . rest))))) (quote ()) (quote ((failure (lambda () (match-next v g+s . rest)))))) (cons-source (cons-source (rename$324$361 (quote match-one)) (cons-source v$396 (cons-source pat$406 (cons-source g+s$400 (cons-source (cons-source (rename$324$361 (quote match-drop-ids)) (cons-source (cons-source (rename$324$361 (quote begin)) body$420 (quote (begin . body))) (quote ()) (quote ((begin . body)))) (quote (match-drop-ids (begin . body)))) (cons-source (cons-source failure$416 (quote ()) (quote (failure))) (cons-source (quote ()) (quote ()) (quote (()))) (quote ((failure) ()))) (quote ((match-drop-ids (begin . body)) (failure) ()))) (quote (g+s (match-drop-ids (begin . body)) (failure) ()))) (quote (pat g+s (match-drop-ids (begin . body)) (failure) ()))) (quote (v pat g+s (match-drop-ids (begin . body)) (failure) ()))) (quote (match-one v pat g+s (match-drop-ids (begin . body)) (failure) ()))) (quote ()) (quote ((match-one v pat g+s (match-drop-ids (begin . body)) (failure) ())))) (quote (((failure (lambda () (match-next v g+s . rest)))) (match-one v pat g+s (match-drop-ids (begin . body)) (failure) ())))) (quote (let ((failure (lambda () (match-next v g+s . rest)))) (match-one v pat g+s (match-drop-ids (begin . body)) (failure) ())))) #f)) v.20$350$421)) (cdr v.10$340$401))) v.19$349$419)) (cdr v.13$343$407)) #f)) (cdr v.16$346$413))) v.17$347$415)) (car v.16$346$413)) #f)) (cdr v.14$344$409)) #f)) (car v.14$344$409)) #f)) (car v.13$343$407)) #f)) (cdr v.11$341$403))) v.12$342$405)) (car v.11$341$403)) #f)) (car v.10$340$401)) #f)) (cdr v.8$338$397))) v.9$339$399)) (car v.8$338$397)) #f)) (cdr v.6$336$393))) v.7$337$395)) (car v.6$336$393)) #f)) (cdr expr$323$360))))) ((lambda (v.1$331$423) (if (pair? v.1$331$423) ((lambda (v.2$332$425) ((lambda (v$426) ((lambda (v.3$333$427) (if (pair? v.3$333$427) ((lambda (v.4$334$429) ((lambda (g+s$430) ((lambda (v.5$335$431) (if (null? v.5$335$431) (cons (cons-source (rename$324$361 (quote error)) (cons-source (cons-source (rename$324$361 (quote quote)) (cons-source (rename$324$361 (quote match)) (quote ()) (quote (match))) (quote (quote match))) (cons-source "no matching pattern" (quote ()) (quote ("no matching pattern"))) (quote ((quote match) "no matching pattern"))) (quote (error (quote match) "no matching pattern"))) #f) #f)) (cdr v.3$333$427))) v.4$334$429)) (car v.3$333$427)) #f)) (cdr v.1$331$423))) v.2$332$425)) (car v.1$331$423)) #f)) (cdr expr$323$360))))) (match lambda (expr$95$138 rename$96$139 compare$97$140) (car ((lambda (tmp$142$144) (if tmp$142$144 tmp$142$144 ((lambda (tmp$146$148) (if tmp$146$148 tmp$146$148 ((lambda (tmp$150$152) (if tmp$150$152 tmp$150$152 ((lambda (tmp$154$156) (if tmp$154$156 tmp$154$156 ((lambda (tmp$158$160) (if tmp$158$160 tmp$158$160 (cons (error "no expansion for" expr$95$138) #f))) ((lambda (v.26$128$161) (if (pair? v.26$128$161) ((lambda (v.27$129$163) ((lambda (atom$164) ((lambda (v.28$130$165) ((lambda (w.29$131$167 pat-ls31$133$168 body-ls32$134$169) ((lambda (lp.30$132$170) (set! lp.30$132$170 (lambda (w.29$131$171 pat-ls31$133$172 body-ls32$134$173) (if (null? w.29$131$171) ((lambda (pat$174 body$175) (cons (cons-source (rename$96$139 (quote let)) (cons-source (cons-source (cons-source (rename$96$139 (quote v)) (cons-source atom$164 (quote ()) (quote (atom))) (quote (v atom))) (quote ()) (quote ((v atom)))) (cons-source (cons-source (rename$96$139 (quote match-next)) (cons-source (rename$96$139 (quote v)) (cons-source (cons-source atom$164 (cons-source (cons-source (rename$96$139 (quote set!)) (cons-source atom$164 (quote ()) (quote (atom))) (quote (set! atom))) (quote ()) (quote ((set! atom)))) (quote (atom (set! atom)))) (map (lambda (pat$176 body$177) (cons-source pat$176 body$177 (quote (pat . body)))) pat$174 body$175) (quote ((atom (set! atom)) (pat . body) ...))) (quote (v (atom (set! atom)) (pat . body) ...))) (quote (match-next v (atom (set! atom)) (pat . body) ...))) (quote ()) (quote ((match-next v (atom (set! atom)) (pat . body) ...)))) (quote (((v atom)) (match-next v (atom (set! atom)) (pat . body) ...)))) (quote (let ((v atom)) (match-next v (atom (set! atom)) (pat . body) ...)))) #f)) (reverse pat-ls31$133$172) (reverse body-ls32$134$173)) (if (pair? w.29$131$171) ((lambda (v.33$135$179) (if (pair? v.33$135$179) ((lambda (v.34$136$181) ((lambda (pat$182) ((lambda (v.35$137$183) ((lambda (body$184) (lp.30$132$170 (cdr w.29$131$171) (cons pat$182 pat-ls31$133$172) (cons body$184 body-ls32$134$173))) v.35$137$183)) (cdr v.33$135$179))) v.34$136$181)) (car v.33$135$179)) #f)) (car w.29$131$171)) #f)))) (lp.30$132$170 w.29$131$167 pat-ls31$133$168 body-ls32$134$169)) #f)) v.28$130$165 (quote ()) (quote ()))) (cdr v.26$128$161))) v.27$129$163)) (car v.26$128$161)) #f)) (cdr expr$95$138))))) ((lambda (v.15$117$185) (if (pair? v.15$117$185) ((lambda (v.16$118$187) (if (vector? v.16$118$187) ((lambda (v.17$119$189) (if (list? v.17$119$189) ((lambda (vec$191) ((lambda (v.18$120$192) ((lambda (w.19$121$194 pat-ls21$123$195 body-ls22$124$196) ((lambda (lp.20$122$197) (set! lp.20$122$197 (lambda (w.19$121$198 pat-ls21$123$199 body-ls22$124$200) (if (null? w.19$121$198) ((lambda (pat$201 body$202) (cons (cons-source (rename$96$139 (quote let)) (cons-source (cons-source (cons-source (rename$96$139 (quote v)) (cons-source (list->vector vec$191) (quote ()) (quote (#(vec ...)))) (quote (v #(vec ...)))) (quote ()) (quote ((v #(vec ...))))) (cons-source (cons-source (rename$96$139 (quote match-next)) (cons-source (rename$96$139 (quote v)) (cons-source (cons-source (rename$96$139 (quote v)) (cons-source (cons-source (rename$96$139 (quote set!)) (cons-source (rename$96$139 (quote v)) (quote ()) (quote (v))) (quote (set! v))) (quote ()) (quote ((set! v)))) (quote (v (set! v)))) (map (lambda (pat$203 body$204) (cons-source pat$203 body$204 (quote (pat . body)))) pat$201 body$202) (quote ((v (set! v)) (pat . body) ...))) (quote (v (v (set! v)) (pat . body) ...))) (quote (match-next v (v (set! v)) (pat . body) ...))) (quote ()) (quote ((match-next v (v (set! v)) (pat . body) ...)))) (quote (((v #(vec ...))) (match-next v (v (set! v)) (pat . body) ...)))) (quote (let ((v #(vec ...))) (match-next v (v (set! v)) (pat . body) ...)))) #f)) (reverse pat-ls21$123$199) (reverse body-ls22$124$200)) (if (pair? w.19$121$198) ((lambda (v.23$125$206) (if (pair? v.23$125$206) ((lambda (v.24$126$208) ((lambda (pat$209) ((lambda (v.25$127$210) ((lambda (body$211) (lp.20$122$197 (cdr w.19$121$198) (cons pat$209 pat-ls21$123$199) (cons body$211 body-ls22$124$200))) v.25$127$210)) (cdr v.23$125$206))) v.24$126$208)) (car v.23$125$206)) #f)) (car w.19$121$198)) #f)))) (lp.20$122$197 w.19$121$194 pat-ls21$123$195 body-ls22$124$196)) #f)) v.18$120$192 (quote ()) (quote ()))) (cdr v.15$117$185))) v.17$119$189) #f)) (vector->list v.16$118$187)) #f)) (car v.15$117$185)) #f)) (cdr expr$95$138))))) ((lambda (v.5$107$212) (if (pair? v.5$107$212) ((lambda (v.6$108$214) (if (list? v.6$108$214) ((lambda (app$216) ((lambda (v.7$109$217) ((lambda (w.8$110$219 pat-ls10$112$220 body-ls11$113$221) ((lambda (lp.9$111$222) (set! lp.9$111$222 (lambda (w.8$110$223 pat-ls10$112$224 body-ls11$113$225) (if (null? w.8$110$223) ((lambda (pat$226 body$227) (cons (cons-source (rename$96$139 (quote let)) (cons-source (cons-source (cons-source (rename$96$139 (quote v)) (cons-source app$216 (quote ()) (quote ((app ...)))) (quote (v (app ...)))) (quote ()) (quote ((v (app ...))))) (cons-source (cons-source (rename$96$139 (quote match-next)) (cons-source (rename$96$139 (quote v)) (cons-source (cons-source app$216 (cons-source (cons-source (rename$96$139 (quote set!)) (cons-source app$216 (quote ()) (quote ((app ...)))) (quote (set! (app ...)))) (quote ()) (quote ((set! (app ...))))) (quote ((app ...) (set! (app ...))))) (map (lambda (pat$228 body$229) (cons-source pat$228 body$229 (quote (pat . body)))) pat$226 body$227) (quote (((app ...) (set! (app ...))) (pat . body) ...))) (quote (v ((app ...) (set! (app ...))) (pat . body) ...))) (quote (match-next v ((app ...) (set! (app ...))) (pat . body) ...))) (quote ()) (quote ((match-next v ((app ...) (set! (app ...))) (pat . body) ...)))) (quote (((v (app ...))) (match-next v ((app ...) (set! (app ...))) (pat . body) ...)))) (quote (let ((v (app ...))) (match-next v ((app ...) (set! (app ...))) (pat . body) ...)))) #f)) (reverse pat-ls10$112$224) (reverse body-ls11$113$225)) (if (pair? w.8$110$223) ((lambda (v.12$114$231) (if (pair? v.12$114$231) ((lambda (v.13$115$233) ((lambda (pat$234) ((lambda (v.14$116$235) ((lambda (body$236) (lp.9$111$222 (cdr w.8$110$223) (cons pat$234 pat-ls10$112$224) (cons body$236 body-ls11$113$225))) v.14$116$235)) (cdr v.12$114$231))) v.13$115$233)) (car v.12$114$231)) #f)) (car w.8$110$223)) #f)))) (lp.9$111$222 w.8$110$219 pat-ls10$112$220 body-ls11$113$221)) #f)) v.7$109$217 (quote ()) (quote ()))) (cdr v.5$107$212))) v.6$108$214) #f)) (car v.5$107$212)) #f)) (cdr expr$95$138))))) ((lambda (v.2$104$237) (if (pair? v.2$104$237) ((lambda (v.3$105$239) ((lambda (atom$240) ((lambda (v.4$106$241) (if (null? v.4$106$241) (cons (cons-source (rename$96$139 (quote match-syntax-error)) (cons-source "no match clauses" (quote ()) (quote ("no match clauses"))) (quote (match-syntax-error "no match clauses"))) #f) #f)) (cdr v.2$104$237))) v.3$105$239)) (car v.2$104$237)) #f)) (cdr expr$95$138))))) ((lambda (v.1$103$243) (if (null? v.1$103$243) (cons (cons-source (rename$96$139 (quote match-syntax-error)) (cons-source "missing match expression" (quote ()) (quote ("missing match expression"))) (quote (match-syntax-error "missing match expression"))) #f) #f)) (cdr expr$95$138))))) (new-slot-set! lambda (expr$32$49 rename$33$50 compare$34$51) (car ((lambda (tmp$53$55) (if tmp$53$55 tmp$53$55 (cons (error "no expansion for" expr$32$49) #f))) ((lambda (v.1$40$56) (if (pair? v.1$40$56) ((lambda (v.2$41$58) ((lambda (rtd$59) ((lambda (v.3$42$60) (if (pair? v.3$42$60) ((lambda (v.4$43$62) ((lambda (rec$63) ((lambda (v.5$44$64) (if (pair? v.5$44$64) ((lambda (v.6$45$66) ((lambda (n$67) ((lambda (v.7$46$68) (if (pair? v.7$46$68) ((lambda (v.8$47$70) ((lambda (value$71) ((lambda (v.9$48$72) (if (null? v.9$48$72) (cons (cons-source (rename$33$50 (quote if)) (cons-source (cons-source (rename$33$50 (quote integer?)) (cons-source n$67 (quote ()) (quote (n))) (quote (integer? n))) (cons-source (cons-source (rename$33$50 (quote slot-set!)) (cons-source rtd$59 (cons-source rec$63 (cons-source n$67 (cons-source value$71 (quote ()) (quote (value))) (quote (n value))) (quote (rec n value))) (quote (rtd rec n value))) (quote (slot-set! rtd rec n value))) (cons-source (cons-source (rename$33$50 (quote slot-set!)) (cons-source rtd$59 (cons-source rec$63 (cons-source (cons-source (rename$33$50 (quote type-slot-offset)) (cons-source rtd$59 (cons-source n$67 (quote ()) (quote (n))) (quote (rtd n))) (quote (type-slot-offset rtd n))) (cons-source value$71 (quote ()) (quote (value))) (quote ((type-slot-offset rtd n) value))) (quote (rec (type-slot-offset rtd n) value))) (quote (rtd rec (type-slot-offset rtd n) value))) (quote (slot-set! rtd rec (type-slot-offset rtd n) value))) (quote ()) (quote ((slot-set! rtd rec (type-slot-offset rtd n) value)))) (quote ((slot-set! rtd rec n value) (slot-set! rtd rec (type-slot-offset rtd n) value)))) (quote ((integer? n) (slot-set! rtd rec n value) (slot-set! rtd rec (type-slot-offset rtd n) value)))) (quote (if (integer? n) (slot-set! rtd rec n value) (slot-set! rtd rec (type-slot-offset rtd n) value)))) #f) #f)) (cdr v.7$46$68))) v.8$47$70)) (car v.7$46$68)) #f)) (cdr v.5$44$64))) v.6$45$66)) (car v.5$44$64)) #f)) (cdr v.3$42$60))) v.4$43$62)) (car v.3$42$60)) #f)) (cdr v.1$40$56))) v.2$41$58)) (car v.1$40$56)) #f)) (cdr expr$32$49))))) (match-syntax-error lambda (expr$5$14 rename$6$15 compare$7$16) (car ((lambda (tmp$18$20) (if tmp$18$20 tmp$18$20 (cons (error "no expansion for" expr$5$14) #f))) ((lambda (v.1$13$21) (if (null? v.1$13$21) (cons (cons-source (rename$6$15 (quote match-syntax-error)) (cons-source "invalid match-syntax-error usage" (quote ()) (quote ("invalid match-syntax-error usage"))) (quote (match-syntax-error "invalid match-syntax-error usage"))) #f) #f)) (cdr expr$5$14))))))