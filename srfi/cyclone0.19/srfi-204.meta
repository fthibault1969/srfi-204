;; This file was automatically generated by the Cyclone Scheme compiler
((match-bound-identifier=? lambda (expr$10082$10099 rename$10083$10100 compare$10084$10101) (car ((lambda (tmp$10103$10105) (if tmp$10103$10105 tmp$10103$10105 (cons (error "no expansion for" expr$10082$10099) #f))) ((lambda (v.1$10090$10106) (if (pair? v.1$10090$10106) ((lambda (v.2$10091$10108) ((lambda (a$10109) ((lambda (v.3$10092$10110) (if (pair? v.3$10092$10110) ((lambda (v.4$10093$10112) ((lambda (b$10113) ((lambda (v.5$10094$10114) (if (pair? v.5$10094$10114) ((lambda (v.6$10095$10116) ((lambda (sk$10117) ((lambda (v.7$10096$10118) (if (pair? v.7$10096$10118) ((lambda (v.8$10097$10120) ((lambda (fk$10121) ((lambda (v.9$10098$10122) (if (null? v.9$10098$10122) (cons (cons-source (rename$10083$10100 (quote let-syntax)) (cons-source (cons-source (cons-source b$10113 (cons-source (cons-source (rename$10083$10100 (quote syntax-rules)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (syntax-rules ()))) (quote ()) (quote ((syntax-rules ())))) (quote (b (syntax-rules ())))) (quote ()) (quote ((b (syntax-rules ()))))) (cons-source (cons-source (rename$10083$10100 (quote let-syntax)) (cons-source (cons-source (cons-source (rename$10083$10100 (quote eq)) (cons-source (cons-source (rename$10083$10100 (quote syntax-rules)) (cons-source (cons-source b$10113 (quote ()) (quote (b))) (cons-source (cons-source (cons-source (rename$10083$10100 (quote eq)) (cons-source b$10113 (quote ()) (quote (b))) (quote (eq b))) (cons-source sk$10117 (quote ()) (quote (sk))) (quote ((eq b) sk))) (cons-source (cons-source (cons-source (rename$10083$10100 (quote eq)) (cons-source (rename$10083$10100 (quote _)) (quote ()) (quote (_))) (quote (eq _))) (cons-source fk$10121 (quote ()) (quote (fk))) (quote ((eq _) fk))) (quote ()) (quote (((eq _) fk)))) (quote (((eq b) sk) ((eq _) fk)))) (quote ((b) ((eq b) sk) ((eq _) fk)))) (quote (syntax-rules (b) ((eq b) sk) ((eq _) fk)))) (quote ()) (quote ((syntax-rules (b) ((eq b) sk) ((eq _) fk))))) (quote (eq (syntax-rules (b) ((eq b) sk) ((eq _) fk))))) (quote ()) (quote ((eq (syntax-rules (b) ((eq b) sk) ((eq _) fk)))))) (cons-source (cons-source (rename$10083$10100 (quote eq)) (cons-source a$10109 (quote ()) (quote (a))) (quote (eq a))) (quote ()) (quote ((eq a)))) (quote (((eq (syntax-rules (b) ((eq b) sk) ((eq _) fk)))) (eq a)))) (quote (let-syntax ((eq (syntax-rules (b) ((eq b) sk) ((eq _) fk)))) (eq a)))) (quote ()) (quote ((let-syntax ((eq (syntax-rules (b) ((eq b) sk) ((eq _) fk)))) (eq a))))) (quote (((b (syntax-rules ()))) (let-syntax ((eq (syntax-rules (b) ((eq b) sk) ((eq _) fk)))) (eq a))))) (quote (let-syntax ((b (syntax-rules ()))) (let-syntax ((eq (syntax-rules (b) ((eq b) sk) ((eq _) fk)))) (eq a))))) #f) #f)) (cdr v.7$10096$10118))) v.8$10097$10120)) (car v.7$10096$10118)) #f)) (cdr v.5$10094$10114))) v.6$10095$10116)) (car v.5$10094$10114)) #f)) (cdr v.3$10092$10110))) v.4$10093$10112)) (car v.3$10092$10110)) #f)) (cdr v.1$10090$10106))) v.2$10091$10108)) (car v.1$10090$10106)) #f)) (cdr expr$10082$10099))))) (match-check-identifier lambda (expr$9942$9974 rename$9943$9975 compare$9944$9976) (car ((lambda (tmp$9978$9980) (if tmp$9978$9980 tmp$9978$9980 ((lambda (tmp$9982$9984) (if tmp$9982$9984 tmp$9982$9984 ((lambda (tmp$9986$9988) (if tmp$9986$9988 tmp$9986$9988 (cons (error "no expansion for" expr$9942$9974) #f))) ((lambda (v.18$9967$9989) (if (pair? v.18$9967$9989) ((lambda (v.19$9968$9991) ((lambda (x$9992) ((lambda (v.20$9969$9993) (if (pair? v.20$9969$9993) ((lambda (v.21$9970$9995) ((lambda (success-k$9996) ((lambda (v.22$9971$9997) (if (pair? v.22$9971$9997) ((lambda (v.23$9972$9999) ((lambda (failure-k$10000) ((lambda (v.24$9973$10001) (if (null? v.24$9973$10001) (cons (cons-source (rename$9943$9975 (quote let-syntax)) (cons-source (cons-source (cons-source (rename$9943$9975 (quote sym?)) (cons-source (cons-source (rename$9943$9975 (quote syntax-rules)) (cons-source (quote ()) (cons-source (cons-source (cons-source (rename$9943$9975 (quote sym?)) (cons-source x$9992 (cons-source (rename$9943$9975 (quote sk)) (cons-source (rename$9943$9975 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote (x sk fk))) (quote (sym? x sk fk))) (cons-source (rename$9943$9975 (quote sk)) (quote ()) (quote (sk))) (quote ((sym? x sk fk) sk))) (cons-source (cons-source (cons-source (rename$9943$9975 (quote sym?)) (cons-source (rename$9943$9975 (quote y)) (cons-source (rename$9943$9975 (quote sk)) (cons-source (rename$9943$9975 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote (y sk fk))) (quote (sym? y sk fk))) (cons-source (rename$9943$9975 (quote fk)) (quote ()) (quote (fk))) (quote ((sym? y sk fk) fk))) (quote ()) (quote (((sym? y sk fk) fk)))) (quote (((sym? x sk fk) sk) ((sym? y sk fk) fk)))) (quote (() ((sym? x sk fk) sk) ((sym? y sk fk) fk)))) (quote (syntax-rules () ((sym? x sk fk) sk) ((sym? y sk fk) fk)))) (quote ()) (quote ((syntax-rules () ((sym? x sk fk) sk) ((sym? y sk fk) fk))))) (quote (sym? (syntax-rules () ((sym? x sk fk) sk) ((sym? y sk fk) fk))))) (quote ()) (quote ((sym? (syntax-rules () ((sym? x sk fk) sk) ((sym? y sk fk) fk)))))) (cons-source (cons-source (rename$9943$9975 (quote sym?)) (cons-source (rename$9943$9975 (quote abracadabra)) (cons-source success-k$9996 (cons-source failure-k$10000 (quote ()) (quote (failure-k))) (quote (success-k failure-k))) (quote (abracadabra success-k failure-k))) (quote (sym? abracadabra success-k failure-k))) (quote ()) (quote ((sym? abracadabra success-k failure-k)))) (quote (((sym? (syntax-rules () ((sym? x sk fk) sk) ((sym? y sk fk) fk)))) (sym? abracadabra success-k failure-k)))) (quote (let-syntax ((sym? (syntax-rules () ((sym? x sk fk) sk) ((sym? y sk fk) fk)))) (sym? abracadabra success-k failure-k)))) #f) #f)) (cdr v.22$9971$9997))) v.23$9972$9999)) (car v.22$9971$9997)) #f)) (cdr v.20$9969$9993))) v.21$9970$9995)) (car v.20$9969$9993)) #f)) (cdr v.18$9967$9989))) v.19$9968$9991)) (car v.18$9967$9989)) #f)) (cdr expr$9942$9974))))) ((lambda (v.10$9959$10003) (if (pair? v.10$9959$10003) ((lambda (v.11$9960$10005) (if (vector? v.11$9960$10005) ((lambda (v.12$9961$10007) (if (list? v.12$9961$10007) ((lambda (x$10009) ((lambda (v.13$9962$10010) (if (pair? v.13$9962$10010) ((lambda (v.14$9963$10012) ((lambda (success-k$10013) ((lambda (v.15$9964$10014) (if (pair? v.15$9964$10014) ((lambda (v.16$9965$10016) ((lambda (failure-k$10017) ((lambda (v.17$9966$10018) (if (null? v.17$9966$10018) (cons failure-k$10017 #f) #f)) (cdr v.15$9964$10014))) v.16$9965$10016)) (car v.15$9964$10014)) #f)) (cdr v.13$9962$10010))) v.14$9963$10012)) (car v.13$9962$10010)) #f)) (cdr v.10$9959$10003))) v.12$9961$10007) #f)) (vector->list v.11$9960$10005)) #f)) (car v.10$9959$10003)) #f)) (cdr expr$9942$9974))))) ((lambda (v.1$9950$10020) (if (pair? v.1$9950$10020) ((lambda (v.2$9951$10022) (if (pair? v.2$9951$10022) ((lambda (v.3$9952$10024) ((lambda (x$10025) ((lambda (v.4$9953$10026) ((lambda (y$10027) ((lambda (v.5$9954$10028) (if (pair? v.5$9954$10028) ((lambda (v.6$9955$10030) ((lambda (success-k$10031) ((lambda (v.7$9956$10032) (if (pair? v.7$9956$10032) ((lambda (v.8$9957$10034) ((lambda (failure-k$10035) ((lambda (v.9$9958$10036) (if (null? v.9$9958$10036) (cons failure-k$10035 #f) #f)) (cdr v.7$9956$10032))) v.8$9957$10034)) (car v.7$9956$10032)) #f)) (cdr v.5$9954$10028))) v.6$9955$10030)) (car v.5$9954$10028)) #f)) (cdr v.1$9950$10020))) v.4$9953$10026)) (cdr v.2$9951$10022))) v.3$9952$10024)) (car v.2$9951$10022)) #f)) (car v.1$9950$10020)) #f)) (cdr expr$9942$9974))))) (match-check-ellipsis lambda (expr$9802$9834 rename$9803$9835 compare$9804$9836) (car ((lambda (tmp$9838$9840) (if tmp$9838$9840 tmp$9838$9840 ((lambda (tmp$9842$9844) (if tmp$9842$9844 tmp$9842$9844 ((lambda (tmp$9846$9848) (if tmp$9846$9848 tmp$9846$9848 (cons (error "no expansion for" expr$9802$9834) #f))) ((lambda (v.18$9827$9849) (if (pair? v.18$9827$9849) ((lambda (v.19$9828$9851) ((lambda (id$9852) ((lambda (v.20$9829$9853) (if (pair? v.20$9829$9853) ((lambda (v.21$9830$9855) ((lambda (success-k$9856) ((lambda (v.22$9831$9857) (if (pair? v.22$9831$9857) ((lambda (v.23$9832$9859) ((lambda (failure-k$9860) ((lambda (v.24$9833$9861) (if (null? v.24$9833$9861) (cons (cons-source (rename$9803$9835 (quote let-syntax)) (cons-source (cons-source (cons-source (rename$9803$9835 (quote ellipsis?)) (cons-source (cons-source (rename$9803$9835 (quote syntax-rules)) (cons-source (quote ()) (cons-source (cons-source (cons-source (rename$9803$9835 (quote ellipsis?)) (cons-source (cons-source (rename$9803$9835 (quote foo)) (cons-source id$9852 (quote ()) (quote (id))) (quote (foo id))) (cons-source (rename$9803$9835 (quote sk)) (cons-source (rename$9803$9835 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote ((foo id) sk fk))) (quote (ellipsis? (foo id) sk fk))) (cons-source (rename$9803$9835 (quote sk)) (quote ()) (quote (sk))) (quote ((ellipsis? (foo id) sk fk) sk))) (cons-source (cons-source (cons-source (rename$9803$9835 (quote ellipsis?)) (cons-source (rename$9803$9835 (quote other)) (cons-source (rename$9803$9835 (quote sk)) (cons-source (rename$9803$9835 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote (other sk fk))) (quote (ellipsis? other sk fk))) (cons-source (rename$9803$9835 (quote fk)) (quote ()) (quote (fk))) (quote ((ellipsis? other sk fk) fk))) (quote ()) (quote (((ellipsis? other sk fk) fk)))) (quote (((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk)))) (quote (() ((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk)))) (quote (syntax-rules () ((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk)))) (quote ()) (quote ((syntax-rules () ((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk))))) (quote (ellipsis? (syntax-rules () ((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk))))) (quote ()) (quote ((ellipsis? (syntax-rules () ((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk)))))) (cons-source (cons-source (rename$9803$9835 (quote ellipsis?)) (cons-source (cons-source (rename$9803$9835 (quote a)) (cons-source (rename$9803$9835 (quote b)) (cons-source (rename$9803$9835 (quote c)) (quote ()) (quote (c))) (quote (b c))) (quote (a b c))) (cons-source success-k$9856 (cons-source failure-k$9860 (quote ()) (quote (failure-k))) (quote (success-k failure-k))) (quote ((a b c) success-k failure-k))) (quote (ellipsis? (a b c) success-k failure-k))) (quote ()) (quote ((ellipsis? (a b c) success-k failure-k)))) (quote (((ellipsis? (syntax-rules () ((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk)))) (ellipsis? (a b c) success-k failure-k)))) (quote (let-syntax ((ellipsis? (syntax-rules () ((ellipsis? (foo id) sk fk) sk) ((ellipsis? other sk fk) fk)))) (ellipsis? (a b c) success-k failure-k)))) #f) #f)) (cdr v.22$9831$9857))) v.23$9832$9859)) (car v.22$9831$9857)) #f)) (cdr v.20$9829$9853))) v.21$9830$9855)) (car v.20$9829$9853)) #f)) (cdr v.18$9827$9849))) v.19$9828$9851)) (car v.18$9827$9849)) #f)) (cdr expr$9802$9834))))) ((lambda (v.10$9819$9863) (if (pair? v.10$9819$9863) ((lambda (v.11$9820$9865) (if (vector? v.11$9820$9865) ((lambda (v.12$9821$9867) (if (list? v.12$9821$9867) ((lambda (a$9869) ((lambda (v.13$9822$9870) (if (pair? v.13$9822$9870) ((lambda (v.14$9823$9872) ((lambda (success-k$9873) ((lambda (v.15$9824$9874) (if (pair? v.15$9824$9874) ((lambda (v.16$9825$9876) ((lambda (failure-k$9877) ((lambda (v.17$9826$9878) (if (null? v.17$9826$9878) (cons failure-k$9877 #f) #f)) (cdr v.15$9824$9874))) v.16$9825$9876)) (car v.15$9824$9874)) #f)) (cdr v.13$9822$9870))) v.14$9823$9872)) (car v.13$9822$9870)) #f)) (cdr v.10$9819$9863))) v.12$9821$9867) #f)) (vector->list v.11$9820$9865)) #f)) (car v.10$9819$9863)) #f)) (cdr expr$9802$9834))))) ((lambda (v.1$9810$9880) (if (pair? v.1$9810$9880) ((lambda (v.2$9811$9882) (if (pair? v.2$9811$9882) ((lambda (v.3$9812$9884) ((lambda (a$9885) ((lambda (v.4$9813$9886) ((lambda (b$9887) ((lambda (v.5$9814$9888) (if (pair? v.5$9814$9888) ((lambda (v.6$9815$9890) ((lambda (success-k$9891) ((lambda (v.7$9816$9892) (if (pair? v.7$9816$9892) ((lambda (v.8$9817$9894) ((lambda (failure-k$9895) ((lambda (v.9$9818$9896) (if (null? v.9$9818$9896) (cons failure-k$9895 #f) #f)) (cdr v.7$9816$9892))) v.8$9817$9894)) (car v.7$9816$9892)) #f)) (cdr v.5$9814$9888))) v.6$9815$9890)) (car v.5$9814$9888)) #f)) (cdr v.1$9810$9880))) v.4$9813$9886)) (cdr v.2$9811$9882))) v.3$9812$9884)) (car v.2$9811$9882)) #f)) (car v.1$9810$9880)) #f)) (cdr expr$9802$9834))))) (match-cons lambda (expr$9745$9760 rename$9746$9761 compare$9747$9762) (car ((lambda (tmp$9764$9766) (if tmp$9764$9766 tmp$9764$9766 (cons (error "no expansion for" expr$9745$9760) #f))) ((lambda (v.1$9753$9767) (if (pair? v.1$9753$9767) ((lambda (v.2$9754$9769) (if (list? v.2$9754$9769) ((lambda (k$9771) ((lambda (v.3$9755$9772) (if (pair? v.3$9755$9772) ((lambda (v.4$9756$9774) ((lambda (p$9775) ((lambda (v.5$9757$9776) (if (pair? v.5$9757$9776) ((lambda (v.6$9758$9778) ((lambda (q$9779) ((lambda (v.7$9759$9780) (if (null? v.7$9759$9780) (cons (append (map (lambda (k$9782) k$9782) k$9771) (cons-source (cons-source p$9775 q$9779 (quote (p . q))) (quote ()) (quote ((p . q))))) #f) #f)) (cdr v.5$9757$9776))) v.6$9758$9778)) (car v.5$9757$9776)) #f)) (cdr v.3$9755$9772))) v.4$9756$9774)) (car v.3$9755$9772)) #f)) (cdr v.1$9753$9767))) v.2$9754$9769) #f)) (car v.1$9753$9767)) #f)) (cdr expr$9745$9760))))) (match-rewrite2 lambda (expr$9679$9696 rename$9680$9697 compare$9681$9698) (car ((lambda (tmp$9700$9702) (if tmp$9700$9702 tmp$9700$9702 (cons (error "no expansion for" expr$9679$9696) #f))) ((lambda (v.1$9687$9703) (if (pair? v.1$9687$9703) ((lambda (v.2$9688$9705) ((lambda (q$9706) ((lambda (v.3$9689$9707) (if (pair? v.3$9689$9707) ((lambda (v.4$9690$9709) ((lambda (ids$9710) ((lambda (v.5$9691$9711) (if (pair? v.5$9691$9711) ((lambda (v.6$9692$9713) (if (list? v.6$9692$9713) ((lambda (k$9715) ((lambda (v.7$9693$9716) (if (pair? v.7$9693$9716) ((lambda (v.8$9694$9718) ((lambda (p$9719) ((lambda (v.9$9695$9720) (if (null? v.9$9695$9720) (cons (cons-source (rename$9680$9697 (quote match-rewrite)) (cons-source q$9706 (cons-source ids$9710 (cons-source (append (map (lambda (k$9722) k$9722) k$9715) (cons-source p$9719 (quote ()) (quote (p)))) (quote ()) (quote ((k ... p)))) (quote (ids (k ... p)))) (quote (q ids (k ... p)))) (quote (match-rewrite q ids (k ... p)))) #f) #f)) (cdr v.7$9693$9716))) v.8$9694$9718)) (car v.7$9693$9716)) #f)) (cdr v.5$9691$9711))) v.6$9692$9713) #f)) (car v.5$9691$9711)) #f)) (cdr v.3$9689$9707))) v.4$9690$9709)) (car v.3$9689$9707)) #f)) (cdr v.1$9687$9703))) v.2$9688$9705)) (car v.1$9687$9703)) #f)) (cdr expr$9679$9696))))) (match-rewrite lambda (expr$9420$9475 rename$9421$9476 compare$9422$9477) (car ((lambda (tmp$9479$9481) (if tmp$9479$9481 tmp$9479$9481 ((lambda (tmp$9483$9485) (if tmp$9483$9485 tmp$9483$9485 ((lambda (tmp$9487$9489) (if tmp$9487$9489 tmp$9487$9489 ((lambda (tmp$9491$9493) (if tmp$9491$9493 tmp$9491$9493 ((lambda (tmp$9495$9497) (if tmp$9495$9497 tmp$9495$9497 (cons (error "no expansion for" expr$9420$9475) #f))) ((lambda (v.35$9462$9498) (if (pair? v.35$9462$9498) ((lambda (v.36$9463$9500) ((lambda (p$9501) ((lambda (v.37$9464$9502) (if (pair? v.37$9464$9502) ((lambda (v.38$9465$9504) (if (pair? v.38$9465$9504) ((lambda (v.39$9466$9506) (if (pair? v.39$9466$9506) ((lambda (v.40$9467$9508) ((lambda (id$9509) ((lambda (v.41$9468$9510) (if (pair? v.41$9468$9510) ((lambda (v.42$9469$9512) ((lambda (tmp$9513) ((lambda (v.43$9470$9514) (if (null? v.43$9470$9514) ((lambda (v.44$9471$9516) ((lambda (rest$9517) ((lambda (v.45$9472$9518) (if (pair? v.45$9472$9518) ((lambda (v.46$9473$9520) (if (list? v.46$9473$9520) ((lambda (k$9522) ((lambda (v.47$9474$9523) (if (null? v.47$9474$9523) (cons (cons-source (rename$9421$9476 (quote match-bound-identifier=?)) (cons-source p$9501 (cons-source id$9509 (cons-source (append (map (lambda (k$9525) k$9525) k$9522) (cons-source tmp$9513 (quote ()) (quote (tmp)))) (cons-source (cons-source (rename$9421$9476 (quote match-rewrite)) (cons-source p$9501 (cons-source rest$9517 (cons-source k$9522 (quote ()) (quote ((k ...)))) (quote (rest (k ...)))) (quote (p rest (k ...)))) (quote (match-rewrite p rest (k ...)))) (quote ()) (quote ((match-rewrite p rest (k ...))))) (quote ((k ... tmp) (match-rewrite p rest (k ...))))) (quote (id (k ... tmp) (match-rewrite p rest (k ...))))) (quote (p id (k ... tmp) (match-rewrite p rest (k ...))))) (quote (match-bound-identifier=? p id (k ... tmp) (match-rewrite p rest (k ...))))) #f) #f)) (cdr v.45$9472$9518))) v.46$9473$9520) #f)) (car v.45$9472$9518)) #f)) (cdr v.37$9464$9502))) v.44$9471$9516)) (cdr v.38$9465$9504)) #f)) (cdr v.41$9468$9510))) v.42$9469$9512)) (car v.41$9468$9510)) #f)) (cdr v.39$9466$9506))) v.40$9467$9508)) (car v.39$9466$9506)) #f)) (car v.38$9465$9504)) #f)) (car v.37$9464$9502)) #f)) (cdr v.35$9462$9498))) v.36$9463$9500)) (car v.35$9462$9498)) #f)) (cdr expr$9420$9475))))) ((lambda (v.28$9455$9526) (if (pair? v.28$9455$9526) ((lambda (v.29$9456$9528) ((lambda (p$9529) ((lambda (v.30$9457$9530) (if (pair? v.30$9457$9530) ((lambda (v.31$9458$9532) (if (null? v.31$9458$9532) ((lambda (v.32$9459$9534) (if (pair? v.32$9459$9534) ((lambda (v.33$9460$9536) (if (list? v.33$9460$9536) ((lambda (k$9538) ((lambda (v.34$9461$9539) (if (null? v.34$9461$9539) (cons (append (map (lambda (k$9541) k$9541) k$9538) (cons-source p$9529 (quote ()) (quote (p)))) #f) #f)) (cdr v.32$9459$9534))) v.33$9460$9536) #f)) (car v.32$9459$9534)) #f)) (cdr v.30$9457$9530)) #f)) (car v.30$9457$9530)) #f)) (cdr v.28$9455$9526))) v.29$9456$9528)) (car v.28$9455$9526)) #f)) (cdr expr$9420$9475))))) ((lambda (v.21$9448$9542) (if (pair? v.21$9448$9542) ((lambda (v.22$9449$9544) (if (null? v.22$9449$9544) ((lambda (v.23$9450$9546) (if (pair? v.23$9450$9546) ((lambda (v.24$9451$9548) ((lambda (ids$9549) ((lambda (v.25$9452$9550) (if (pair? v.25$9452$9550) ((lambda (v.26$9453$9552) (if (list? v.26$9453$9552) ((lambda (k$9554) ((lambda (v.27$9454$9555) (if (null? v.27$9454$9555) (cons (append (map (lambda (k$9557) k$9557) k$9554) (cons-source (quote ()) (quote ()) (quote (())))) #f) #f)) (cdr v.25$9452$9550))) v.26$9453$9552) #f)) (car v.25$9452$9550)) #f)) (cdr v.23$9450$9546))) v.24$9451$9548)) (car v.23$9450$9546)) #f)) (cdr v.21$9448$9542)) #f)) (car v.21$9448$9542)) #f)) (cdr expr$9420$9475))))) ((lambda (v.12$9439$9558) (if (pair? v.12$9439$9558) ((lambda (v.13$9440$9560) (if (pair? v.13$9440$9560) ((lambda (v.14$9441$9562) ((lambda (p$9563) ((lambda (v.15$9442$9564) ((lambda (q$9565) ((lambda (v.16$9443$9566) (if (pair? v.16$9443$9566) ((lambda (v.17$9444$9568) ((lambda (ids$9569) ((lambda (v.18$9445$9570) (if (pair? v.18$9445$9570) ((lambda (v.19$9446$9572) ((lambda (k$9573) ((lambda (v.20$9447$9574) (if (null? v.20$9447$9574) (cons (cons-source (rename$9421$9476 (quote match-rewrite)) (cons-source p$9563 (cons-source ids$9569 (cons-source (cons-source (rename$9421$9476 (quote match-rewrite2)) (cons-source q$9565 (cons-source ids$9569 (cons-source (cons-source (rename$9421$9476 (quote match-cons)) (cons-source k$9573 (quote ()) (quote (k))) (quote (match-cons k))) (quote ()) (quote ((match-cons k)))) (quote (ids (match-cons k)))) (quote (q ids (match-cons k)))) (quote (match-rewrite2 q ids (match-cons k)))) (quote ()) (quote ((match-rewrite2 q ids (match-cons k))))) (quote (ids (match-rewrite2 q ids (match-cons k))))) (quote (p ids (match-rewrite2 q ids (match-cons k))))) (quote (match-rewrite p ids (match-rewrite2 q ids (match-cons k))))) #f) #f)) (cdr v.18$9445$9570))) v.19$9446$9572)) (car v.18$9445$9570)) #f)) (cdr v.16$9443$9566))) v.17$9444$9568)) (car v.16$9443$9566)) #f)) (cdr v.12$9439$9558))) v.15$9442$9564)) (cdr v.13$9440$9560))) v.14$9441$9562)) (car v.13$9440$9560)) #f)) (car v.12$9439$9558)) #f)) (cdr expr$9420$9475))))) ((lambda (v.1$9428$9576) (if (pair? v.1$9428$9576) ((lambda (v.2$9429$9578) (if (pair? v.2$9429$9578) ((lambda (v.3$9430$9580) (if (compare$9422$9477 v.3$9430$9580 (rename$9421$9476 (quote quote))) ((lambda (v.4$9431$9582) (if (pair? v.4$9431$9582) ((lambda (v.5$9432$9584) ((lambda (x$9585) ((lambda (v.6$9433$9586) (if (null? v.6$9433$9586) ((lambda (v.7$9434$9588) (if (pair? v.7$9434$9588) ((lambda (v.8$9435$9590) ((lambda (ids$9591) ((lambda (v.9$9436$9592) (if (pair? v.9$9436$9592) ((lambda (v.10$9437$9594) (if (list? v.10$9437$9594) ((lambda (k$9596) ((lambda (v.11$9438$9597) (if (null? v.11$9438$9597) (cons (append (map (lambda (k$9599) k$9599) k$9596) (cons-source (cons-source (rename$9421$9476 (quote quote)) (cons-source x$9585 (quote ()) (quote (x))) (quote (quote x))) (quote ()) (quote ((quote x))))) #f) #f)) (cdr v.9$9436$9592))) v.10$9437$9594) #f)) (car v.9$9436$9592)) #f)) (cdr v.7$9434$9588))) v.8$9435$9590)) (car v.7$9434$9588)) #f)) (cdr v.1$9428$9576)) #f)) (cdr v.4$9431$9582))) v.5$9432$9584)) (car v.4$9431$9582)) #f)) (cdr v.2$9429$9578)) #f)) (car v.2$9429$9578)) #f)) (car v.1$9428$9576)) #f)) (cdr expr$9420$9475))))) (match-letrec-two-step lambda (expr$9345$9364 rename$9346$9365 compare$9347$9366) (car ((lambda (tmp$9368$9370) (if tmp$9368$9370 tmp$9368$9370 (cons (error "no expansion for" expr$9345$9364) #f))) ((lambda (v.1$9353$9371) (if (pair? v.1$9353$9371) ((lambda (v.2$9354$9373) ((lambda (next$9374) ((lambda (v.3$9355$9375) (if (pair? v.3$9355$9375) ((lambda (v.4$9356$9377) (if (list? v.4$9356$9377) ((lambda (rewrites$9379) ((lambda (v.5$9357$9380) (if (pair? v.5$9357$9380) ((lambda (v.6$9358$9382) ((lambda (ids$9383) ((lambda (v.7$9359$9384) (if (pair? v.7$9359$9384) ((lambda (v.8$9360$9386) ((lambda (val$9387) ((lambda (v.9$9361$9388) (if (pair? v.9$9361$9388) ((lambda (v.10$9362$9390) ((lambda (var$9391) ((lambda (v.11$9363$9392) (if (null? v.11$9363$9392) (cons (cons-source (rename$9346$9365 (quote match-letrec-two)) (cons-source next$9374 (cons-source (append (map (lambda (rewrites$9394) rewrites$9394) rewrites$9379) (cons-source (cons-source var$9391 (cons-source val$9387 (quote ()) (quote (val))) (quote (var val))) (quote ()) (quote ((var val))))) (cons-source ids$9383 (quote ()) (quote (ids))) (quote ((rewrites ... (var val)) ids))) (quote (next (rewrites ... (var val)) ids))) (quote (match-letrec-two next (rewrites ... (var val)) ids))) #f) #f)) (cdr v.9$9361$9388))) v.10$9362$9390)) (car v.9$9361$9388)) #f)) (cdr v.7$9359$9384))) v.8$9360$9386)) (car v.7$9359$9384)) #f)) (cdr v.5$9357$9380))) v.6$9358$9382)) (car v.5$9357$9380)) #f)) (cdr v.3$9355$9375))) v.4$9356$9377) #f)) (car v.3$9355$9375)) #f)) (cdr v.1$9353$9371))) v.2$9354$9373)) (car v.1$9353$9371)) #f)) (cdr expr$9345$9364))))) (match-letrec-two lambda (expr$9066$9125 rename$9067$9126 compare$9068$9127) (car ((lambda (tmp$9129$9131) (if tmp$9129$9131 tmp$9129$9131 ((lambda (tmp$9133$9135) (if tmp$9133$9135 tmp$9133$9135 (cons (error "no expansion for" expr$9066$9125) #f))) ((lambda (v.28$9101$9136) (if (pair? v.28$9101$9136) ((lambda (v.29$9102$9138) (if (pair? v.29$9102$9138) ((lambda (v.30$9103$9140) (if (pair? v.30$9103$9140) ((lambda (v.31$9104$9142) (if (pair? v.31$9104$9142) ((lambda (v.32$9105$9144) ((lambda (var$9145) ((lambda (v.33$9106$9146) (if (pair? v.33$9106$9146) ((lambda (v.34$9107$9148) ((lambda (val$9149) ((lambda (v.35$9108$9150) (if (null? v.35$9108$9150) ((lambda (v.36$9109$9152) ((lambda (rest$9153) ((lambda (v.37$9110$9154) ((lambda (body$9155) ((lambda (v.38$9111$9156) (if (pair? v.38$9111$9156) ((lambda (v.39$9112$9158) ((lambda (w.40$9113$9160 var2-ls42$9115$9161 val2-ls43$9116$9162) ((lambda (lp.41$9114$9163) (set! lp.41$9114$9163 (lambda (w.40$9113$9164 var2-ls42$9115$9165 val2-ls43$9116$9166) (if (null? w.40$9113$9164) ((lambda (var2$9167 val2$9168) ((lambda (v.49$9122$9169) (if (pair? v.49$9122$9169) ((lambda (v.50$9123$9171) ((lambda (ids$9172) ((lambda (v.51$9124$9173) (if (null? v.51$9124$9173) (cons (cons-source (rename$9067$9126 (quote match-rewrite)) (cons-source var$9145 (cons-source ids$9172 (cons-source (cons-source (rename$9067$9126 (quote match-letrec-two-step)) (cons-source (cons-source rest$9153 body$9155 (quote (rest . body))) (cons-source (map (lambda (var2$9175 val2$9176) (cons-source var2$9175 (cons-source val2$9176 (quote ()) (quote (val2))) (quote (var2 val2)))) var2$9167 val2$9168) (cons-source ids$9172 (cons-source val$9149 (quote ()) (quote (val))) (quote (ids val))) (quote (((var2 val2) ...) ids val))) (quote ((rest . body) ((var2 val2) ...) ids val))) (quote (match-letrec-two-step (rest . body) ((var2 val2) ...) ids val))) (quote ()) (quote ((match-letrec-two-step (rest . body) ((var2 val2) ...) ids val)))) (quote (ids (match-letrec-two-step (rest . body) ((var2 val2) ...) ids val)))) (quote (var ids (match-letrec-two-step (rest . body) ((var2 val2) ...) ids val)))) (quote (match-rewrite var ids (match-letrec-two-step (rest . body) ((var2 val2) ...) ids val)))) #f) #f)) (cdr v.49$9122$9169))) v.50$9123$9171)) (car v.49$9122$9169)) #f)) (cdr v.38$9111$9156))) (reverse var2-ls42$9115$9165) (reverse val2-ls43$9116$9166)) (if (pair? w.40$9113$9164) ((lambda (v.44$9117$9178) (if (pair? v.44$9117$9178) ((lambda (v.45$9118$9180) ((lambda (var2$9181) ((lambda (v.46$9119$9182) (if (pair? v.46$9119$9182) ((lambda (v.47$9120$9184) ((lambda (val2$9185) ((lambda (v.48$9121$9186) (if (null? v.48$9121$9186) (lp.41$9114$9163 (cdr w.40$9113$9164) (cons var2$9181 var2-ls42$9115$9165) (cons val2$9185 val2-ls43$9116$9166)) #f)) (cdr v.46$9119$9182))) v.47$9120$9184)) (car v.46$9119$9182)) #f)) (cdr v.44$9117$9178))) v.45$9118$9180)) (car v.44$9117$9178)) #f)) (car w.40$9113$9164)) #f)))) (lp.41$9114$9163 w.40$9113$9160 var2-ls42$9115$9161 val2-ls43$9116$9162)) #f)) v.39$9112$9158 (quote ()) (quote ()))) (car v.38$9111$9156)) #f)) (cdr v.28$9101$9136))) v.37$9110$9154)) (cdr v.29$9102$9138))) v.36$9109$9152)) (cdr v.30$9103$9140)) #f)) (cdr v.33$9106$9146))) v.34$9107$9148)) (car v.33$9106$9146)) #f)) (cdr v.31$9104$9142))) v.32$9105$9144)) (car v.31$9104$9142)) #f)) (car v.30$9103$9140)) #f)) (car v.29$9102$9138)) #f)) (car v.28$9101$9136)) #f)) (cdr expr$9066$9125))))) ((lambda (v.1$9074$9188) (if (pair? v.1$9074$9188) ((lambda (v.2$9075$9190) (if (pair? v.2$9075$9190) ((lambda (v.3$9076$9192) (if (null? v.3$9076$9192) ((lambda (v.4$9077$9194) ((lambda (body$9195) ((lambda (v.5$9078$9196) (if (pair? v.5$9078$9196) ((lambda (v.6$9079$9198) ((lambda (w.7$9080$9200 var2-ls9$9082$9201 val2-ls10$9083$9202) ((lambda (lp.8$9081$9203) (set! lp.8$9081$9203 (lambda (w.7$9080$9204 var2-ls9$9082$9205 val2-ls10$9083$9206) (if (null? w.7$9080$9204) ((lambda (var2$9207 val2$9208) ((lambda (v.16$9089$9209) (if (pair? v.16$9089$9209) ((lambda (v.17$9090$9211) ((lambda (w.18$9091$9213 id-ls20$9093$9214 tmp-ls21$9094$9215) ((lambda (lp.19$9092$9216) (set! lp.19$9092$9216 (lambda (w.18$9091$9217 id-ls20$9093$9218 tmp-ls21$9094$9219) (if (null? w.18$9091$9217) ((lambda (id$9220 tmp$9221) ((lambda (v.27$9100$9222) (if (null? v.27$9100$9222) (cons (cons-source (rename$9067$9126 (quote let)) (cons-source (map (lambda (id$9224) (cons-source id$9224 (cons-source (cons-source (rename$9067$9126 (quote if)) (cons-source #f (cons-source #f (quote ()) (quote (#f))) (quote (#f #f))) (quote (if #f #f))) (quote ()) (quote ((if #f #f)))) (quote (id (if #f #f))))) id$9220) (cons-source (cons-source (rename$9067$9126 (quote match-let)) (cons-source (map (lambda (var2$9225 val2$9226) (cons-source var2$9225 (cons-source val2$9226 (quote ()) (quote (val2))) (quote (var2 val2)))) var2$9207 val2$9208) (append (map (lambda (id$9227 tmp$9228) (cons-source (rename$9067$9126 (quote set!)) (cons-source id$9227 (cons-source tmp$9228 (quote ()) (quote (tmp))) (quote (id tmp))) (quote (set! id tmp)))) id$9220 tmp$9221) body$9195) (quote (((var2 val2) ...) (set! id tmp) ... . body))) (quote (match-let ((var2 val2) ...) (set! id tmp) ... . body))) (quote ()) (quote ((match-let ((var2 val2) ...) (set! id tmp) ... . body)))) (quote (((id (if #f #f)) ...) (match-let ((var2 val2) ...) (set! id tmp) ... . body)))) (quote (let ((id (if #f #f)) ...) (match-let ((var2 val2) ...) (set! id tmp) ... . body)))) #f) #f)) (cdr v.16$9089$9209))) (reverse id-ls20$9093$9218) (reverse tmp-ls21$9094$9219)) (if (pair? w.18$9091$9217) ((lambda (v.22$9095$9230) (if (pair? v.22$9095$9230) ((lambda (v.23$9096$9232) ((lambda (id$9233) ((lambda (v.24$9097$9234) (if (pair? v.24$9097$9234) ((lambda (v.25$9098$9236) ((lambda (tmp$9237) ((lambda (v.26$9099$9238) (if (null? v.26$9099$9238) (lp.19$9092$9216 (cdr w.18$9091$9217) (cons id$9233 id-ls20$9093$9218) (cons tmp$9237 tmp-ls21$9094$9219)) #f)) (cdr v.24$9097$9234))) v.25$9098$9236)) (car v.24$9097$9234)) #f)) (cdr v.22$9095$9230))) v.23$9096$9232)) (car v.22$9095$9230)) #f)) (car w.18$9091$9217)) #f)))) (lp.19$9092$9216 w.18$9091$9213 id-ls20$9093$9214 tmp-ls21$9094$9215)) #f)) v.17$9090$9211 (quote ()) (quote ()))) (car v.16$9089$9209)) #f)) (cdr v.5$9078$9196))) (reverse var2-ls9$9082$9205) (reverse val2-ls10$9083$9206)) (if (pair? w.7$9080$9204) ((lambda (v.11$9084$9241) (if (pair? v.11$9084$9241) ((lambda (v.12$9085$9243) ((lambda (var2$9244) ((lambda (v.13$9086$9245) (if (pair? v.13$9086$9245) ((lambda (v.14$9087$9247) ((lambda (val2$9248) ((lambda (v.15$9088$9249) (if (null? v.15$9088$9249) (lp.8$9081$9203 (cdr w.7$9080$9204) (cons var2$9244 var2-ls9$9082$9205) (cons val2$9248 val2-ls10$9083$9206)) #f)) (cdr v.13$9086$9245))) v.14$9087$9247)) (car v.13$9086$9245)) #f)) (cdr v.11$9084$9241))) v.12$9085$9243)) (car v.11$9084$9241)) #f)) (car w.7$9080$9204)) #f)))) (lp.8$9081$9203 w.7$9080$9200 var2-ls9$9082$9201 val2-ls10$9083$9202)) #f)) v.6$9079$9198 (quote ()) (quote ()))) (car v.5$9078$9196)) #f)) (cdr v.1$9074$9188))) v.4$9077$9194)) (cdr v.2$9075$9190)) #f)) (car v.2$9075$9190)) #f)) (car v.1$9074$9188)) #f)) (cdr expr$9066$9125))))) (match-letrec-one lambda (expr$8872$8914 rename$8873$8915 compare$8874$8916) (car ((lambda (tmp$8918$8920) (if tmp$8918$8920 tmp$8918$8920 ((lambda (tmp$8922$8924) (if tmp$8922$8924 tmp$8922$8924 (cons (error "no expansion for" expr$8872$8914) #f))) ((lambda (v.19$8898$8925) (if (pair? v.19$8898$8925) ((lambda (v.20$8899$8927) (if (null? v.20$8899$8927) ((lambda (v.21$8900$8929) (if (pair? v.21$8900$8929) ((lambda (v.22$8901$8931) ((lambda (expr$8932) ((lambda (v.23$8902$8933) (if (pair? v.23$8902$8933) ((lambda (v.24$8903$8935) ((lambda (w.25$8904$8937 id-ls27$8906$8938 tmp-ls28$8907$8939) ((lambda (lp.26$8905$8940) (set! lp.26$8905$8940 (lambda (w.25$8904$8941 id-ls27$8906$8942 tmp-ls28$8907$8943) (if (null? w.25$8904$8941) ((lambda (id$8944 tmp$8945) ((lambda (v.34$8913$8946) (if (null? v.34$8913$8946) (cons (cons-source (rename$8873$8915 (quote match-letrec-two)) (cons-source expr$8932 (cons-source (quote ()) (cons-source (map (lambda (id$8948 tmp$8949) (cons-source id$8948 (cons-source tmp$8949 (quote ()) (quote (tmp))) (quote (id tmp)))) id$8944 tmp$8945) (quote ()) (quote (((id tmp) ...)))) (quote (() ((id tmp) ...)))) (quote (expr () ((id tmp) ...)))) (quote (match-letrec-two expr () ((id tmp) ...)))) #f) #f)) (cdr v.23$8902$8933))) (reverse id-ls27$8906$8942) (reverse tmp-ls28$8907$8943)) (if (pair? w.25$8904$8941) ((lambda (v.29$8908$8951) (if (pair? v.29$8908$8951) ((lambda (v.30$8909$8953) ((lambda (id$8954) ((lambda (v.31$8910$8955) (if (pair? v.31$8910$8955) ((lambda (v.32$8911$8957) ((lambda (tmp$8958) ((lambda (v.33$8912$8959) (if (null? v.33$8912$8959) (lp.26$8905$8940 (cdr w.25$8904$8941) (cons id$8954 id-ls27$8906$8942) (cons tmp$8958 tmp-ls28$8907$8943)) #f)) (cdr v.31$8910$8955))) v.32$8911$8957)) (car v.31$8910$8955)) #f)) (cdr v.29$8908$8951))) v.30$8909$8953)) (car v.29$8908$8951)) #f)) (car w.25$8904$8941)) #f)))) (lp.26$8905$8940 w.25$8904$8937 id-ls27$8906$8938 tmp-ls28$8907$8939)) #f)) v.24$8903$8935 (quote ()) (quote ()))) (car v.23$8902$8933)) #f)) (cdr v.21$8900$8929))) v.22$8901$8931)) (car v.21$8900$8929)) #f)) (cdr v.19$8898$8925)) #f)) (car v.19$8898$8925)) #f)) (cdr expr$8872$8914))))) ((lambda (v.1$8880$8961) (if (pair? v.1$8880$8961) ((lambda (v.2$8881$8963) (if (pair? v.2$8881$8963) ((lambda (v.3$8882$8965) ((lambda (pat$8966) ((lambda (v.4$8883$8967) ((lambda (rest$8968) ((lambda (v.5$8884$8969) (if (pair? v.5$8884$8969) ((lambda (v.6$8885$8971) ((lambda (expr$8972) ((lambda (v.7$8886$8973) (if (pair? v.7$8886$8973) ((lambda (v.8$8887$8975) ((lambda (w.9$8888$8977 id-ls11$8890$8978 tmp-ls12$8891$8979) ((lambda (lp.10$8889$8980) (set! lp.10$8889$8980 (lambda (w.9$8888$8981 id-ls11$8890$8982 tmp-ls12$8891$8983) (if (null? w.9$8888$8981) ((lambda (id$8984 tmp$8985) ((lambda (v.18$8897$8986) (if (null? v.18$8897$8986) (cons (cons-source (rename$8873$8915 (quote match-extract-underscore)) (cons-source pat$8966 (cons-source (cons-source (rename$8873$8915 (quote match-letrec-one)) (cons-source rest$8968 (cons-source expr$8972 (quote ()) (quote (expr))) (quote (rest expr))) (quote (match-letrec-one rest expr))) (cons-source id$8984 (cons-source (map (lambda (id$8988 tmp$8989) (cons-source id$8988 (cons-source tmp$8989 (quote ()) (quote (tmp))) (quote (id tmp)))) id$8984 tmp$8985) (quote ()) (quote (((id tmp) ...)))) (quote ((id ...) ((id tmp) ...)))) (quote ((match-letrec-one rest expr) (id ...) ((id tmp) ...)))) (quote (pat (match-letrec-one rest expr) (id ...) ((id tmp) ...)))) (quote (match-extract-underscore pat (match-letrec-one rest expr) (id ...) ((id tmp) ...)))) #f) #f)) (cdr v.7$8886$8973))) (reverse id-ls11$8890$8982) (reverse tmp-ls12$8891$8983)) (if (pair? w.9$8888$8981) ((lambda (v.13$8892$8991) (if (pair? v.13$8892$8991) ((lambda (v.14$8893$8993) ((lambda (id$8994) ((lambda (v.15$8894$8995) (if (pair? v.15$8894$8995) ((lambda (v.16$8895$8997) ((lambda (tmp$8998) ((lambda (v.17$8896$8999) (if (null? v.17$8896$8999) (lp.10$8889$8980 (cdr w.9$8888$8981) (cons id$8994 id-ls11$8890$8982) (cons tmp$8998 tmp-ls12$8891$8983)) #f)) (cdr v.15$8894$8995))) v.16$8895$8997)) (car v.15$8894$8995)) #f)) (cdr v.13$8892$8991))) v.14$8893$8993)) (car v.13$8892$8991)) #f)) (car w.9$8888$8981)) #f)))) (lp.10$8889$8980 w.9$8888$8977 id-ls11$8890$8978 tmp-ls12$8891$8979)) #f)) v.8$8887$8975 (quote ()) (quote ()))) (car v.7$8886$8973)) #f)) (cdr v.5$8884$8969))) v.6$8885$8971)) (car v.5$8884$8969)) #f)) (cdr v.1$8880$8961))) v.4$8883$8967)) (cdr v.2$8881$8963))) v.3$8882$8965)) (car v.2$8881$8963)) #f)) (car v.1$8880$8961)) #f)) (cdr expr$8872$8914))))) (match-letrec lambda (expr$8787$8807 rename$8788$8808 compare$8789$8809) (car ((lambda (tmp$8811$8813) (if tmp$8811$8813 tmp$8811$8813 (cons (error "no expansion for" expr$8787$8807) #f))) ((lambda (v.1$8795$8814) (if (pair? v.1$8795$8814) ((lambda (v.2$8796$8816) ((lambda (w.3$8797$8818 pat-ls5$8799$8819 val-ls6$8800$8820) ((lambda (lp.4$8798$8821) (set! lp.4$8798$8821 (lambda (w.3$8797$8822 pat-ls5$8799$8823 val-ls6$8800$8824) (if (null? w.3$8797$8822) ((lambda (pat$8825 val$8826) ((lambda (v.12$8806$8827) ((lambda (body$8828) (cons (cons-source (rename$8788$8808 (quote match-letrec-one)) (cons-source pat$8825 (cons-source (cons-source (map (lambda (pat$8829 val$8830) (cons-source pat$8829 (cons-source val$8830 (quote ()) (quote (val))) (quote (pat val)))) pat$8825 val$8826) body$8828 (quote (((pat val) ...) . body))) (cons-source (quote ()) (quote ()) (quote (()))) (quote ((((pat val) ...) . body) ()))) (quote ((pat ...) (((pat val) ...) . body) ()))) (quote (match-letrec-one (pat ...) (((pat val) ...) . body) ()))) #f)) v.12$8806$8827)) (cdr v.1$8795$8814))) (reverse pat-ls5$8799$8823) (reverse val-ls6$8800$8824)) (if (pair? w.3$8797$8822) ((lambda (v.7$8801$8832) (if (pair? v.7$8801$8832) ((lambda (v.8$8802$8834) ((lambda (pat$8835) ((lambda (v.9$8803$8836) (if (pair? v.9$8803$8836) ((lambda (v.10$8804$8838) ((lambda (val$8839) ((lambda (v.11$8805$8840) (if (null? v.11$8805$8840) (lp.4$8798$8821 (cdr w.3$8797$8822) (cons pat$8835 pat-ls5$8799$8823) (cons val$8839 val-ls6$8800$8824)) #f)) (cdr v.9$8803$8836))) v.10$8804$8838)) (car v.9$8803$8836)) #f)) (cdr v.7$8801$8832))) v.8$8802$8834)) (car v.7$8801$8832)) #f)) (car w.3$8797$8822)) #f)))) (lp.4$8798$8821 w.3$8797$8818 pat-ls5$8799$8819 val-ls6$8800$8820)) #f)) v.2$8796$8816 (quote ()) (quote ()))) (car v.1$8795$8814)) #f)) (cdr expr$8787$8807))))) (match-let* lambda (expr$8706$8726 rename$8707$8727 compare$8708$8728) (car ((lambda (tmp$8730$8732) (if tmp$8730$8732 tmp$8730$8732 ((lambda (tmp$8734$8736) (if tmp$8734$8736 tmp$8734$8736 (cons (error "no expansion for" expr$8706$8726) #f))) ((lambda (v.4$8717$8737) (if (pair? v.4$8717$8737) ((lambda (v.5$8718$8739) (if (pair? v.5$8718$8739) ((lambda (v.6$8719$8741) (if (pair? v.6$8719$8741) ((lambda (v.7$8720$8743) ((lambda (pat$8744) ((lambda (v.8$8721$8745) (if (pair? v.8$8721$8745) ((lambda (v.9$8722$8747) ((lambda (expr$8748) ((lambda (v.10$8723$8749) (if (null? v.10$8723$8749) ((lambda (v.11$8724$8751) ((lambda (rest$8752) ((lambda (v.12$8725$8753) ((lambda (body$8754) (cons (cons-source (rename$8707$8727 (quote match)) (cons-source expr$8748 (cons-source (cons-source pat$8744 (cons-source (cons-source (rename$8707$8727 (quote match-let*)) (cons-source rest$8752 body$8754 (quote (rest . body))) (quote (match-let* rest . body))) (quote ()) (quote ((match-let* rest . body)))) (quote (pat (match-let* rest . body)))) (quote ()) (quote ((pat (match-let* rest . body))))) (quote (expr (pat (match-let* rest . body))))) (quote (match expr (pat (match-let* rest . body))))) #f)) v.12$8725$8753)) (cdr v.4$8717$8737))) v.11$8724$8751)) (cdr v.5$8718$8739)) #f)) (cdr v.8$8721$8745))) v.9$8722$8747)) (car v.8$8721$8745)) #f)) (cdr v.6$8719$8741))) v.7$8720$8743)) (car v.6$8719$8741)) #f)) (car v.5$8718$8739)) #f)) (car v.4$8717$8737)) #f)) (cdr expr$8706$8726))))) ((lambda (v.1$8714$8755) (if (pair? v.1$8714$8755) ((lambda (v.2$8715$8757) (if (null? v.2$8715$8757) ((lambda (v.3$8716$8759) ((lambda (body$8760) (cons (cons-source (rename$8707$8727 (quote let)) (cons-source (quote ()) body$8760 (quote (() . body))) (quote (let () . body))) #f)) v.3$8716$8759)) (cdr v.1$8714$8755)) #f)) (car v.1$8714$8755)) #f)) (cdr expr$8706$8726))))) (match-named-let lambda (expr$8518$8558 rename$8519$8559 compare$8520$8560) (car ((lambda (tmp$8562$8564) (if tmp$8562$8564 tmp$8562$8564 ((lambda (tmp$8566$8568) (if tmp$8566$8568 tmp$8566$8568 (cons (error "no expansion for" expr$8518$8558) #f))) ((lambda (v.20$8545$8569) (if (pair? v.20$8545$8569) ((lambda (v.21$8546$8571) ((lambda (loop$8572) ((lambda (v.22$8547$8573) (if (pair? v.22$8547$8573) ((lambda (v.23$8548$8575) (if (list? v.23$8548$8575) ((lambda (v$8577) ((lambda (v.24$8549$8578) (if (pair? v.24$8549$8578) ((lambda (v.25$8550$8580) (if (pair? v.25$8550$8580) ((lambda (v.26$8551$8582) (if (pair? v.26$8551$8582) ((lambda (v.27$8552$8584) ((lambda (pat$8585) ((lambda (v.28$8553$8586) (if (pair? v.28$8553$8586) ((lambda (v.29$8554$8588) ((lambda (expr$8589) ((lambda (v.30$8555$8590) (if (null? v.30$8555$8590) ((lambda (v.31$8556$8592) ((lambda (rest$8593) ((lambda (v.32$8557$8594) ((lambda (body$8595) (cons (cons-source (rename$8519$8559 (quote match-named-let)) (cons-source loop$8572 (cons-source (append (map (lambda (v$8596) v$8596) v$8577) (cons-source (cons-source pat$8585 (cons-source expr$8589 (cons-source (rename$8519$8559 (quote tmp)) (quote ()) (quote (tmp))) (quote (expr tmp))) (quote (pat expr tmp))) (quote ()) (quote ((pat expr tmp))))) (cons-source rest$8593 body$8595 (quote (rest . body))) (quote ((v ... (pat expr tmp)) rest . body))) (quote (loop (v ... (pat expr tmp)) rest . body))) (quote (match-named-let loop (v ... (pat expr tmp)) rest . body))) #f)) v.32$8557$8594)) (cdr v.24$8549$8578))) v.31$8556$8592)) (cdr v.25$8550$8580)) #f)) (cdr v.28$8553$8586))) v.29$8554$8588)) (car v.28$8553$8586)) #f)) (cdr v.26$8551$8582))) v.27$8552$8584)) (car v.26$8551$8582)) #f)) (car v.25$8550$8580)) #f)) (car v.24$8549$8578)) #f)) (cdr v.22$8547$8573))) v.23$8548$8575) #f)) (car v.22$8547$8573)) #f)) (cdr v.20$8545$8569))) v.21$8546$8571)) (car v.20$8545$8569)) #f)) (cdr expr$8518$8558))))) ((lambda (v.1$8526$8597) (if (pair? v.1$8526$8597) ((lambda (v.2$8527$8599) ((lambda (loop$8600) ((lambda (v.3$8528$8601) (if (pair? v.3$8528$8601) ((lambda (v.4$8529$8603) ((lambda (w.5$8530$8605 pat-ls7$8532$8606 expr-ls8$8533$8607 var-ls9$8534$8608) ((lambda (lp.6$8531$8609) (set! lp.6$8531$8609 (lambda (w.5$8530$8610 pat-ls7$8532$8611 expr-ls8$8533$8612 var-ls9$8534$8613) (if (null? w.5$8530$8610) ((lambda (pat$8614 expr$8615 var$8616) ((lambda (v.17$8542$8617) (if (pair? v.17$8542$8617) ((lambda (v.18$8543$8619) (if (null? v.18$8543$8619) ((lambda (v.19$8544$8621) ((lambda (body$8622) (cons (cons-source (rename$8519$8559 (quote let)) (cons-source loop$8600 (cons-source (map (lambda (var$8623 expr$8624) (cons-source var$8623 (cons-source expr$8624 (quote ()) (quote (expr))) (quote (var expr)))) var$8616 expr$8615) (cons-source (cons-source (rename$8519$8559 (quote match-let)) (cons-source (map (lambda (pat$8625 var$8626) (cons-source pat$8625 (cons-source var$8626 (quote ()) (quote (var))) (quote (pat var)))) pat$8614 var$8616) body$8622 (quote (((pat var) ...) . body))) (quote (match-let ((pat var) ...) . body))) (quote ()) (quote ((match-let ((pat var) ...) . body)))) (quote (((var expr) ...) (match-let ((pat var) ...) . body)))) (quote (loop ((var expr) ...) (match-let ((pat var) ...) . body)))) (quote (let loop ((var expr) ...) (match-let ((pat var) ...) . body)))) #f)) v.19$8544$8621)) (cdr v.17$8542$8617)) #f)) (car v.17$8542$8617)) #f)) (cdr v.3$8528$8601))) (reverse pat-ls7$8532$8611) (reverse expr-ls8$8533$8612) (reverse var-ls9$8534$8613)) (if (pair? w.5$8530$8610) ((lambda (v.10$8535$8628) (if (pair? v.10$8535$8628) ((lambda (v.11$8536$8630) ((lambda (pat$8631) ((lambda (v.12$8537$8632) (if (pair? v.12$8537$8632) ((lambda (v.13$8538$8634) ((lambda (expr$8635) ((lambda (v.14$8539$8636) (if (pair? v.14$8539$8636) ((lambda (v.15$8540$8638) ((lambda (var$8639) ((lambda (v.16$8541$8640) (if (null? v.16$8541$8640) (lp.6$8531$8609 (cdr w.5$8530$8610) (cons pat$8631 pat-ls7$8532$8611) (cons expr$8635 expr-ls8$8533$8612) (cons var$8639 var-ls9$8534$8613)) #f)) (cdr v.14$8539$8636))) v.15$8540$8638)) (car v.14$8539$8636)) #f)) (cdr v.12$8537$8632))) v.13$8538$8634)) (car v.12$8537$8632)) #f)) (cdr v.10$8535$8628))) v.11$8536$8630)) (car v.10$8535$8628)) #f)) (car w.5$8530$8610)) #f)))) (lp.6$8531$8609 w.5$8530$8605 pat-ls7$8532$8606 expr-ls8$8533$8607 var-ls9$8534$8608)) #f)) v.4$8529$8603 (quote ()) (quote ()) (quote ()))) (car v.3$8528$8601)) #f)) (cdr v.1$8526$8597))) v.2$8527$8599)) (car v.1$8526$8597)) #f)) (cdr expr$8518$8558))))) (match-let/aux lambda (expr$8066$8157 rename$8067$8158 compare$8068$8159) (car ((lambda (tmp$8161$8163) (if tmp$8161$8163 tmp$8161$8163 ((lambda (tmp$8165$8167) (if tmp$8165$8167 tmp$8165$8167 ((lambda (tmp$8169$8171) (if tmp$8169$8171 tmp$8169$8171 ((lambda (tmp$8173$8175) (if tmp$8173$8175 tmp$8173$8175 ((lambda (tmp$8177$8179) (if tmp$8177$8179 tmp$8177$8179 (cons (error "no expansion for" expr$8066$8157) #f))) ((lambda (v.71$8144$8180) (if (pair? v.71$8144$8180) ((lambda (v.72$8145$8182) (if (list? v.72$8145$8182) ((lambda (v$8184) ((lambda (v.73$8146$8185) (if (pair? v.73$8146$8185) ((lambda (v.74$8147$8187) (if (list? v.74$8147$8187) ((lambda (p$8189) ((lambda (v.75$8148$8190) (if (pair? v.75$8148$8190) ((lambda (v.76$8149$8192) (if (pair? v.76$8149$8192) ((lambda (v.77$8150$8194) (if (pair? v.77$8150$8194) ((lambda (v.78$8151$8196) ((lambda (a$8197) ((lambda (v.79$8152$8198) (if (pair? v.79$8152$8198) ((lambda (v.80$8153$8200) ((lambda (expr$8201) ((lambda (v.81$8154$8202) (if (null? v.81$8154$8202) ((lambda (v.82$8155$8204) ((lambda (rest$8205) ((lambda (v.83$8156$8206) ((lambda (body$8207) (cons (cons-source (rename$8067$8158 (quote match-let/aux)) (cons-source (append (map (lambda (v$8208) v$8208) v$8184) (cons-source (cons-source a$8197 (cons-source expr$8201 (quote ()) (quote (expr))) (quote (a expr))) (quote ()) (quote ((a expr))))) (cons-source p$8189 (cons-source rest$8205 body$8207 (quote (rest . body))) (quote ((p ...) rest . body))) (quote ((v ... (a expr)) (p ...) rest . body))) (quote (match-let/aux (v ... (a expr)) (p ...) rest . body))) #f)) v.83$8156$8206)) (cdr v.75$8148$8190))) v.82$8155$8204)) (cdr v.76$8149$8192)) #f)) (cdr v.79$8152$8198))) v.80$8153$8200)) (car v.79$8152$8198)) #f)) (cdr v.77$8150$8194))) v.78$8151$8196)) (car v.77$8150$8194)) #f)) (car v.76$8149$8192)) #f)) (car v.75$8148$8190)) #f)) (cdr v.73$8146$8185))) v.74$8147$8187) #f)) (car v.73$8146$8185)) #f)) (cdr v.71$8144$8180))) v.72$8145$8182) #f)) (car v.71$8144$8180)) #f)) (cdr expr$8066$8157))))) ((lambda (v.57$8130$8209) (if (pair? v.57$8130$8209) ((lambda (v.58$8131$8211) (if (list? v.58$8131$8211) ((lambda (v$8213) ((lambda (v.59$8132$8214) (if (pair? v.59$8132$8214) ((lambda (v.60$8133$8216) (if (list? v.60$8133$8216) ((lambda (p$8218) ((lambda (v.61$8134$8219) (if (pair? v.61$8134$8219) ((lambda (v.62$8135$8221) (if (pair? v.62$8135$8221) ((lambda (v.63$8136$8223) (if (pair? v.63$8136$8223) ((lambda (v.64$8137$8225) (if (vector? v.64$8137$8225) ((lambda (v.65$8138$8227) (if (list? v.65$8138$8227) ((lambda (a$8229) ((lambda (v.66$8139$8230) (if (pair? v.66$8139$8230) ((lambda (v.67$8140$8232) ((lambda (expr$8233) ((lambda (v.68$8141$8234) (if (null? v.68$8141$8234) ((lambda (v.69$8142$8236) ((lambda (rest$8237) ((lambda (v.70$8143$8238) ((lambda (body$8239) (cons (cons-source (rename$8067$8158 (quote match-let/aux)) (cons-source (append (map (lambda (v$8240) v$8240) v$8213) (cons-source (cons-source (rename$8067$8158 (quote tmp)) (cons-source expr$8233 (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr))))) (cons-source (append (map (lambda (p$8241) p$8241) p$8218) (cons-source (cons-source (list->vector a$8229) (cons-source (rename$8067$8158 (quote tmp)) (quote ()) (quote (tmp))) (quote (#(a ...) tmp))) (quote ()) (quote ((#(a ...) tmp))))) (cons-source rest$8237 body$8239 (quote (rest . body))) (quote ((p ... (#(a ...) tmp)) rest . body))) (quote ((v ... (tmp expr)) (p ... (#(a ...) tmp)) rest . body))) (quote (match-let/aux (v ... (tmp expr)) (p ... (#(a ...) tmp)) rest . body))) #f)) v.70$8143$8238)) (cdr v.61$8134$8219))) v.69$8142$8236)) (cdr v.62$8135$8221)) #f)) (cdr v.66$8139$8230))) v.67$8140$8232)) (car v.66$8139$8230)) #f)) (cdr v.63$8136$8223))) v.65$8138$8227) #f)) (vector->list v.64$8137$8225)) #f)) (car v.63$8136$8223)) #f)) (car v.62$8135$8221)) #f)) (car v.61$8134$8219)) #f)) (cdr v.59$8132$8214))) v.60$8133$8216) #f)) (car v.59$8132$8214)) #f)) (cdr v.57$8130$8209))) v.58$8131$8211) #f)) (car v.57$8130$8209)) #f)) (cdr expr$8066$8157))))) ((lambda (v.42$8115$8242) (if (pair? v.42$8115$8242) ((lambda (v.43$8116$8244) (if (list? v.43$8116$8244) ((lambda (v$8246) ((lambda (v.44$8117$8247) (if (pair? v.44$8117$8247) ((lambda (v.45$8118$8249) (if (list? v.45$8118$8249) ((lambda (p$8251) ((lambda (v.46$8119$8252) (if (pair? v.46$8119$8252) ((lambda (v.47$8120$8254) (if (pair? v.47$8120$8254) ((lambda (v.48$8121$8256) (if (pair? v.48$8121$8256) ((lambda (v.49$8122$8258) (if (pair? v.49$8122$8258) ((lambda (v.50$8123$8260) ((lambda (a$8261) ((lambda (v.51$8124$8262) ((lambda (b$8263) ((lambda (v.52$8125$8264) (if (pair? v.52$8125$8264) ((lambda (v.53$8126$8266) ((lambda (expr$8267) ((lambda (v.54$8127$8268) (if (null? v.54$8127$8268) ((lambda (v.55$8128$8270) ((lambda (rest$8271) ((lambda (v.56$8129$8272) ((lambda (body$8273) (cons (cons-source (rename$8067$8158 (quote match-let/aux)) (cons-source (append (map (lambda (v$8274) v$8274) v$8246) (cons-source (cons-source (rename$8067$8158 (quote tmp)) (cons-source expr$8267 (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr))))) (cons-source (append (map (lambda (p$8275) p$8275) p$8251) (cons-source (cons-source (cons-source a$8261 b$8263 (quote (a . b))) (cons-source (rename$8067$8158 (quote tmp)) (quote ()) (quote (tmp))) (quote ((a . b) tmp))) (quote ()) (quote (((a . b) tmp))))) (cons-source rest$8271 body$8273 (quote (rest . body))) (quote ((p ... ((a . b) tmp)) rest . body))) (quote ((v ... (tmp expr)) (p ... ((a . b) tmp)) rest . body))) (quote (match-let/aux (v ... (tmp expr)) (p ... ((a . b) tmp)) rest . body))) #f)) v.56$8129$8272)) (cdr v.46$8119$8252))) v.55$8128$8270)) (cdr v.47$8120$8254)) #f)) (cdr v.52$8125$8264))) v.53$8126$8266)) (car v.52$8125$8264)) #f)) (cdr v.48$8121$8256))) v.51$8124$8262)) (cdr v.49$8122$8258))) v.50$8123$8260)) (car v.49$8122$8258)) #f)) (car v.48$8121$8256)) #f)) (car v.47$8120$8254)) #f)) (car v.46$8119$8252)) #f)) (cdr v.44$8117$8247))) v.45$8118$8249) #f)) (car v.44$8117$8247)) #f)) (cdr v.42$8115$8242))) v.43$8116$8244) #f)) (car v.42$8115$8242)) #f)) (cdr expr$8066$8157))))) ((lambda (v.17$8090$8276) (if (pair? v.17$8090$8276) ((lambda (v.18$8091$8278) ((lambda (w.19$8092$8280 var-ls21$8094$8281 expr-ls22$8095$8282) ((lambda (lp.20$8093$8283) (set! lp.20$8093$8283 (lambda (w.19$8092$8284 var-ls21$8094$8285 expr-ls22$8095$8286) (if (null? w.19$8092$8284) ((lambda (var$8287 expr$8288) ((lambda (v.28$8101$8289) (if (pair? v.28$8101$8289) ((lambda (v.29$8102$8291) ((lambda (w.30$8103$8293 pat-ls32$8105$8294 tmp-ls33$8106$8295) ((lambda (lp.31$8104$8296) (set! lp.31$8104$8296 (lambda (w.30$8103$8297 pat-ls32$8105$8298 tmp-ls33$8106$8299) (if (null? w.30$8103$8297) ((lambda (pat$8300 tmp$8301) ((lambda (v.39$8112$8302) (if (pair? v.39$8112$8302) ((lambda (v.40$8113$8304) (if (null? v.40$8113$8304) ((lambda (v.41$8114$8306) ((lambda (body$8307) (cons (cons-source (rename$8067$8158 (quote let)) (cons-source (map (lambda (var$8308 expr$8309) (cons-source var$8308 (cons-source expr$8309 (quote ()) (quote (expr))) (quote (var expr)))) var$8287 expr$8288) (cons-source (cons-source (rename$8067$8158 (quote match-let*)) (cons-source (map (lambda (pat$8310 tmp$8311) (cons-source pat$8310 (cons-source tmp$8311 (quote ()) (quote (tmp))) (quote (pat tmp)))) pat$8300 tmp$8301) body$8307 (quote (((pat tmp) ...) . body))) (quote (match-let* ((pat tmp) ...) . body))) (quote ()) (quote ((match-let* ((pat tmp) ...) . body)))) (quote (((var expr) ...) (match-let* ((pat tmp) ...) . body)))) (quote (let ((var expr) ...) (match-let* ((pat tmp) ...) . body)))) #f)) v.41$8114$8306)) (cdr v.39$8112$8302)) #f)) (car v.39$8112$8302)) #f)) (cdr v.28$8101$8289))) (reverse pat-ls32$8105$8298) (reverse tmp-ls33$8106$8299)) (if (pair? w.30$8103$8297) ((lambda (v.34$8107$8313) (if (pair? v.34$8107$8313) ((lambda (v.35$8108$8315) ((lambda (pat$8316) ((lambda (v.36$8109$8317) (if (pair? v.36$8109$8317) ((lambda (v.37$8110$8319) ((lambda (tmp$8320) ((lambda (v.38$8111$8321) (if (null? v.38$8111$8321) (lp.31$8104$8296 (cdr w.30$8103$8297) (cons pat$8316 pat-ls32$8105$8298) (cons tmp$8320 tmp-ls33$8106$8299)) #f)) (cdr v.36$8109$8317))) v.37$8110$8319)) (car v.36$8109$8317)) #f)) (cdr v.34$8107$8313))) v.35$8108$8315)) (car v.34$8107$8313)) #f)) (car w.30$8103$8297)) #f)))) (lp.31$8104$8296 w.30$8103$8293 pat-ls32$8105$8294 tmp-ls33$8106$8295)) #f)) v.29$8102$8291 (quote ()) (quote ()))) (car v.28$8101$8289)) #f)) (cdr v.17$8090$8276))) (reverse var-ls21$8094$8285) (reverse expr-ls22$8095$8286)) (if (pair? w.19$8092$8284) ((lambda (v.23$8096$8324) (if (pair? v.23$8096$8324) ((lambda (v.24$8097$8326) ((lambda (var$8327) ((lambda (v.25$8098$8328) (if (pair? v.25$8098$8328) ((lambda (v.26$8099$8330) ((lambda (expr$8331) ((lambda (v.27$8100$8332) (if (null? v.27$8100$8332) (lp.20$8093$8283 (cdr w.19$8092$8284) (cons var$8327 var-ls21$8094$8285) (cons expr$8331 expr-ls22$8095$8286)) #f)) (cdr v.25$8098$8328))) v.26$8099$8330)) (car v.25$8098$8328)) #f)) (cdr v.23$8096$8324))) v.24$8097$8326)) (car v.23$8096$8324)) #f)) (car w.19$8092$8284)) #f)))) (lp.20$8093$8283 w.19$8092$8280 var-ls21$8094$8281 expr-ls22$8095$8282)) #f)) v.18$8091$8278 (quote ()) (quote ()))) (car v.17$8090$8276)) #f)) (cdr expr$8066$8157))))) ((lambda (v.1$8074$8334) (if (pair? v.1$8074$8334) ((lambda (v.2$8075$8336) ((lambda (w.3$8076$8338 var-ls5$8078$8339 expr-ls6$8079$8340) ((lambda (lp.4$8077$8341) (set! lp.4$8077$8341 (lambda (w.3$8076$8342 var-ls5$8078$8343 expr-ls6$8079$8344) (if (null? w.3$8076$8342) ((lambda (var$8345 expr$8346) ((lambda (v.12$8085$8347) (if (pair? v.12$8085$8347) ((lambda (v.13$8086$8349) (if (null? v.13$8086$8349) ((lambda (v.14$8087$8351) (if (pair? v.14$8087$8351) ((lambda (v.15$8088$8353) (if (null? v.15$8088$8353) ((lambda (v.16$8089$8355) ((lambda (body$8356) (cons (cons-source (rename$8067$8158 (quote let)) (cons-source (map (lambda (var$8357 expr$8358) (cons-source var$8357 (cons-source expr$8358 (quote ()) (quote (expr))) (quote (var expr)))) var$8345 expr$8346) body$8356 (quote (((var expr) ...) . body))) (quote (let ((var expr) ...) . body))) #f)) v.16$8089$8355)) (cdr v.14$8087$8351)) #f)) (car v.14$8087$8351)) #f)) (cdr v.12$8085$8347)) #f)) (car v.12$8085$8347)) #f)) (cdr v.1$8074$8334))) (reverse var-ls5$8078$8343) (reverse expr-ls6$8079$8344)) (if (pair? w.3$8076$8342) ((lambda (v.7$8080$8360) (if (pair? v.7$8080$8360) ((lambda (v.8$8081$8362) ((lambda (var$8363) ((lambda (v.9$8082$8364) (if (pair? v.9$8082$8364) ((lambda (v.10$8083$8366) ((lambda (expr$8367) ((lambda (v.11$8084$8368) (if (null? v.11$8084$8368) (lp.4$8077$8341 (cdr w.3$8076$8342) (cons var$8363 var-ls5$8078$8343) (cons expr$8367 expr-ls6$8079$8344)) #f)) (cdr v.9$8082$8364))) v.10$8083$8366)) (car v.9$8082$8364)) #f)) (cdr v.7$8080$8360))) v.8$8081$8362)) (car v.7$8080$8360)) #f)) (car w.3$8076$8342)) #f)))) (lp.4$8077$8341 w.3$8076$8338 var-ls5$8078$8339 expr-ls6$8079$8340)) #f)) v.2$8075$8336 (quote ()) (quote ()))) (car v.1$8074$8334)) #f)) (cdr expr$8066$8157))))) (match-let lambda (expr$7905$7939 rename$7906$7940 compare$7907$7941) (car ((lambda (tmp$7943$7945) (if tmp$7943$7945 tmp$7943$7945 ((lambda (tmp$7947$7949) (if tmp$7947$7949 tmp$7947$7949 (cons (error "no expansion for" expr$7905$7939) #f))) ((lambda (v.13$7925$7950) (if (pair? v.13$7925$7950) ((lambda (v.14$7926$7952) ((lambda (loop$7953) ((lambda (v.15$7927$7954) (if (pair? v.15$7927$7954) ((lambda (v.16$7928$7956) ((lambda (w.17$7929$7958 var-ls19$7931$7959 init-ls20$7932$7960) ((lambda (lp.18$7930$7961) (set! lp.18$7930$7961 (lambda (w.17$7929$7962 var-ls19$7931$7963 init-ls20$7932$7964) (if (null? w.17$7929$7962) ((lambda (var$7965 init$7966) ((lambda (v.26$7938$7967) ((lambda (body$7968) (cons (cons-source (rename$7906$7940 (quote match-named-let)) (cons-source loop$7953 (cons-source (quote ()) (cons-source (map (lambda (var$7969 init$7970) (cons-source var$7969 (cons-source init$7970 (quote ()) (quote (init))) (quote (var init)))) var$7965 init$7966) body$7968 (quote (((var init) ...) . body))) (quote (() ((var init) ...) . body))) (quote (loop () ((var init) ...) . body))) (quote (match-named-let loop () ((var init) ...) . body))) #f)) v.26$7938$7967)) (cdr v.15$7927$7954))) (reverse var-ls19$7931$7963) (reverse init-ls20$7932$7964)) (if (pair? w.17$7929$7962) ((lambda (v.21$7933$7972) (if (pair? v.21$7933$7972) ((lambda (v.22$7934$7974) ((lambda (var$7975) ((lambda (v.23$7935$7976) (if (pair? v.23$7935$7976) ((lambda (v.24$7936$7978) ((lambda (init$7979) ((lambda (v.25$7937$7980) (if (null? v.25$7937$7980) (lp.18$7930$7961 (cdr w.17$7929$7962) (cons var$7975 var-ls19$7931$7963) (cons init$7979 init-ls20$7932$7964)) #f)) (cdr v.23$7935$7976))) v.24$7936$7978)) (car v.23$7935$7976)) #f)) (cdr v.21$7933$7972))) v.22$7934$7974)) (car v.21$7933$7972)) #f)) (car w.17$7929$7962)) #f)))) (lp.18$7930$7961 w.17$7929$7958 var-ls19$7931$7959 init-ls20$7932$7960)) #f)) v.16$7928$7956 (quote ()) (quote ()))) (car v.15$7927$7954)) #f)) (cdr v.13$7925$7950))) v.14$7926$7952)) (car v.13$7925$7950)) #f)) (cdr expr$7905$7939))))) ((lambda (v.1$7913$7982) (if (pair? v.1$7913$7982) ((lambda (v.2$7914$7984) ((lambda (w.3$7915$7986 var-ls5$7917$7987 value-ls6$7918$7988) ((lambda (lp.4$7916$7989) (set! lp.4$7916$7989 (lambda (w.3$7915$7990 var-ls5$7917$7991 value-ls6$7918$7992) (if (null? w.3$7915$7990) ((lambda (var$7993 value$7994) ((lambda (v.12$7924$7995) ((lambda (body$7996) (cons (cons-source (rename$7906$7940 (quote match-let/aux)) (cons-source (quote ()) (cons-source (quote ()) (cons-source (map (lambda (var$7997 value$7998) (cons-source var$7997 (cons-source value$7998 (quote ()) (quote (value))) (quote (var value)))) var$7993 value$7994) body$7996 (quote (((var value) ...) . body))) (quote (() ((var value) ...) . body))) (quote (() () ((var value) ...) . body))) (quote (match-let/aux () () ((var value) ...) . body))) #f)) v.12$7924$7995)) (cdr v.1$7913$7982))) (reverse var-ls5$7917$7991) (reverse value-ls6$7918$7992)) (if (pair? w.3$7915$7990) ((lambda (v.7$7919$8000) (if (pair? v.7$7919$8000) ((lambda (v.8$7920$8002) ((lambda (var$8003) ((lambda (v.9$7921$8004) (if (pair? v.9$7921$8004) ((lambda (v.10$7922$8006) ((lambda (value$8007) ((lambda (v.11$7923$8008) (if (null? v.11$7923$8008) (lp.4$7916$7989 (cdr w.3$7915$7990) (cons var$8003 var-ls5$7917$7991) (cons value$8007 value-ls6$7918$7992)) #f)) (cdr v.9$7921$8004))) v.10$7922$8006)) (car v.9$7921$8004)) #f)) (cdr v.7$7919$8000))) v.8$7920$8002)) (car v.7$7919$8000)) #f)) (car w.3$7915$7990)) #f)))) (lp.4$7916$7989 w.3$7915$7986 var-ls5$7917$7987 value-ls6$7918$7988)) #f)) v.2$7914$7984 (quote ()) (quote ()))) (car v.1$7913$7982)) #f)) (cdr expr$7905$7939))))) (match-lambda* lambda (expr$7837$7853 rename$7838$7854 compare$7839$7855) (car ((lambda (tmp$7857$7859) (if tmp$7857$7859 tmp$7857$7859 (cons (error "no expansion for" expr$7837$7853) #f))) ((lambda (v.1$7845$7860) ((lambda (w.2$7846$7862 pattern-ls4$7848$7863 body-ls5$7849$7864) ((lambda (lp.3$7847$7865) (set! lp.3$7847$7865 (lambda (w.2$7846$7866 pattern-ls4$7848$7867 body-ls5$7849$7868) (if (null? w.2$7846$7866) ((lambda (pattern$7869 body$7870) (cons (cons-source (rename$7838$7854 (quote lambda)) (cons-source (rename$7838$7854 (quote expr)) (cons-source (cons-source (rename$7838$7854 (quote match)) (cons-source (rename$7838$7854 (quote expr)) (map (lambda (pattern$7871 body$7872) (cons-source pattern$7871 body$7872 (quote (pattern . body)))) pattern$7869 body$7870) (quote (expr (pattern . body) ...))) (quote (match expr (pattern . body) ...))) (quote ()) (quote ((match expr (pattern . body) ...)))) (quote (expr (match expr (pattern . body) ...)))) (quote (lambda expr (match expr (pattern . body) ...)))) #f)) (reverse pattern-ls4$7848$7867) (reverse body-ls5$7849$7868)) (if (pair? w.2$7846$7866) ((lambda (v.6$7850$7874) (if (pair? v.6$7850$7874) ((lambda (v.7$7851$7876) ((lambda (pattern$7877) ((lambda (v.8$7852$7878) ((lambda (body$7879) (lp.3$7847$7865 (cdr w.2$7846$7866) (cons pattern$7877 pattern-ls4$7848$7867) (cons body$7879 body-ls5$7849$7868))) v.8$7852$7878)) (cdr v.6$7850$7874))) v.7$7851$7876)) (car v.6$7850$7874)) #f)) (car w.2$7846$7866)) #f)))) (lp.3$7847$7865 w.2$7846$7862 pattern-ls4$7848$7863 body-ls5$7849$7864)) #f)) v.1$7845$7860 (quote ()) (quote ()))) (cdr expr$7837$7853))))) (match-lambda lambda (expr$7769$7785 rename$7770$7786 compare$7771$7787) (car ((lambda (tmp$7789$7791) (if tmp$7789$7791 tmp$7789$7791 (cons (error "no expansion for" expr$7769$7785) #f))) ((lambda (v.1$7777$7792) ((lambda (w.2$7778$7794 pattern-ls4$7780$7795 body-ls5$7781$7796) ((lambda (lp.3$7779$7797) (set! lp.3$7779$7797 (lambda (w.2$7778$7798 pattern-ls4$7780$7799 body-ls5$7781$7800) (if (null? w.2$7778$7798) ((lambda (pattern$7801 body$7802) (cons (cons-source (rename$7770$7786 (quote lambda)) (cons-source (cons-source (rename$7770$7786 (quote expr)) (quote ()) (quote (expr))) (cons-source (cons-source (rename$7770$7786 (quote match)) (cons-source (rename$7770$7786 (quote expr)) (map (lambda (pattern$7803 body$7804) (cons-source pattern$7803 body$7804 (quote (pattern . body)))) pattern$7801 body$7802) (quote (expr (pattern . body) ...))) (quote (match expr (pattern . body) ...))) (quote ()) (quote ((match expr (pattern . body) ...)))) (quote ((expr) (match expr (pattern . body) ...)))) (quote (lambda (expr) (match expr (pattern . body) ...)))) #f)) (reverse pattern-ls4$7780$7799) (reverse body-ls5$7781$7800)) (if (pair? w.2$7778$7798) ((lambda (v.6$7782$7806) (if (pair? v.6$7782$7806) ((lambda (v.7$7783$7808) ((lambda (pattern$7809) ((lambda (v.8$7784$7810) ((lambda (body$7811) (lp.3$7779$7797 (cdr w.2$7778$7798) (cons pattern$7809 pattern-ls4$7780$7799) (cons body$7811 body-ls5$7781$7800))) v.8$7784$7810)) (cdr v.6$7782$7806))) v.7$7783$7808)) (car v.6$7782$7806)) #f)) (car w.2$7778$7798)) #f)))) (lp.3$7779$7797 w.2$7778$7794 pattern-ls4$7780$7795 body-ls5$7781$7796)) #f)) v.1$7777$7792 (quote ()) (quote ()))) (cdr expr$7769$7785))))) (match-extract-quasiquote-vars-step lambda (expr$7638$7668 rename$7639$7669 compare$7640$7670) (car ((lambda (tmp$7672$7674) (if tmp$7672$7674 tmp$7672$7674 (cons (error "no expansion for" expr$7638$7668) #f))) ((lambda (v.1$7646$7675) (if (pair? v.1$7646$7675) ((lambda (v.2$7647$7677) ((lambda (x$7678) ((lambda (v.3$7648$7679) (if (pair? v.3$7648$7679) ((lambda (v.4$7649$7681) ((lambda (k$7682) ((lambda (v.5$7650$7683) (if (pair? v.5$7650$7683) ((lambda (v.6$7651$7685) ((lambda (i$7686) ((lambda (v.7$7652$7687) (if (pair? v.7$7652$7687) ((lambda (v.8$7653$7689) ((lambda (v$7690) ((lambda (v.9$7654$7691) (if (pair? v.9$7654$7691) ((lambda (v.10$7655$7693) ((lambda (d$7694) ((lambda (v.11$7656$7695) (if (pair? v.11$7656$7695) ((lambda (v.12$7657$7697) ((lambda (w.13$7658$7699 v2-ls15$7660$7700 v2-ls-ls16$7661$7701) ((lambda (lp.14$7659$7702) (set! lp.14$7659$7702 (lambda (w.13$7658$7703 v2-ls15$7660$7704 v2-ls-ls16$7661$7705) (if (null? w.13$7658$7703) ((lambda (v2$7706 v2-ls$7707) ((lambda (v.22$7667$7708) (if (null? v.22$7667$7708) (cons (cons-source (rename$7639$7669 (quote match-extract-quasiquote-vars)) (cons-source x$7678 (cons-source k$7682 (cons-source (append (map (lambda (v2$7710) v2$7710) v2$7706) i$7686) (cons-source (append (map (lambda (v2$7711 v2-ls$7712) (cons-source v2$7711 (cons-source v2-ls$7712 (quote ()) (quote (v2-ls))) (quote (v2 v2-ls)))) v2$7706 v2-ls$7707) v$7690) (cons-source d$7694 (quote ()) (quote (d))) (quote (((v2 v2-ls) ... . v) d))) (quote ((v2 ... . i) ((v2 v2-ls) ... . v) d))) (quote (k (v2 ... . i) ((v2 v2-ls) ... . v) d))) (quote (x k (v2 ... . i) ((v2 v2-ls) ... . v) d))) (quote (match-extract-quasiquote-vars x k (v2 ... . i) ((v2 v2-ls) ... . v) d))) #f) #f)) (cdr v.11$7656$7695))) (reverse v2-ls15$7660$7704) (reverse v2-ls-ls16$7661$7705)) (if (pair? w.13$7658$7703) ((lambda (v.17$7662$7714) (if (pair? v.17$7662$7714) ((lambda (v.18$7663$7716) ((lambda (v2$7717) ((lambda (v.19$7664$7718) (if (pair? v.19$7664$7718) ((lambda (v.20$7665$7720) ((lambda (v2-ls$7721) ((lambda (v.21$7666$7722) (if (null? v.21$7666$7722) (lp.14$7659$7702 (cdr w.13$7658$7703) (cons v2$7717 v2-ls15$7660$7704) (cons v2-ls$7721 v2-ls-ls16$7661$7705)) #f)) (cdr v.19$7664$7718))) v.20$7665$7720)) (car v.19$7664$7718)) #f)) (cdr v.17$7662$7714))) v.18$7663$7716)) (car v.17$7662$7714)) #f)) (car w.13$7658$7703)) #f)))) (lp.14$7659$7702 w.13$7658$7699 v2-ls15$7660$7700 v2-ls-ls16$7661$7701)) #f)) v.12$7657$7697 (quote ()) (quote ()))) (car v.11$7656$7695)) #f)) (cdr v.9$7654$7691))) v.10$7655$7693)) (car v.9$7654$7691)) #f)) (cdr v.7$7652$7687))) v.8$7653$7689)) (car v.7$7652$7687)) #f)) (cdr v.5$7650$7683))) v.6$7651$7685)) (car v.5$7650$7683)) #f)) (cdr v.3$7648$7679))) v.4$7649$7681)) (car v.3$7648$7679)) #f)) (cdr v.1$7646$7675))) v.2$7647$7677)) (car v.1$7646$7675)) #f)) (cdr expr$7638$7668))))) (match-extract-quasiquote-vars lambda (expr$7146$7254 rename$7147$7255 compare$7148$7256) (car ((lambda (tmp$7258$7260) (if tmp$7258$7260 tmp$7258$7260 ((lambda (tmp$7262$7264) (if tmp$7262$7264 tmp$7262$7264 ((lambda (tmp$7266$7268) (if tmp$7266$7268 tmp$7266$7268 ((lambda (tmp$7270$7272) (if tmp$7270$7272 tmp$7270$7272 ((lambda (tmp$7274$7276) (if tmp$7274$7276 tmp$7274$7276 ((lambda (tmp$7278$7280) (if tmp$7278$7280 tmp$7278$7280 ((lambda (tmp$7282$7284) (if tmp$7282$7284 tmp$7282$7284 (cons (error "no expansion for" expr$7146$7254) #f))) ((lambda (v.90$7243$7285) (if (pair? v.90$7243$7285) ((lambda (v.91$7244$7287) ((lambda (x$7288) ((lambda (v.92$7245$7289) (if (pair? v.92$7245$7289) ((lambda (v.93$7246$7291) (if (list? v.93$7246$7291) ((lambda (k$7293) ((lambda (v.94$7247$7294) (if (pair? v.94$7247$7294) ((lambda (v.95$7248$7296) ((lambda (i$7297) ((lambda (v.96$7249$7298) (if (pair? v.96$7249$7298) ((lambda (v.97$7250$7300) ((lambda (v$7301) ((lambda (v.98$7251$7302) (if (pair? v.98$7251$7302) ((lambda (v.99$7252$7304) ((lambda (d$7305) ((lambda (v.100$7253$7306) (if (null? v.100$7253$7306) (cons (append (map (lambda (k$7308) k$7308) k$7293) (cons-source v$7301 (quote ()) (quote (v)))) #f) #f)) (cdr v.98$7251$7302))) v.99$7252$7304)) (car v.98$7251$7302)) #f)) (cdr v.96$7249$7298))) v.97$7250$7300)) (car v.96$7249$7298)) #f)) (cdr v.94$7247$7294))) v.95$7248$7296)) (car v.94$7247$7294)) #f)) (cdr v.92$7245$7289))) v.93$7246$7291) #f)) (car v.92$7245$7289)) #f)) (cdr v.90$7243$7285))) v.91$7244$7287)) (car v.90$7243$7285)) #f)) (cdr expr$7146$7254))))) ((lambda (v.78$7231$7309) (if (pair? v.78$7231$7309) ((lambda (v.79$7232$7311) (if (vector? v.79$7232$7311) ((lambda (v.80$7233$7313) (if (list? v.80$7233$7313) ((lambda (x$7315) ((lambda (v.81$7234$7316) (if (pair? v.81$7234$7316) ((lambda (v.82$7235$7318) ((lambda (k$7319) ((lambda (v.83$7236$7320) (if (pair? v.83$7236$7320) ((lambda (v.84$7237$7322) ((lambda (i$7323) ((lambda (v.85$7238$7324) (if (pair? v.85$7238$7324) ((lambda (v.86$7239$7326) ((lambda (v$7327) ((lambda (v.87$7240$7328) (if (pair? v.87$7240$7328) ((lambda (v.88$7241$7330) ((lambda (d$7331) ((lambda (v.89$7242$7332) (if (null? v.89$7242$7332) (cons (cons-source (rename$7147$7255 (quote match-extract-quasiquote-vars)) (cons-source x$7315 (cons-source k$7319 (cons-source i$7323 (cons-source v$7327 (cons-source d$7331 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote ((x ...) k i v d))) (quote (match-extract-quasiquote-vars (x ...) k i v d))) #f) #f)) (cdr v.87$7240$7328))) v.88$7241$7330)) (car v.87$7240$7328)) #f)) (cdr v.85$7238$7324))) v.86$7239$7326)) (car v.85$7238$7324)) #f)) (cdr v.83$7236$7320))) v.84$7237$7322)) (car v.83$7236$7320)) #f)) (cdr v.81$7234$7316))) v.82$7235$7318)) (car v.81$7234$7316)) #f)) (cdr v.78$7231$7309))) v.80$7233$7313) #f)) (vector->list v.79$7232$7311)) #f)) (car v.78$7231$7309)) #f)) (cdr expr$7146$7254))))) ((lambda (v.65$7218$7334) (if (pair? v.65$7218$7334) ((lambda (v.66$7219$7336) (if (pair? v.66$7219$7336) ((lambda (v.67$7220$7338) ((lambda (x$7339) ((lambda (v.68$7221$7340) ((lambda (y$7341) ((lambda (v.69$7222$7342) (if (pair? v.69$7222$7342) ((lambda (v.70$7223$7344) ((lambda (k$7345) ((lambda (v.71$7224$7346) (if (pair? v.71$7224$7346) ((lambda (v.72$7225$7348) ((lambda (i$7349) ((lambda (v.73$7226$7350) (if (pair? v.73$7226$7350) ((lambda (v.74$7227$7352) ((lambda (v$7353) ((lambda (v.75$7228$7354) (if (pair? v.75$7228$7354) ((lambda (v.76$7229$7356) ((lambda (d$7357) ((lambda (v.77$7230$7358) (if (null? v.77$7230$7358) (cons (cons-source (rename$7147$7255 (quote match-extract-quasiquote-vars)) (cons-source x$7339 (cons-source (cons-source (rename$7147$7255 (quote match-extract-quasiquote-vars-step)) (cons-source y$7341 (cons-source k$7345 (cons-source i$7349 (cons-source v$7353 (cons-source d$7357 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote (y k i v d))) (quote (match-extract-quasiquote-vars-step y k i v d))) (cons-source i$7349 (cons-source (quote ()) (cons-source d$7357 (quote ()) (quote (d))) (quote (() d))) (quote (i () d))) (quote ((match-extract-quasiquote-vars-step y k i v d) i () d))) (quote (x (match-extract-quasiquote-vars-step y k i v d) i () d))) (quote (match-extract-quasiquote-vars x (match-extract-quasiquote-vars-step y k i v d) i () d))) #f) #f)) (cdr v.75$7228$7354))) v.76$7229$7356)) (car v.75$7228$7354)) #f)) (cdr v.73$7226$7350))) v.74$7227$7352)) (car v.73$7226$7350)) #f)) (cdr v.71$7224$7346))) v.72$7225$7348)) (car v.71$7224$7346)) #f)) (cdr v.69$7222$7342))) v.70$7223$7344)) (car v.69$7222$7342)) #f)) (cdr v.65$7218$7334))) v.68$7221$7340)) (cdr v.66$7219$7336))) v.67$7220$7338)) (car v.66$7219$7336)) #f)) (car v.65$7218$7334)) #f)) (cdr expr$7146$7254))))) ((lambda (v.48$7201$7360) (if (pair? v.48$7201$7360) ((lambda (v.49$7202$7362) (if (pair? v.49$7202$7362) ((lambda (v.50$7203$7364) (if (compare$7148$7256 v.50$7203$7364 (rename$7147$7255 (quote unquote))) ((lambda (v.51$7204$7366) (if (pair? v.51$7204$7366) ((lambda (v.52$7205$7368) ((lambda (x$7369) ((lambda (v.53$7206$7370) (if (null? v.53$7206$7370) ((lambda (v.54$7207$7372) (if (pair? v.54$7207$7372) ((lambda (v.55$7208$7374) ((lambda (k$7375) ((lambda (v.56$7209$7376) (if (pair? v.56$7209$7376) ((lambda (v.57$7210$7378) ((lambda (i$7379) ((lambda (v.58$7211$7380) (if (pair? v.58$7211$7380) ((lambda (v.59$7212$7382) ((lambda (v$7383) ((lambda (v.60$7213$7384) (if (pair? v.60$7213$7384) ((lambda (v.61$7214$7386) (if (pair? v.61$7214$7386) ((lambda (v.62$7215$7388) (if (equal? v.62$7215$7388 #t) ((lambda (v.63$7216$7390) ((lambda (d$7391) ((lambda (v.64$7217$7392) (if (null? v.64$7217$7392) (cons (cons-source (rename$7147$7255 (quote match-extract-quasiquote-vars)) (cons-source x$7369 (cons-source k$7375 (cons-source i$7379 (cons-source v$7383 (cons-source d$7391 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote (x k i v d))) (quote (match-extract-quasiquote-vars x k i v d))) #f) #f)) (cdr v.60$7213$7384))) v.63$7216$7390)) (cdr v.61$7214$7386)) #f)) (car v.61$7214$7386)) #f)) (car v.60$7213$7384)) #f)) (cdr v.58$7211$7380))) v.59$7212$7382)) (car v.58$7211$7380)) #f)) (cdr v.56$7209$7376))) v.57$7210$7378)) (car v.56$7209$7376)) #f)) (cdr v.54$7207$7372))) v.55$7208$7374)) (car v.54$7207$7372)) #f)) (cdr v.48$7201$7360)) #f)) (cdr v.51$7204$7366))) v.52$7205$7368)) (car v.51$7204$7366)) #f)) (cdr v.49$7202$7362)) #f)) (car v.49$7202$7362)) #f)) (car v.48$7201$7360)) #f)) (cdr expr$7146$7254))))) ((lambda (v.31$7184$7394) (if (pair? v.31$7184$7394) ((lambda (v.32$7185$7396) (if (pair? v.32$7185$7396) ((lambda (v.33$7186$7398) (if (compare$7148$7256 v.33$7186$7398 (rename$7147$7255 (quote unquote))) ((lambda (v.34$7187$7400) (if (pair? v.34$7187$7400) ((lambda (v.35$7188$7402) ((lambda (x$7403) ((lambda (v.36$7189$7404) (if (null? v.36$7189$7404) ((lambda (v.37$7190$7406) (if (pair? v.37$7190$7406) ((lambda (v.38$7191$7408) ((lambda (k$7409) ((lambda (v.39$7192$7410) (if (pair? v.39$7192$7410) ((lambda (v.40$7193$7412) ((lambda (i$7413) ((lambda (v.41$7194$7414) (if (pair? v.41$7194$7414) ((lambda (v.42$7195$7416) ((lambda (v$7417) ((lambda (v.43$7196$7418) (if (pair? v.43$7196$7418) ((lambda (v.44$7197$7420) (if (pair? v.44$7197$7420) ((lambda (v.45$7198$7422) (if (equal? v.45$7198$7422 #t) ((lambda (v.46$7199$7424) (if (null? v.46$7199$7424) ((lambda (v.47$7200$7426) (if (null? v.47$7200$7426) (cons (cons-source (rename$7147$7255 (quote match-extract-underscore)) (cons-source x$7403 (cons-source k$7409 (cons-source i$7413 (cons-source v$7417 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote (x k i v))) (quote (match-extract-underscore x k i v))) #f) #f)) (cdr v.43$7196$7418)) #f)) (cdr v.44$7197$7420)) #f)) (car v.44$7197$7420)) #f)) (car v.43$7196$7418)) #f)) (cdr v.41$7194$7414))) v.42$7195$7416)) (car v.41$7194$7414)) #f)) (cdr v.39$7192$7410))) v.40$7193$7412)) (car v.39$7192$7410)) #f)) (cdr v.37$7190$7406))) v.38$7191$7408)) (car v.37$7190$7406)) #f)) (cdr v.31$7184$7394)) #f)) (cdr v.34$7187$7400))) v.35$7188$7402)) (car v.34$7187$7400)) #f)) (cdr v.32$7185$7396)) #f)) (car v.32$7185$7396)) #f)) (car v.31$7184$7394)) #f)) (cdr expr$7146$7254))))) ((lambda (v.16$7169$7428) (if (pair? v.16$7169$7428) ((lambda (v.17$7170$7430) (if (pair? v.17$7170$7430) ((lambda (v.18$7171$7432) (if (compare$7148$7256 v.18$7171$7432 (rename$7147$7255 (quote unquote-splicing))) ((lambda (v.19$7172$7434) (if (pair? v.19$7172$7434) ((lambda (v.20$7173$7436) ((lambda (x$7437) ((lambda (v.21$7174$7438) (if (null? v.21$7174$7438) ((lambda (v.22$7175$7440) (if (pair? v.22$7175$7440) ((lambda (v.23$7176$7442) ((lambda (k$7443) ((lambda (v.24$7177$7444) (if (pair? v.24$7177$7444) ((lambda (v.25$7178$7446) ((lambda (i$7447) ((lambda (v.26$7179$7448) (if (pair? v.26$7179$7448) ((lambda (v.27$7180$7450) ((lambda (v$7451) ((lambda (v.28$7181$7452) (if (pair? v.28$7181$7452) ((lambda (v.29$7182$7454) ((lambda (d$7455) ((lambda (v.30$7183$7456) (if (null? v.30$7183$7456) (cons (cons-source (rename$7147$7255 (quote match-extract-quasiquote-vars)) (cons-source (cons-source (rename$7147$7255 (quote unquote)) (cons-source x$7437 (quote ()) (quote (x))) (quote (unquote x))) (cons-source k$7443 (cons-source i$7447 (cons-source v$7451 (cons-source d$7455 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote ((unquote x) k i v d))) (quote (match-extract-quasiquote-vars (unquote x) k i v d))) #f) #f)) (cdr v.28$7181$7452))) v.29$7182$7454)) (car v.28$7181$7452)) #f)) (cdr v.26$7179$7448))) v.27$7180$7450)) (car v.26$7179$7448)) #f)) (cdr v.24$7177$7444))) v.25$7178$7446)) (car v.24$7177$7444)) #f)) (cdr v.22$7175$7440))) v.23$7176$7442)) (car v.22$7175$7440)) #f)) (cdr v.16$7169$7428)) #f)) (cdr v.19$7172$7434))) v.20$7173$7436)) (car v.19$7172$7434)) #f)) (cdr v.17$7170$7430)) #f)) (car v.17$7170$7430)) #f)) (car v.16$7169$7428)) #f)) (cdr expr$7146$7254))))) ((lambda (v.1$7154$7458) (if (pair? v.1$7154$7458) ((lambda (v.2$7155$7460) (if (pair? v.2$7155$7460) ((lambda (v.3$7156$7462) (if (compare$7148$7256 v.3$7156$7462 (rename$7147$7255 (quote quasiquote))) ((lambda (v.4$7157$7464) (if (pair? v.4$7157$7464) ((lambda (v.5$7158$7466) ((lambda (x$7467) ((lambda (v.6$7159$7468) (if (null? v.6$7159$7468) ((lambda (v.7$7160$7470) (if (pair? v.7$7160$7470) ((lambda (v.8$7161$7472) ((lambda (k$7473) ((lambda (v.9$7162$7474) (if (pair? v.9$7162$7474) ((lambda (v.10$7163$7476) ((lambda (i$7477) ((lambda (v.11$7164$7478) (if (pair? v.11$7164$7478) ((lambda (v.12$7165$7480) ((lambda (v$7481) ((lambda (v.13$7166$7482) (if (pair? v.13$7166$7482) ((lambda (v.14$7167$7484) ((lambda (d$7485) ((lambda (v.15$7168$7486) (if (null? v.15$7168$7486) (cons (cons-source (rename$7147$7255 (quote match-extract-quasiquote-vars)) (cons-source x$7467 (cons-source k$7473 (cons-source i$7477 (cons-source v$7481 (cons-source (cons-source #t d$7485 (quote (#t . d))) (quote ()) (quote ((#t . d)))) (quote (v (#t . d)))) (quote (i v (#t . d)))) (quote (k i v (#t . d)))) (quote (x k i v (#t . d)))) (quote (match-extract-quasiquote-vars x k i v (#t . d)))) #f) #f)) (cdr v.13$7166$7482))) v.14$7167$7484)) (car v.13$7166$7482)) #f)) (cdr v.11$7164$7478))) v.12$7165$7480)) (car v.11$7164$7478)) #f)) (cdr v.9$7162$7474))) v.10$7163$7476)) (car v.9$7162$7474)) #f)) (cdr v.7$7160$7470))) v.8$7161$7472)) (car v.7$7160$7470)) #f)) (cdr v.1$7154$7458)) #f)) (cdr v.4$7157$7464))) v.5$7158$7466)) (car v.4$7157$7464)) #f)) (cdr v.2$7155$7460)) #f)) (car v.2$7155$7460)) #f)) (car v.1$7154$7458)) #f)) (cdr expr$7146$7254))))) (match-extract-vars-step lambda (expr$7024$7052 rename$7025$7053 compare$7026$7054) (car ((lambda (tmp$7056$7058) (if tmp$7056$7058 tmp$7056$7058 (cons (error "no expansion for" expr$7024$7052) #f))) ((lambda (v.1$7032$7059) (if (pair? v.1$7032$7059) ((lambda (v.2$7033$7061) ((lambda (p$7062) ((lambda (v.3$7034$7063) (if (pair? v.3$7034$7063) ((lambda (v.4$7035$7065) ((lambda (k$7066) ((lambda (v.5$7036$7067) (if (pair? v.5$7036$7067) ((lambda (v.6$7037$7069) ((lambda (i$7070) ((lambda (v.7$7038$7071) (if (pair? v.7$7038$7071) ((lambda (v.8$7039$7073) ((lambda (v$7074) ((lambda (v.9$7040$7075) (if (pair? v.9$7040$7075) ((lambda (v.10$7041$7077) ((lambda (w.11$7042$7079 v2-ls13$7044$7080 v2-ls-ls14$7045$7081) ((lambda (lp.12$7043$7082) (set! lp.12$7043$7082 (lambda (w.11$7042$7083 v2-ls13$7044$7084 v2-ls-ls14$7045$7085) (if (null? w.11$7042$7083) ((lambda (v2$7086 v2-ls$7087) ((lambda (v.20$7051$7088) (if (null? v.20$7051$7088) (cons (cons-source (rename$7025$7053 (quote match-extract-underscore)) (cons-source p$7062 (cons-source k$7066 (cons-source (append (map (lambda (v2$7090) v2$7090) v2$7086) i$7070) (cons-source (append (map (lambda (v2$7091 v2-ls$7092) (cons-source v2$7091 (cons-source v2-ls$7092 (quote ()) (quote (v2-ls))) (quote (v2 v2-ls)))) v2$7086 v2-ls$7087) v$7074) (quote ()) (quote (((v2 v2-ls) ... . v)))) (quote ((v2 ... . i) ((v2 v2-ls) ... . v)))) (quote (k (v2 ... . i) ((v2 v2-ls) ... . v)))) (quote (p k (v2 ... . i) ((v2 v2-ls) ... . v)))) (quote (match-extract-underscore p k (v2 ... . i) ((v2 v2-ls) ... . v)))) #f) #f)) (cdr v.9$7040$7075))) (reverse v2-ls13$7044$7084) (reverse v2-ls-ls14$7045$7085)) (if (pair? w.11$7042$7083) ((lambda (v.15$7046$7094) (if (pair? v.15$7046$7094) ((lambda (v.16$7047$7096) ((lambda (v2$7097) ((lambda (v.17$7048$7098) (if (pair? v.17$7048$7098) ((lambda (v.18$7049$7100) ((lambda (v2-ls$7101) ((lambda (v.19$7050$7102) (if (null? v.19$7050$7102) (lp.12$7043$7082 (cdr w.11$7042$7083) (cons v2$7097 v2-ls13$7044$7084) (cons v2-ls$7101 v2-ls-ls14$7045$7085)) #f)) (cdr v.17$7048$7098))) v.18$7049$7100)) (car v.17$7048$7098)) #f)) (cdr v.15$7046$7094))) v.16$7047$7096)) (car v.15$7046$7094)) #f)) (car w.11$7042$7083)) #f)))) (lp.12$7043$7082 w.11$7042$7079 v2-ls13$7044$7080 v2-ls-ls14$7045$7081)) #f)) v.10$7041$7077 (quote ()) (quote ()))) (car v.9$7040$7075)) #f)) (cdr v.7$7038$7071))) v.8$7039$7073)) (car v.7$7038$7071)) #f)) (cdr v.5$7036$7067))) v.6$7037$7069)) (car v.5$7036$7067)) #f)) (cdr v.3$7034$7063))) v.4$7035$7065)) (car v.3$7034$7063)) #f)) (cdr v.1$7032$7059))) v.2$7033$7061)) (car v.1$7032$7059)) #f)) (cdr expr$7024$7052))))) (match-extract-vars lambda (expr$6141$6318 rename$6142$6319 compare$6143$6320) (car ((lambda (tmp$6322$6324) (if tmp$6322$6324 tmp$6322$6324 ((lambda (tmp$6326$6328) (if tmp$6326$6328 tmp$6326$6328 ((lambda (tmp$6330$6332) (if tmp$6330$6332 tmp$6330$6332 ((lambda (tmp$6334$6336) (if tmp$6334$6336 tmp$6334$6336 ((lambda (tmp$6338$6340) (if tmp$6338$6340 tmp$6338$6340 ((lambda (tmp$6342$6344) (if tmp$6342$6344 tmp$6342$6344 ((lambda (tmp$6346$6348) (if tmp$6346$6348 tmp$6346$6348 ((lambda (tmp$6350$6352) (if tmp$6350$6352 tmp$6350$6352 ((lambda (tmp$6354$6356) (if tmp$6354$6356 tmp$6354$6356 ((lambda (tmp$6358$6360) (if tmp$6358$6360 tmp$6358$6360 ((lambda (tmp$6362$6364) (if tmp$6362$6364 tmp$6362$6364 ((lambda (tmp$6366$6368) (if tmp$6366$6368 tmp$6366$6368 ((lambda (tmp$6370$6372) (if tmp$6370$6372 tmp$6370$6372 ((lambda (tmp$6374$6376) (if tmp$6374$6376 tmp$6374$6376 ((lambda (tmp$6378$6380) (if tmp$6378$6380 tmp$6378$6380 ((lambda (tmp$6382$6384) (if tmp$6382$6384 tmp$6382$6384 ((lambda (tmp$6386$6388) (if tmp$6386$6388 tmp$6386$6388 ((lambda (tmp$6390$6392) (if tmp$6390$6392 tmp$6390$6392 ((lambda (tmp$6394$6396) (if tmp$6394$6396 tmp$6394$6396 (cons (error "no expansion for" expr$6141$6318) #f))) ((lambda (v.161$6309$6397) (if (pair? v.161$6309$6397) ((lambda (v.162$6310$6399) ((lambda (p$6400) ((lambda (v.163$6311$6401) (if (pair? v.163$6311$6401) ((lambda (v.164$6312$6403) (if (list? v.164$6312$6403) ((lambda (k$6405) ((lambda (v.165$6313$6406) (if (pair? v.165$6313$6406) ((lambda (v.166$6314$6408) (if (list? v.166$6314$6408) ((lambda (i$6410) ((lambda (v.167$6315$6411) (if (pair? v.167$6315$6411) ((lambda (v.168$6316$6413) ((lambda (v$6414) ((lambda (v.169$6317$6415) (if (null? v.169$6317$6415) (cons (cons-source (rename$6142$6319 (quote let-syntax)) (cons-source (cons-source (cons-source (rename$6142$6319 (quote new-sym?)) (cons-source (cons-source (rename$6142$6319 (quote syntax-rules)) (cons-source i$6410 (cons-source (cons-source (cons-source (rename$6142$6319 (quote new-sym?)) (cons-source p$6400 (cons-source (rename$6142$6319 (quote sk)) (cons-source (rename$6142$6319 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote (p sk fk))) (quote (new-sym? p sk fk))) (cons-source (rename$6142$6319 (quote sk)) (quote ()) (quote (sk))) (quote ((new-sym? p sk fk) sk))) (cons-source (cons-source (cons-source (rename$6142$6319 (quote new-sym?)) (cons-source (rename$6142$6319 (quote any)) (cons-source (rename$6142$6319 (quote sk)) (cons-source (rename$6142$6319 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote (any sk fk))) (quote (new-sym? any sk fk))) (cons-source (rename$6142$6319 (quote fk)) (quote ()) (quote (fk))) (quote ((new-sym? any sk fk) fk))) (quote ()) (quote (((new-sym? any sk fk) fk)))) (quote (((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (quote ((i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (quote (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (quote ()) (quote ((syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk))))) (quote (new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk))))) (quote ()) (quote ((new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))))) (cons-source (cons-source (rename$6142$6319 (quote new-sym?)) (cons-source (rename$6142$6319 (quote random-sym-to-match)) (cons-source (append (map (lambda (k$6417) k$6417) k$6405) (cons-source (cons-source (cons-source p$6400 (cons-source (rename$6142$6319 (quote p-ls)) (quote ()) (quote (p-ls))) (quote (p p-ls))) v$6414 (quote ((p p-ls) . v))) (quote ()) (quote (((p p-ls) . v))))) (cons-source (append (map (lambda (k$6418) k$6418) k$6405) (cons-source v$6414 (quote ()) (quote (v)))) (quote ()) (quote ((k ... v)))) (quote ((k ... ((p p-ls) . v)) (k ... v)))) (quote (random-sym-to-match (k ... ((p p-ls) . v)) (k ... v)))) (quote (new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v)))) (quote ()) (quote ((new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v))))) (quote (((new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v))))) (quote (let-syntax ((new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v))))) #f) #f)) (cdr v.167$6315$6411))) v.168$6316$6413)) (car v.167$6315$6411)) #f)) (cdr v.165$6313$6406))) v.166$6314$6408) #f)) (car v.165$6313$6406)) #f)) (cdr v.163$6311$6401))) v.164$6312$6403) #f)) (car v.163$6311$6401)) #f)) (cdr v.161$6309$6397))) v.162$6310$6399)) (car v.161$6309$6397)) #f)) (cdr expr$6141$6318))))) ((lambda (v.152$6300$6419) (if (pair? v.152$6300$6419) ((lambda (v.153$6301$6421) (if (compare$6143$6320 v.153$6301$6421 (rename$6142$6319 (quote *..))) ((lambda (v.154$6302$6423) (if (pair? v.154$6302$6423) ((lambda (v.155$6303$6425) (if (list? v.155$6303$6425) ((lambda (k$6427) ((lambda (v.156$6304$6428) (if (pair? v.156$6304$6428) ((lambda (v.157$6305$6430) ((lambda (i$6431) ((lambda (v.158$6306$6432) (if (pair? v.158$6306$6432) ((lambda (v.159$6307$6434) ((lambda (v$6435) ((lambda (v.160$6308$6436) (if (null? v.160$6308$6436) (cons (append (map (lambda (k$6438) k$6438) k$6427) (cons-source v$6435 (quote ()) (quote (v)))) #f) #f)) (cdr v.158$6306$6432))) v.159$6307$6434)) (car v.158$6306$6432)) #f)) (cdr v.156$6304$6428))) v.157$6305$6430)) (car v.156$6304$6428)) #f)) (cdr v.154$6302$6423))) v.155$6303$6425) #f)) (car v.154$6302$6423)) #f)) (cdr v.152$6300$6419)) #f)) (car v.152$6300$6419)) #f)) (cdr expr$6141$6318))))) ((lambda (v.143$6291$6439) (if (pair? v.143$6291$6439) ((lambda (v.144$6292$6441) (if (compare$6143$6320 v.144$6292$6441 (rename$6142$6319 (quote =..))) ((lambda (v.145$6293$6443) (if (pair? v.145$6293$6443) ((lambda (v.146$6294$6445) (if (list? v.146$6294$6445) ((lambda (k$6447) ((lambda (v.147$6295$6448) (if (pair? v.147$6295$6448) ((lambda (v.148$6296$6450) ((lambda (i$6451) ((lambda (v.149$6297$6452) (if (pair? v.149$6297$6452) ((lambda (v.150$6298$6454) ((lambda (v$6455) ((lambda (v.151$6299$6456) (if (null? v.151$6299$6456) (cons (append (map (lambda (k$6458) k$6458) k$6447) (cons-source v$6455 (quote ()) (quote (v)))) #f) #f)) (cdr v.149$6297$6452))) v.150$6298$6454)) (car v.149$6297$6452)) #f)) (cdr v.147$6295$6448))) v.148$6296$6450)) (car v.147$6295$6448)) #f)) (cdr v.145$6293$6443))) v.146$6294$6445) #f)) (car v.145$6293$6443)) #f)) (cdr v.143$6291$6439)) #f)) (car v.143$6291$6439)) #f)) (cdr expr$6141$6318))))) ((lambda (v.134$6282$6459) (if (pair? v.134$6282$6459) ((lambda (v.135$6283$6461) (if (compare$6143$6320 v.135$6283$6461 (rename$6142$6319 (quote **1))) ((lambda (v.136$6284$6463) (if (pair? v.136$6284$6463) ((lambda (v.137$6285$6465) (if (list? v.137$6285$6465) ((lambda (k$6467) ((lambda (v.138$6286$6468) (if (pair? v.138$6286$6468) ((lambda (v.139$6287$6470) ((lambda (i$6471) ((lambda (v.140$6288$6472) (if (pair? v.140$6288$6472) ((lambda (v.141$6289$6474) ((lambda (v$6475) ((lambda (v.142$6290$6476) (if (null? v.142$6290$6476) (cons (append (map (lambda (k$6478) k$6478) k$6467) (cons-source v$6475 (quote ()) (quote (v)))) #f) #f)) (cdr v.140$6288$6472))) v.141$6289$6474)) (car v.140$6288$6472)) #f)) (cdr v.138$6286$6468))) v.139$6287$6470)) (car v.138$6286$6468)) #f)) (cdr v.136$6284$6463))) v.137$6285$6465) #f)) (car v.136$6284$6463)) #f)) (cdr v.134$6282$6459)) #f)) (car v.134$6282$6459)) #f)) (cdr expr$6141$6318))))) ((lambda (v.125$6273$6479) (if (pair? v.125$6273$6479) ((lambda (v.126$6274$6481) (if (compare$6143$6320 v.126$6274$6481 (rename$6142$6319 (quote ***))) ((lambda (v.127$6275$6483) (if (pair? v.127$6275$6483) ((lambda (v.128$6276$6485) (if (list? v.128$6276$6485) ((lambda (k$6487) ((lambda (v.129$6277$6488) (if (pair? v.129$6277$6488) ((lambda (v.130$6278$6490) ((lambda (i$6491) ((lambda (v.131$6279$6492) (if (pair? v.131$6279$6492) ((lambda (v.132$6280$6494) ((lambda (v$6495) ((lambda (v.133$6281$6496) (if (null? v.133$6281$6496) (cons (append (map (lambda (k$6498) k$6498) k$6487) (cons-source v$6495 (quote ()) (quote (v)))) #f) #f)) (cdr v.131$6279$6492))) v.132$6280$6494)) (car v.131$6279$6492)) #f)) (cdr v.129$6277$6488))) v.130$6278$6490)) (car v.129$6277$6488)) #f)) (cdr v.127$6275$6483))) v.128$6276$6485) #f)) (car v.127$6275$6483)) #f)) (cdr v.125$6273$6479)) #f)) (car v.125$6273$6479)) #f)) (cdr expr$6141$6318))))) ((lambda (v.116$6264$6499) (if (pair? v.116$6264$6499) ((lambda (v.117$6265$6501) (if (compare$6143$6320 v.117$6265$6501 (rename$6142$6319 (quote ___))) ((lambda (v.118$6266$6503) (if (pair? v.118$6266$6503) ((lambda (v.119$6267$6505) (if (list? v.119$6267$6505) ((lambda (k$6507) ((lambda (v.120$6268$6508) (if (pair? v.120$6268$6508) ((lambda (v.121$6269$6510) ((lambda (i$6511) ((lambda (v.122$6270$6512) (if (pair? v.122$6270$6512) ((lambda (v.123$6271$6514) ((lambda (v$6515) ((lambda (v.124$6272$6516) (if (null? v.124$6272$6516) (cons (append (map (lambda (k$6518) k$6518) k$6507) (cons-source v$6515 (quote ()) (quote (v)))) #f) #f)) (cdr v.122$6270$6512))) v.123$6271$6514)) (car v.122$6270$6512)) #f)) (cdr v.120$6268$6508))) v.121$6269$6510)) (car v.120$6268$6508)) #f)) (cdr v.118$6266$6503))) v.119$6267$6505) #f)) (car v.118$6266$6503)) #f)) (cdr v.116$6264$6499)) #f)) (car v.116$6264$6499)) #f)) (cdr expr$6141$6318))))) ((lambda (v.112$6260$6519) (if (pair? v.112$6260$6519) ((lambda (v.113$6261$6521) (if (vector? v.113$6261$6521) ((lambda (v.114$6262$6523) (if (list? v.114$6262$6523) ((lambda (p$6525) ((lambda (v.115$6263$6526) ((lambda (x$6527) (cons (cons-source (rename$6142$6319 (quote match-extract-underscore)) (cons-source p$6525 x$6527 (quote ((p ...) . x))) (quote (match-extract-underscore (p ...) . x))) #f)) v.115$6263$6526)) (cdr v.112$6260$6519))) v.114$6262$6523) #f)) (vector->list v.113$6261$6521)) #f)) (car v.112$6260$6519)) #f)) (cdr expr$6141$6318))))) ((lambda (v.101$6249$6528) (if (pair? v.101$6249$6528) ((lambda (v.102$6250$6530) (if (pair? v.102$6250$6530) ((lambda (v.103$6251$6532) ((lambda (p$6533) ((lambda (v.104$6252$6534) ((lambda (q$6535) ((lambda (v.105$6253$6536) (if (pair? v.105$6253$6536) ((lambda (v.106$6254$6538) ((lambda (k$6539) ((lambda (v.107$6255$6540) (if (pair? v.107$6255$6540) ((lambda (v.108$6256$6542) ((lambda (i$6543) ((lambda (v.109$6257$6544) (if (pair? v.109$6257$6544) ((lambda (v.110$6258$6546) ((lambda (v$6547) ((lambda (v.111$6259$6548) (if (null? v.111$6259$6548) (cons (cons-source (rename$6142$6319 (quote match-extract-underscore)) (cons-source p$6533 (cons-source (cons-source (rename$6142$6319 (quote match-extract-vars-step)) (cons-source q$6535 (cons-source k$6539 (cons-source i$6543 (cons-source v$6547 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote (q k i v))) (quote (match-extract-vars-step q k i v))) (cons-source i$6543 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-extract-vars-step q k i v) i ()))) (quote (p (match-extract-vars-step q k i v) i ()))) (quote (match-extract-underscore p (match-extract-vars-step q k i v) i ()))) #f) #f)) (cdr v.109$6257$6544))) v.110$6258$6546)) (car v.109$6257$6544)) #f)) (cdr v.107$6255$6540))) v.108$6256$6542)) (car v.107$6255$6540)) #f)) (cdr v.105$6253$6536))) v.106$6254$6538)) (car v.105$6253$6536)) #f)) (cdr v.101$6249$6528))) v.104$6252$6534)) (cdr v.102$6250$6530))) v.103$6251$6532)) (car v.102$6250$6530)) #f)) (car v.101$6249$6528)) #f)) (cdr expr$6141$6318))))) ((lambda (v.88$6236$6550) (if (pair? v.88$6236$6550) ((lambda (v.89$6237$6552) (if (pair? v.89$6237$6552) ((lambda (v.90$6238$6554) ((lambda (p$6555) ((lambda (v.91$6239$6556) (if (pair? v.91$6239$6556) ((lambda (v.92$6240$6558) ((lambda (q$6559) ((lambda (v.93$6241$6560) ((lambda (r$6561) ((lambda (v.94$6242$6562) (if (pair? v.94$6242$6562) ((lambda (v.95$6243$6564) ((lambda (k$6565) ((lambda (v.96$6244$6566) (if (pair? v.96$6244$6566) ((lambda (v.97$6245$6568) ((lambda (i$6569) ((lambda (v.98$6246$6570) (if (pair? v.98$6246$6570) ((lambda (v.99$6247$6572) ((lambda (v$6573) ((lambda (v.100$6248$6574) (if (null? v.100$6248$6574) (cons (cons-source (rename$6142$6319 (quote match-check-ellipsis)) (cons-source q$6559 (cons-source (cons-source (rename$6142$6319 (quote match-extract-underscore)) (cons-source (cons-source p$6555 r$6561 (quote (p . r))) (cons-source k$6565 (cons-source i$6569 (cons-source v$6573 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote ((p . r) k i v))) (quote (match-extract-underscore (p . r) k i v))) (cons-source (cons-source (rename$6142$6319 (quote match-extract-underscore)) (cons-source p$6555 (cons-source (cons-source (rename$6142$6319 (quote match-extract-vars-step)) (cons-source (cons-source q$6559 r$6561 (quote (q . r))) (cons-source k$6565 (cons-source i$6569 (cons-source v$6573 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote ((q . r) k i v))) (quote (match-extract-vars-step (q . r) k i v))) (cons-source i$6569 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-extract-vars-step (q . r) k i v) i ()))) (quote (p (match-extract-vars-step (q . r) k i v) i ()))) (quote (match-extract-underscore p (match-extract-vars-step (q . r) k i v) i ()))) (quote ()) (quote ((match-extract-underscore p (match-extract-vars-step (q . r) k i v) i ())))) (quote ((match-extract-underscore (p . r) k i v) (match-extract-underscore p (match-extract-vars-step (q . r) k i v) i ())))) (quote (q (match-extract-underscore (p . r) k i v) (match-extract-underscore p (match-extract-vars-step (q . r) k i v) i ())))) (quote (match-check-ellipsis q (match-extract-underscore (p . r) k i v) (match-extract-underscore p (match-extract-vars-step (q . r) k i v) i ())))) #f) #f)) (cdr v.98$6246$6570))) v.99$6247$6572)) (car v.98$6246$6570)) #f)) (cdr v.96$6244$6566))) v.97$6245$6568)) (car v.96$6244$6566)) #f)) (cdr v.94$6242$6562))) v.95$6243$6564)) (car v.94$6242$6562)) #f)) (cdr v.88$6236$6550))) v.93$6241$6560)) (cdr v.91$6239$6556))) v.92$6240$6558)) (car v.91$6239$6556)) #f)) (cdr v.89$6237$6552))) v.90$6238$6554)) (car v.89$6237$6552)) #f)) (car v.88$6236$6550)) #f)) (cdr expr$6141$6318))))) ((lambda (v.83$6231$6576) (if (pair? v.83$6231$6576) ((lambda (v.84$6232$6578) (if (pair? v.84$6232$6578) ((lambda (v.85$6233$6580) (if (compare$6143$6320 v.85$6233$6580 (rename$6142$6319 (quote not))) ((lambda (v.86$6234$6582) ((lambda (p$6583) ((lambda (v.87$6235$6584) ((lambda (x$6585) (cons (cons-source (rename$6142$6319 (quote match-extract-underscore)) (cons-source p$6583 x$6585 (quote (p . x))) (quote (match-extract-underscore p . x))) #f)) v.87$6235$6584)) (cdr v.83$6231$6576))) v.86$6234$6582)) (cdr v.84$6232$6578)) #f)) (car v.84$6232$6578)) #f)) (car v.83$6231$6576)) #f)) (cdr expr$6141$6318))))) ((lambda (v.78$6226$6586) (if (pair? v.78$6226$6586) ((lambda (v.79$6227$6588) (if (pair? v.79$6227$6588) ((lambda (v.80$6228$6590) (if (compare$6143$6320 v.80$6228$6590 (rename$6142$6319 (quote or))) ((lambda (v.81$6229$6592) ((lambda (p$6593) ((lambda (v.82$6230$6594) ((lambda (x$6595) (cons (cons-source (rename$6142$6319 (quote match-extract-underscore)) (cons-source p$6593 x$6595 (quote (p . x))) (quote (match-extract-underscore p . x))) #f)) v.82$6230$6594)) (cdr v.78$6226$6586))) v.81$6229$6592)) (cdr v.79$6227$6588)) #f)) (car v.79$6227$6588)) #f)) (car v.78$6226$6586)) #f)) (cdr expr$6141$6318))))) ((lambda (v.73$6221$6596) (if (pair? v.73$6221$6596) ((lambda (v.74$6222$6598) (if (pair? v.74$6222$6598) ((lambda (v.75$6223$6600) (if (compare$6143$6320 v.75$6223$6600 (rename$6142$6319 (quote and))) ((lambda (v.76$6224$6602) ((lambda (p$6603) ((lambda (v.77$6225$6604) ((lambda (x$6605) (cons (cons-source (rename$6142$6319 (quote match-extract-underscore)) (cons-source p$6603 x$6605 (quote (p . x))) (quote (match-extract-underscore p . x))) #f)) v.77$6225$6604)) (cdr v.73$6221$6596))) v.76$6224$6602)) (cdr v.74$6222$6598)) #f)) (car v.74$6222$6598)) #f)) (car v.73$6221$6596)) #f)) (cdr expr$6141$6318))))) ((lambda (v.60$6208$6606) (if (pair? v.60$6208$6606) ((lambda (v.61$6209$6608) (if (pair? v.61$6209$6608) ((lambda (v.62$6210$6610) (if (compare$6143$6320 v.62$6210$6610 (rename$6142$6319 (quote quasiquote))) ((lambda (v.63$6211$6612) (if (pair? v.63$6211$6612) ((lambda (v.64$6212$6614) ((lambda (x$6615) ((lambda (v.65$6213$6616) (if (null? v.65$6213$6616) ((lambda (v.66$6214$6618) (if (pair? v.66$6214$6618) ((lambda (v.67$6215$6620) ((lambda (k$6621) ((lambda (v.68$6216$6622) (if (pair? v.68$6216$6622) ((lambda (v.69$6217$6624) ((lambda (i$6625) ((lambda (v.70$6218$6626) (if (pair? v.70$6218$6626) ((lambda (v.71$6219$6628) ((lambda (v$6629) ((lambda (v.72$6220$6630) (if (null? v.72$6220$6630) (cons (cons-source (rename$6142$6319 (quote match-extract-quasiquote-vars)) (cons-source x$6615 (cons-source k$6621 (cons-source i$6625 (cons-source v$6629 (cons-source (cons-source #t (quote ()) (quote (#t))) (quote ()) (quote ((#t)))) (quote (v (#t)))) (quote (i v (#t)))) (quote (k i v (#t)))) (quote (x k i v (#t)))) (quote (match-extract-quasiquote-vars x k i v (#t)))) #f) #f)) (cdr v.70$6218$6626))) v.71$6219$6628)) (car v.70$6218$6626)) #f)) (cdr v.68$6216$6622))) v.69$6217$6624)) (car v.68$6216$6622)) #f)) (cdr v.66$6214$6618))) v.67$6215$6620)) (car v.66$6214$6618)) #f)) (cdr v.60$6208$6606)) #f)) (cdr v.63$6211$6612))) v.64$6212$6614)) (car v.63$6211$6612)) #f)) (cdr v.61$6209$6608)) #f)) (car v.61$6209$6608)) #f)) (car v.60$6208$6606)) #f)) (cdr expr$6141$6318))))) ((lambda (v.47$6195$6632) (if (pair? v.47$6195$6632) ((lambda (v.48$6196$6634) (if (pair? v.48$6196$6634) ((lambda (v.49$6197$6636) (if (compare$6143$6320 v.49$6197$6636 (rename$6142$6319 (quote quote))) ((lambda (v.50$6198$6638) (if (pair? v.50$6198$6638) ((lambda (v.51$6199$6640) ((lambda (x$6641) ((lambda (v.52$6200$6642) (if (null? v.52$6200$6642) ((lambda (v.53$6201$6644) (if (pair? v.53$6201$6644) ((lambda (v.54$6202$6646) (if (list? v.54$6202$6646) ((lambda (k$6648) ((lambda (v.55$6203$6649) (if (pair? v.55$6203$6649) ((lambda (v.56$6204$6651) ((lambda (i$6652) ((lambda (v.57$6205$6653) (if (pair? v.57$6205$6653) ((lambda (v.58$6206$6655) ((lambda (v$6656) ((lambda (v.59$6207$6657) (if (null? v.59$6207$6657) (cons (append (map (lambda (k$6659) k$6659) k$6648) (cons-source v$6656 (quote ()) (quote (v)))) #f) #f)) (cdr v.57$6205$6653))) v.58$6206$6655)) (car v.57$6205$6653)) #f)) (cdr v.55$6203$6649))) v.56$6204$6651)) (car v.55$6203$6649)) #f)) (cdr v.53$6201$6644))) v.54$6202$6646) #f)) (car v.53$6201$6644)) #f)) (cdr v.47$6195$6632)) #f)) (cdr v.50$6198$6638))) v.51$6199$6640)) (car v.50$6198$6638)) #f)) (cdr v.48$6196$6634)) #f)) (car v.48$6196$6634)) #f)) (car v.47$6195$6632)) #f)) (cdr expr$6141$6318))))) ((lambda (v.38$6186$6660) (if (pair? v.38$6186$6660) ((lambda (v.39$6187$6662) (if (pair? v.39$6187$6662) ((lambda (v.40$6188$6664) (if (compare$6143$6320 v.40$6188$6664 (rename$6142$6319 (quote =))) ((lambda (v.41$6189$6666) (if (pair? v.41$6189$6666) ((lambda (v.42$6190$6668) ((lambda (proc$6669) ((lambda (v.43$6191$6670) (if (pair? v.43$6191$6670) ((lambda (v.44$6192$6672) ((lambda (p$6673) ((lambda (v.45$6193$6674) (if (null? v.45$6193$6674) ((lambda (v.46$6194$6676) ((lambda (x$6677) (cons (cons-source (rename$6142$6319 (quote match-extract-underscore)) (cons-source p$6673 x$6677 (quote (p . x))) (quote (match-extract-underscore p . x))) #f)) v.46$6194$6676)) (cdr v.38$6186$6660)) #f)) (cdr v.43$6191$6670))) v.44$6192$6672)) (car v.43$6191$6670)) #f)) (cdr v.41$6189$6666))) v.42$6190$6668)) (car v.41$6189$6666)) #f)) (cdr v.39$6187$6662)) #f)) (car v.39$6187$6662)) #f)) (car v.38$6186$6660)) #f)) (cdr expr$6141$6318))))) ((lambda (v.22$6170$6678) (if (pair? v.22$6170$6678) ((lambda (v.23$6171$6680) (if (pair? v.23$6171$6680) ((lambda (v.24$6172$6682) (if (compare$6143$6320 v.24$6172$6682 (rename$6142$6319 (quote object))) ((lambda (v.25$6173$6684) (if (pair? v.25$6173$6684) ((lambda (v.26$6174$6686) ((lambda (rec$6687) ((lambda (v.27$6175$6688) ((lambda (w.28$6176$6690 f-ls30$6178$6691 p-ls31$6179$6692) ((lambda (lp.29$6177$6693) (set! lp.29$6177$6693 (lambda (w.28$6176$6694 f-ls30$6178$6695 p-ls31$6179$6696) (if (null? w.28$6176$6694) ((lambda (f$6697 p$6698) ((lambda (v.37$6185$6699) ((lambda (x$6700) (cons (cons-source (rename$6142$6319 (quote match-extract-underscore)) (cons-source p$6698 x$6700 (quote ((p ...) . x))) (quote (match-extract-underscore (p ...) . x))) #f)) v.37$6185$6699)) (cdr v.22$6170$6678))) (reverse f-ls30$6178$6695) (reverse p-ls31$6179$6696)) (if (pair? w.28$6176$6694) ((lambda (v.32$6180$6702) (if (pair? v.32$6180$6702) ((lambda (v.33$6181$6704) ((lambda (f$6705) ((lambda (v.34$6182$6706) (if (pair? v.34$6182$6706) ((lambda (v.35$6183$6708) ((lambda (p$6709) ((lambda (v.36$6184$6710) (if (null? v.36$6184$6710) (lp.29$6177$6693 (cdr w.28$6176$6694) (cons f$6705 f-ls30$6178$6695) (cons p$6709 p-ls31$6179$6696)) #f)) (cdr v.34$6182$6706))) v.35$6183$6708)) (car v.34$6182$6706)) #f)) (cdr v.32$6180$6702))) v.33$6181$6704)) (car v.32$6180$6702)) #f)) (car w.28$6176$6694)) #f)))) (lp.29$6177$6693 w.28$6176$6690 f-ls30$6178$6691 p-ls31$6179$6692)) #f)) v.27$6175$6688 (quote ()) (quote ()))) (cdr v.25$6173$6684))) v.26$6174$6686)) (car v.25$6173$6684)) #f)) (cdr v.23$6171$6680)) #f)) (car v.23$6171$6680)) #f)) (car v.22$6170$6678)) #f)) (cdr expr$6141$6318))))) ((lambda (v.15$6163$6712) (if (pair? v.15$6163$6712) ((lambda (v.16$6164$6714) (if (pair? v.16$6164$6714) ((lambda (v.17$6165$6716) (if (compare$6143$6320 v.17$6165$6716 (rename$6142$6319 (quote struct))) ((lambda (v.18$6166$6718) (if (pair? v.18$6166$6718) ((lambda (v.19$6167$6720) ((lambda (rec$6721) ((lambda (v.20$6168$6722) ((lambda (p$6723) ((lambda (v.21$6169$6724) ((lambda (x$6725) (cons (cons-source (rename$6142$6319 (quote match-extract-underscore)) (cons-source p$6723 x$6725 (quote (p . x))) (quote (match-extract-underscore p . x))) #f)) v.21$6169$6724)) (cdr v.15$6163$6712))) v.20$6168$6722)) (cdr v.18$6166$6718))) v.19$6167$6720)) (car v.18$6166$6718)) #f)) (cdr v.16$6164$6714)) #f)) (car v.16$6164$6714)) #f)) (car v.15$6163$6712)) #f)) (cdr expr$6141$6318))))) ((lambda (v.8$6156$6726) (if (pair? v.8$6156$6726) ((lambda (v.9$6157$6728) (if (pair? v.9$6157$6728) ((lambda (v.10$6158$6730) (if (compare$6143$6320 v.10$6158$6730 (rename$6142$6319 (quote $))) ((lambda (v.11$6159$6732) (if (pair? v.11$6159$6732) ((lambda (v.12$6160$6734) ((lambda (rec$6735) ((lambda (v.13$6161$6736) ((lambda (p$6737) ((lambda (v.14$6162$6738) ((lambda (x$6739) (cons (cons-source (rename$6142$6319 (quote match-extract-underscore)) (cons-source p$6737 x$6739 (quote (p . x))) (quote (match-extract-underscore p . x))) #f)) v.14$6162$6738)) (cdr v.8$6156$6726))) v.13$6161$6736)) (cdr v.11$6159$6732))) v.12$6160$6734)) (car v.11$6159$6732)) #f)) (cdr v.9$6157$6728)) #f)) (car v.9$6157$6728)) #f)) (car v.8$6156$6726)) #f)) (cdr expr$6141$6318))))) ((lambda (v.1$6149$6740) (if (pair? v.1$6149$6740) ((lambda (v.2$6150$6742) (if (pair? v.2$6150$6742) ((lambda (v.3$6151$6744) (if (compare$6143$6320 v.3$6151$6744 (rename$6142$6319 (quote ?))) ((lambda (v.4$6152$6746) (if (pair? v.4$6152$6746) ((lambda (v.5$6153$6748) ((lambda (pred$6749) ((lambda (v.6$6154$6750) ((lambda (p$6751) ((lambda (v.7$6155$6752) ((lambda (x$6753) (cons (cons-source (rename$6142$6319 (quote match-extract-underscore)) (cons-source p$6751 x$6753 (quote (p . x))) (quote (match-extract-underscore p . x))) #f)) v.7$6155$6752)) (cdr v.1$6149$6740))) v.6$6154$6750)) (cdr v.4$6152$6746))) v.5$6153$6748)) (car v.4$6152$6746)) #f)) (cdr v.2$6150$6742)) #f)) (car v.2$6150$6742)) #f)) (car v.1$6149$6740)) #f)) (cdr expr$6141$6318))))) (match-extract-underscore lambda (expr$6075$6092 rename$6076$6093 compare$6077$6094) (car ((lambda (tmp$6096$6098) (if tmp$6096$6098 tmp$6096$6098 (cons (error "no expansion for" expr$6075$6092) #f))) ((lambda (v.1$6083$6099) (if (pair? v.1$6083$6099) ((lambda (v.2$6084$6101) ((lambda (p$6102) ((lambda (v.3$6085$6103) (if (pair? v.3$6085$6103) ((lambda (v.4$6086$6105) (if (list? v.4$6086$6105) ((lambda (k$6107) ((lambda (v.5$6087$6108) (if (pair? v.5$6087$6108) ((lambda (v.6$6088$6110) ((lambda (i$6111) ((lambda (v.7$6089$6112) (if (pair? v.7$6089$6112) ((lambda (v.8$6090$6114) ((lambda (v$6115) ((lambda (v.9$6091$6116) (if (null? v.9$6091$6116) (cons (cons-source (rename$6076$6093 (quote underscore?)) (cons-source p$6102 (cons-source (append (map (lambda (k$6118) k$6118) k$6107) (cons-source v$6115 (quote ()) (quote (v)))) (cons-source (cons-source (rename$6076$6093 (quote match-extract-vars)) (cons-source p$6102 (cons-source k$6107 (cons-source i$6111 (cons-source v$6115 (quote ()) (quote (v))) (quote (i v))) (quote ((k ...) i v))) (quote (p (k ...) i v))) (quote (match-extract-vars p (k ...) i v))) (quote ()) (quote ((match-extract-vars p (k ...) i v)))) (quote ((k ... v) (match-extract-vars p (k ...) i v)))) (quote (p (k ... v) (match-extract-vars p (k ...) i v)))) (quote (underscore? p (k ... v) (match-extract-vars p (k ...) i v)))) #f) #f)) (cdr v.7$6089$6112))) v.8$6090$6114)) (car v.7$6089$6112)) #f)) (cdr v.5$6087$6108))) v.6$6088$6110)) (car v.5$6087$6108)) #f)) (cdr v.3$6085$6103))) v.4$6086$6105) #f)) (car v.3$6085$6103)) #f)) (cdr v.1$6083$6099))) v.2$6084$6101)) (car v.1$6083$6099)) #f)) (cdr expr$6075$6092))))) (match-record-named-refs lambda (expr$5885$5929 rename$5886$5930 compare$5887$5931) (car ((lambda (tmp$5933$5935) (if tmp$5933$5935 tmp$5933$5935 ((lambda (tmp$5937$5939) (if tmp$5937$5939 tmp$5937$5939 (cons (error "no expansion for" expr$5885$5929) #f))) ((lambda (v.22$5914$5940) (if (pair? v.22$5914$5940) ((lambda (v.23$5915$5942) ((lambda (v$5943) ((lambda (v.24$5916$5944) (if (pair? v.24$5916$5944) ((lambda (v.25$5917$5946) ((lambda (rec$5947) ((lambda (v.26$5918$5948) (if (pair? v.26$5918$5948) ((lambda (v.27$5919$5950) (if (null? v.27$5919$5950) ((lambda (v.28$5920$5952) (if (pair? v.28$5920$5952) ((lambda (v.29$5921$5954) ((lambda (g+s$5955) ((lambda (v.30$5922$5956) (if (pair? v.30$5922$5956) ((lambda (v.31$5923$5958) (if (list? v.31$5923$5958) ((lambda (sk$5960) ((lambda (v.32$5924$5961) (if (pair? v.32$5924$5961) ((lambda (v.33$5925$5963) ((lambda (fk$5964) ((lambda (v.34$5926$5965) (if (pair? v.34$5926$5965) ((lambda (v.35$5927$5967) ((lambda (i$5968) ((lambda (v.36$5928$5969) (if (null? v.36$5928$5969) (cons (append (map (lambda (sk$5971) sk$5971) sk$5960) (cons-source i$5968 (quote ()) (quote (i)))) #f) #f)) (cdr v.34$5926$5965))) v.35$5927$5967)) (car v.34$5926$5965)) #f)) (cdr v.32$5924$5961))) v.33$5925$5963)) (car v.32$5924$5961)) #f)) (cdr v.30$5922$5956))) v.31$5923$5958) #f)) (car v.30$5922$5956)) #f)) (cdr v.28$5920$5952))) v.29$5921$5954)) (car v.28$5920$5952)) #f)) (cdr v.26$5918$5948)) #f)) (car v.26$5918$5948)) #f)) (cdr v.24$5916$5944))) v.25$5917$5946)) (car v.24$5916$5944)) #f)) (cdr v.22$5914$5940))) v.23$5915$5942)) (car v.22$5914$5940)) #f)) (cdr expr$5885$5929))))) ((lambda (v.1$5893$5972) (if (pair? v.1$5893$5972) ((lambda (v.2$5894$5974) ((lambda (v$5975) ((lambda (v.3$5895$5976) (if (pair? v.3$5895$5976) ((lambda (v.4$5896$5978) ((lambda (rec$5979) ((lambda (v.5$5897$5980) (if (pair? v.5$5897$5980) ((lambda (v.6$5898$5982) (if (pair? v.6$5898$5982) ((lambda (v.7$5899$5984) (if (pair? v.7$5899$5984) ((lambda (v.8$5900$5986) ((lambda (f$5987) ((lambda (v.9$5901$5988) (if (pair? v.9$5901$5988) ((lambda (v.10$5902$5990) ((lambda (p$5991) ((lambda (v.11$5903$5992) (if (null? v.11$5903$5992) ((lambda (v.12$5904$5994) ((lambda (q$5995) ((lambda (v.13$5905$5996) (if (pair? v.13$5905$5996) ((lambda (v.14$5906$5998) ((lambda (g+s$5999) ((lambda (v.15$5907$6000) (if (pair? v.15$5907$6000) ((lambda (v.16$5908$6002) ((lambda (sk$6003) ((lambda (v.17$5909$6004) (if (pair? v.17$5909$6004) ((lambda (v.18$5910$6006) ((lambda (fk$6007) ((lambda (v.19$5911$6008) (if (pair? v.19$5911$6008) ((lambda (v.20$5912$6010) ((lambda (i$6011) ((lambda (v.21$5913$6012) (if (null? v.21$5913$6012) (cons (cons-source (rename$5886$5930 (quote let)) (cons-source (cons-source (cons-source (rename$5886$5930 (quote w)) (cons-source (cons-source (rename$5886$5930 (quote slot-ref)) (cons-source rec$5979 (cons-source v$5975 (cons-source (cons-source (rename$5886$5930 (quote quote)) (cons-source f$5987 (quote ()) (quote (f))) (quote (quote f))) (quote ()) (quote ((quote f)))) (quote (v (quote f)))) (quote (rec v (quote f)))) (quote (slot-ref rec v (quote f)))) (quote ()) (quote ((slot-ref rec v (quote f))))) (quote (w (slot-ref rec v (quote f))))) (quote ()) (quote ((w (slot-ref rec v (quote f)))))) (cons-source (cons-source (rename$5886$5930 (quote match-one)) (cons-source (rename$5886$5930 (quote w)) (cons-source p$5991 (cons-source (cons-source (cons-source (rename$5886$5930 (quote slot-ref)) (cons-source rec$5979 (cons-source v$5975 (cons-source (cons-source (rename$5886$5930 (quote quote)) (cons-source f$5987 (quote ()) (quote (f))) (quote (quote f))) (quote ()) (quote ((quote f)))) (quote (v (quote f)))) (quote (rec v (quote f)))) (quote (slot-ref rec v (quote f)))) (cons-source (cons-source (rename$5886$5930 (quote slot-set!)) (cons-source rec$5979 (cons-source v$5975 (cons-source (cons-source (rename$5886$5930 (quote quote)) (cons-source f$5987 (quote ()) (quote (f))) (quote (quote f))) (quote ()) (quote ((quote f)))) (quote (v (quote f)))) (quote (rec v (quote f)))) (quote (slot-set! rec v (quote f)))) (quote ()) (quote ((slot-set! rec v (quote f))))) (quote ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))))) (cons-source (cons-source (rename$5886$5930 (quote match-record-named-refs)) (cons-source v$5975 (cons-source rec$5979 (cons-source q$5995 (cons-source g+s$5999 (cons-source sk$6003 (cons-source fk$6007 (quote ()) (quote (fk))) (quote (sk fk))) (quote (g+s sk fk))) (quote (q g+s sk fk))) (quote (rec q g+s sk fk))) (quote (v rec q g+s sk fk))) (quote (match-record-named-refs v rec q g+s sk fk))) (cons-source fk$6007 (cons-source i$6011 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-record-named-refs v rec q g+s sk fk) fk i))) (quote (((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote (p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote (w p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote (match-one w p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote ()) (quote ((match-one w p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i)))) (quote (((w (slot-ref rec v (quote f)))) (match-one w p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i)))) (quote (let ((w (slot-ref rec v (quote f)))) (match-one w p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i)))) #f) #f)) (cdr v.19$5911$6008))) v.20$5912$6010)) (car v.19$5911$6008)) #f)) (cdr v.17$5909$6004))) v.18$5910$6006)) (car v.17$5909$6004)) #f)) (cdr v.15$5907$6000))) v.16$5908$6002)) (car v.15$5907$6000)) #f)) (cdr v.13$5905$5996))) v.14$5906$5998)) (car v.13$5905$5996)) #f)) (cdr v.5$5897$5980))) v.12$5904$5994)) (cdr v.6$5898$5982)) #f)) (cdr v.9$5901$5988))) v.10$5902$5990)) (car v.9$5901$5988)) #f)) (cdr v.7$5899$5984))) v.8$5900$5986)) (car v.7$5899$5984)) #f)) (car v.6$5898$5982)) #f)) (car v.5$5897$5980)) #f)) (cdr v.3$5895$5976))) v.4$5896$5978)) (car v.3$5895$5976)) #f)) (cdr v.1$5893$5972))) v.2$5894$5974)) (car v.1$5893$5972)) #f)) (cdr expr$5885$5929))))) (match-record-refs lambda (expr$5694$5738 rename$5695$5739 compare$5696$5740) (car ((lambda (tmp$5742$5744) (if tmp$5742$5744 tmp$5742$5744 ((lambda (tmp$5746$5748) (if tmp$5746$5748 tmp$5746$5748 (cons (error "no expansion for" expr$5694$5738) #f))) ((lambda (v.20$5721$5749) (if (pair? v.20$5721$5749) ((lambda (v.21$5722$5751) ((lambda (v$5752) ((lambda (v.22$5723$5753) (if (pair? v.22$5723$5753) ((lambda (v.23$5724$5755) ((lambda (rec$5756) ((lambda (v.24$5725$5757) (if (pair? v.24$5725$5757) ((lambda (v.25$5726$5759) ((lambda (n$5760) ((lambda (v.26$5727$5761) (if (pair? v.26$5727$5761) ((lambda (v.27$5728$5763) (if (null? v.27$5728$5763) ((lambda (v.28$5729$5765) (if (pair? v.28$5729$5765) ((lambda (v.29$5730$5767) ((lambda (g+s$5768) ((lambda (v.30$5731$5769) (if (pair? v.30$5731$5769) ((lambda (v.31$5732$5771) (if (list? v.31$5732$5771) ((lambda (sk$5773) ((lambda (v.32$5733$5774) (if (pair? v.32$5733$5774) ((lambda (v.33$5734$5776) ((lambda (fk$5777) ((lambda (v.34$5735$5778) (if (pair? v.34$5735$5778) ((lambda (v.35$5736$5780) ((lambda (i$5781) ((lambda (v.36$5737$5782) (if (null? v.36$5737$5782) (cons (append (map (lambda (sk$5784) sk$5784) sk$5773) (cons-source i$5781 (quote ()) (quote (i)))) #f) #f)) (cdr v.34$5735$5778))) v.35$5736$5780)) (car v.34$5735$5778)) #f)) (cdr v.32$5733$5774))) v.33$5734$5776)) (car v.32$5733$5774)) #f)) (cdr v.30$5731$5769))) v.31$5732$5771) #f)) (car v.30$5731$5769)) #f)) (cdr v.28$5729$5765))) v.29$5730$5767)) (car v.28$5729$5765)) #f)) (cdr v.26$5727$5761)) #f)) (car v.26$5727$5761)) #f)) (cdr v.24$5725$5757))) v.25$5726$5759)) (car v.24$5725$5757)) #f)) (cdr v.22$5723$5753))) v.23$5724$5755)) (car v.22$5723$5753)) #f)) (cdr v.20$5721$5749))) v.21$5722$5751)) (car v.20$5721$5749)) #f)) (cdr expr$5694$5738))))) ((lambda (v.1$5702$5785) (if (pair? v.1$5702$5785) ((lambda (v.2$5703$5787) ((lambda (v$5788) ((lambda (v.3$5704$5789) (if (pair? v.3$5704$5789) ((lambda (v.4$5705$5791) ((lambda (rec$5792) ((lambda (v.5$5706$5793) (if (pair? v.5$5706$5793) ((lambda (v.6$5707$5795) ((lambda (n$5796) ((lambda (v.7$5708$5797) (if (pair? v.7$5708$5797) ((lambda (v.8$5709$5799) (if (pair? v.8$5709$5799) ((lambda (v.9$5710$5801) ((lambda (p$5802) ((lambda (v.10$5711$5803) ((lambda (q$5804) ((lambda (v.11$5712$5805) (if (pair? v.11$5712$5805) ((lambda (v.12$5713$5807) ((lambda (g+s$5808) ((lambda (v.13$5714$5809) (if (pair? v.13$5714$5809) ((lambda (v.14$5715$5811) ((lambda (sk$5812) ((lambda (v.15$5716$5813) (if (pair? v.15$5716$5813) ((lambda (v.16$5717$5815) ((lambda (fk$5816) ((lambda (v.17$5718$5817) (if (pair? v.17$5718$5817) ((lambda (v.18$5719$5819) ((lambda (i$5820) ((lambda (v.19$5720$5821) (if (null? v.19$5720$5821) (cons (cons-source (rename$5695$5739 (quote let)) (cons-source (cons-source (cons-source (rename$5695$5739 (quote w)) (cons-source (cons-source (rename$5695$5739 (quote slot-ref)) (cons-source rec$5792 (cons-source v$5788 (cons-source n$5796 (quote ()) (quote (n))) (quote (v n))) (quote (rec v n))) (quote (slot-ref rec v n))) (quote ()) (quote ((slot-ref rec v n)))) (quote (w (slot-ref rec v n)))) (quote ()) (quote ((w (slot-ref rec v n))))) (cons-source (cons-source (rename$5695$5739 (quote match-one)) (cons-source (rename$5695$5739 (quote w)) (cons-source p$5802 (cons-source (cons-source (cons-source (rename$5695$5739 (quote slot-ref)) (cons-source rec$5792 (cons-source v$5788 (cons-source n$5796 (quote ()) (quote (n))) (quote (v n))) (quote (rec v n))) (quote (slot-ref rec v n))) (cons-source (cons-source (rename$5695$5739 (quote slot-set!)) (cons-source rec$5792 (cons-source v$5788 (cons-source n$5796 (quote ()) (quote (n))) (quote (v n))) (quote (rec v n))) (quote (slot-set! rec v n))) (quote ()) (quote ((slot-set! rec v n)))) (quote ((slot-ref rec v n) (slot-set! rec v n)))) (cons-source (cons-source (rename$5695$5739 (quote match-record-refs)) (cons-source v$5788 (cons-source rec$5792 (cons-source (cons-source (rename$5695$5739 (quote +)) (cons-source n$5796 (cons-source 1 (quote ()) (quote (1))) (quote (n 1))) (quote (+ n 1))) (cons-source q$5804 (cons-source g+s$5808 (cons-source sk$5812 (cons-source fk$5816 (quote ()) (quote (fk))) (quote (sk fk))) (quote (g+s sk fk))) (quote (q g+s sk fk))) (quote ((+ n 1) q g+s sk fk))) (quote (rec (+ n 1) q g+s sk fk))) (quote (v rec (+ n 1) q g+s sk fk))) (quote (match-record-refs v rec (+ n 1) q g+s sk fk))) (cons-source fk$5816 (cons-source i$5820 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (w p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (match-one w p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote ()) (quote ((match-one w p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i)))) (quote (((w (slot-ref rec v n))) (match-one w p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i)))) (quote (let ((w (slot-ref rec v n))) (match-one w p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i)))) #f) #f)) (cdr v.17$5718$5817))) v.18$5719$5819)) (car v.17$5718$5817)) #f)) (cdr v.15$5716$5813))) v.16$5717$5815)) (car v.15$5716$5813)) #f)) (cdr v.13$5714$5809))) v.14$5715$5811)) (car v.13$5714$5809)) #f)) (cdr v.11$5712$5805))) v.12$5713$5807)) (car v.11$5712$5805)) #f)) (cdr v.7$5708$5797))) v.10$5711$5803)) (cdr v.8$5709$5799))) v.9$5710$5801)) (car v.8$5709$5799)) #f)) (car v.7$5708$5797)) #f)) (cdr v.5$5706$5793))) v.6$5707$5795)) (car v.5$5706$5793)) #f)) (cdr v.3$5704$5789))) v.4$5705$5791)) (car v.3$5704$5789)) #f)) (cdr v.1$5702$5785))) v.2$5703$5787)) (car v.1$5702$5785)) #f)) (cdr expr$5694$5738))))) (match-vector-tail-two lambda (expr$5538$5572 rename$5539$5573 compare$5540$5574) (car ((lambda (tmp$5576$5578) (if tmp$5576$5578 tmp$5576$5578 (cons (error "no expansion for" expr$5538$5572) #f))) ((lambda (v.1$5546$5579) (if (pair? v.1$5546$5579) ((lambda (v.2$5547$5581) ((lambda (v$5582) ((lambda (v.3$5548$5583) (if (pair? v.3$5548$5583) ((lambda (v.4$5549$5585) ((lambda (p$5586) ((lambda (v.5$5550$5587) (if (pair? v.5$5550$5587) ((lambda (v.6$5551$5589) ((lambda (n$5590) ((lambda (v.7$5552$5591) (if (pair? v.7$5552$5591) ((lambda (v.8$5553$5593) ((lambda (len$5594) ((lambda (v.9$5554$5595) (if (pair? v.9$5554$5595) ((lambda (v.10$5555$5597) (if (list? v.10$5555$5597) ((lambda (sk$5599) ((lambda (v.11$5556$5600) (if (pair? v.11$5556$5600) ((lambda (v.12$5557$5602) ((lambda (fk$5603) ((lambda (v.13$5558$5604) (if (pair? v.13$5558$5604) ((lambda (v.14$5559$5606) ((lambda (i$5607) ((lambda (v.15$5560$5608) (if (pair? v.15$5560$5608) ((lambda (v.16$5561$5610) ((lambda (w.17$5562$5612 id-ls19$5564$5613 id-ls-ls20$5565$5614) ((lambda (lp.18$5563$5615) (set! lp.18$5563$5615 (lambda (w.17$5562$5616 id-ls19$5564$5617 id-ls-ls20$5565$5618) (if (null? w.17$5562$5616) ((lambda (id$5619 id-ls$5620) ((lambda (v.26$5571$5621) (if (null? v.26$5571$5621) (cons (cons-source (rename$5539$5573 (quote let)) (cons-source (rename$5539$5573 (quote loop)) (cons-source (cons-source (cons-source (rename$5539$5573 (quote j)) (cons-source n$5590 (quote ()) (quote (n))) (quote (j n))) (map (lambda (id-ls$5623) (cons-source id-ls$5623 (cons-source (cons-source (rename$5539$5573 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$5620) (quote ((j n) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$5539$5573 (quote if)) (cons-source (cons-source (rename$5539$5573 (quote >=)) (cons-source (rename$5539$5573 (quote j)) (cons-source len$5594 (quote ()) (quote (len))) (quote (j len))) (quote (>= j len))) (cons-source (cons-source (rename$5539$5573 (quote let)) (cons-source (map (lambda (id$5624 id-ls$5625) (cons-source id$5624 (cons-source (cons-source (rename$5539$5573 (quote reverse)) (cons-source id-ls$5625 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$5619 id-ls$5620) (cons-source (append (map (lambda (sk$5626) sk$5626) sk$5599) (cons-source i$5607 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((id (reverse id-ls)) ...) (sk ... i)))) (quote (let ((id (reverse id-ls)) ...) (sk ... i)))) (cons-source (cons-source (rename$5539$5573 (quote let)) (cons-source (cons-source (cons-source (rename$5539$5573 (quote w)) (cons-source (cons-source (rename$5539$5573 (quote vector-ref)) (cons-source v$5582 (cons-source (rename$5539$5573 (quote j)) (quote ()) (quote (j))) (quote (v j))) (quote (vector-ref v j))) (quote ()) (quote ((vector-ref v j)))) (quote (w (vector-ref v j)))) (quote ()) (quote ((w (vector-ref v j))))) (cons-source (cons-source (rename$5539$5573 (quote match-one)) (cons-source (rename$5539$5573 (quote w)) (cons-source p$5586 (cons-source (cons-source (cons-source (rename$5539$5573 (quote vector-ref)) (cons-source v$5582 (cons-source (rename$5539$5573 (quote j)) (quote ()) (quote (j))) (quote (v j))) (quote (vector-ref v j))) (cons-source (cons-source (rename$5539$5573 (quote vector-set!)) (cons-source v$5582 (cons-source (rename$5539$5573 (quote j)) (quote ()) (quote (j))) (quote (v j))) (quote (vector-set! v j))) (quote ()) (quote ((vector-set! v j)))) (quote ((vector-ref v j) (vector-set! v j)))) (cons-source (cons-source (rename$5539$5573 (quote match-drop-ids)) (cons-source (cons-source (rename$5539$5573 (quote loop)) (cons-source (cons-source (rename$5539$5573 (quote +)) (cons-source (rename$5539$5573 (quote j)) (cons-source 1 (quote ()) (quote (1))) (quote (j 1))) (quote (+ j 1))) (map (lambda (id$5627 id-ls$5628) (cons-source (rename$5539$5573 (quote cons)) (cons-source id$5627 (cons-source id-ls$5628 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$5619 id-ls$5620) (quote ((+ j 1) (cons id id-ls) ...))) (quote (loop (+ j 1) (cons id id-ls) ...))) (quote ()) (quote ((loop (+ j 1) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)))) (cons-source fk$5603 (cons-source i$5607 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote ()) (quote ((match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))) (quote (((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))) (quote (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))) (quote ()) (quote ((let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote ((let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote ((>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote ()) (quote ((if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) (quote (((j n) (id-ls (quote ())) ...) (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) (quote (loop ((j n) (id-ls (quote ())) ...) (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) (quote (let loop ((j n) (id-ls (quote ())) ...) (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) #f) #f)) (cdr v.15$5560$5608))) (reverse id-ls19$5564$5617) (reverse id-ls-ls20$5565$5618)) (if (pair? w.17$5562$5616) ((lambda (v.21$5566$5630) (if (pair? v.21$5566$5630) ((lambda (v.22$5567$5632) ((lambda (id$5633) ((lambda (v.23$5568$5634) (if (pair? v.23$5568$5634) ((lambda (v.24$5569$5636) ((lambda (id-ls$5637) ((lambda (v.25$5570$5638) (if (null? v.25$5570$5638) (lp.18$5563$5615 (cdr w.17$5562$5616) (cons id$5633 id-ls19$5564$5617) (cons id-ls$5637 id-ls-ls20$5565$5618)) #f)) (cdr v.23$5568$5634))) v.24$5569$5636)) (car v.23$5568$5634)) #f)) (cdr v.21$5566$5630))) v.22$5567$5632)) (car v.21$5566$5630)) #f)) (car w.17$5562$5616)) #f)))) (lp.18$5563$5615 w.17$5562$5612 id-ls19$5564$5613 id-ls-ls20$5565$5614)) #f)) v.16$5561$5610 (quote ()) (quote ()))) (car v.15$5560$5608)) #f)) (cdr v.13$5558$5604))) v.14$5559$5606)) (car v.13$5558$5604)) #f)) (cdr v.11$5556$5600))) v.12$5557$5602)) (car v.11$5556$5600)) #f)) (cdr v.9$5554$5595))) v.10$5555$5597) #f)) (car v.9$5554$5595)) #f)) (cdr v.7$5552$5591))) v.8$5553$5593)) (car v.7$5552$5591)) #f)) (cdr v.5$5550$5587))) v.6$5551$5589)) (car v.5$5550$5587)) #f)) (cdr v.3$5548$5583))) v.4$5549$5585)) (car v.3$5548$5583)) #f)) (cdr v.1$5546$5579))) v.2$5547$5581)) (car v.1$5546$5579)) #f)) (cdr expr$5538$5572))))) (match-vector-tail lambda (expr$5448$5471 rename$5449$5472 compare$5450$5473) (car ((lambda (tmp$5475$5477) (if tmp$5475$5477 tmp$5475$5477 (cons (error "no expansion for" expr$5448$5471) #f))) ((lambda (v.1$5456$5478) (if (pair? v.1$5456$5478) ((lambda (v.2$5457$5480) ((lambda (v$5481) ((lambda (v.3$5458$5482) (if (pair? v.3$5458$5482) ((lambda (v.4$5459$5484) ((lambda (p$5485) ((lambda (v.5$5460$5486) (if (pair? v.5$5460$5486) ((lambda (v.6$5461$5488) ((lambda (n$5489) ((lambda (v.7$5462$5490) (if (pair? v.7$5462$5490) ((lambda (v.8$5463$5492) ((lambda (len$5493) ((lambda (v.9$5464$5494) (if (pair? v.9$5464$5494) ((lambda (v.10$5465$5496) ((lambda (sk$5497) ((lambda (v.11$5466$5498) (if (pair? v.11$5466$5498) ((lambda (v.12$5467$5500) ((lambda (fk$5501) ((lambda (v.13$5468$5502) (if (pair? v.13$5468$5502) ((lambda (v.14$5469$5504) ((lambda (i$5505) ((lambda (v.15$5470$5506) (if (null? v.15$5470$5506) (cons (cons-source (rename$5449$5472 (quote match-extract-underscore)) (cons-source p$5485 (cons-source (cons-source (rename$5449$5472 (quote match-vector-tail-two)) (cons-source v$5481 (cons-source p$5485 (cons-source n$5489 (cons-source len$5493 (cons-source sk$5497 (cons-source fk$5501 (cons-source i$5505 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (len sk fk i))) (quote (n len sk fk i))) (quote (p n len sk fk i))) (quote (v p n len sk fk i))) (quote (match-vector-tail-two v p n len sk fk i))) (cons-source i$5505 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-vector-tail-two v p n len sk fk i) i ()))) (quote (p (match-vector-tail-two v p n len sk fk i) i ()))) (quote (match-extract-underscore p (match-vector-tail-two v p n len sk fk i) i ()))) #f) #f)) (cdr v.13$5468$5502))) v.14$5469$5504)) (car v.13$5468$5502)) #f)) (cdr v.11$5466$5498))) v.12$5467$5500)) (car v.11$5466$5498)) #f)) (cdr v.9$5464$5494))) v.10$5465$5496)) (car v.9$5464$5494)) #f)) (cdr v.7$5462$5490))) v.8$5463$5492)) (car v.7$5462$5490)) #f)) (cdr v.5$5460$5486))) v.6$5461$5488)) (car v.5$5460$5486)) #f)) (cdr v.3$5458$5482))) v.4$5459$5484)) (car v.3$5458$5482)) #f)) (cdr v.1$5456$5478))) v.2$5457$5480)) (car v.1$5456$5478)) #f)) (cdr expr$5448$5471))))) (match-gen-vector-ellipsis lambda (expr$5310$5342 rename$5311$5343 compare$5312$5344) (car ((lambda (tmp$5346$5348) (if tmp$5346$5348 tmp$5346$5348 (cons (error "no expansion for" expr$5310$5342) #f))) ((lambda (v.1$5318$5349) (if (pair? v.1$5318$5349) ((lambda (v.2$5319$5351) ((lambda (v$5352) ((lambda (v.3$5320$5353) (if (pair? v.3$5320$5353) ((lambda (v.4$5321$5355) ((lambda (n$5356) ((lambda (v.5$5322$5357) (if (pair? v.5$5322$5357) ((lambda (v.6$5323$5359) ((lambda (w.7$5324$5361 pat-ls9$5326$5362 index-ls10$5327$5363) ((lambda (lp.8$5325$5364) (set! lp.8$5325$5364 (lambda (w.7$5324$5365 pat-ls9$5326$5366 index-ls10$5327$5367) (if (null? w.7$5324$5365) ((lambda (pat$5368 index$5369) ((lambda (v.16$5333$5370) (if (pair? v.16$5333$5370) ((lambda (v.17$5334$5372) ((lambda (p$5373) ((lambda (v.18$5335$5374) (if (pair? v.18$5335$5374) ((lambda (v.19$5336$5376) ((lambda (sk$5377) ((lambda (v.20$5337$5378) (if (pair? v.20$5337$5378) ((lambda (v.21$5338$5380) ((lambda (fk$5381) ((lambda (v.22$5339$5382) (if (pair? v.22$5339$5382) ((lambda (v.23$5340$5384) ((lambda (i$5385) ((lambda (v.24$5341$5386) (if (null? v.24$5341$5386) (cons (cons-source (rename$5311$5343 (quote if)) (cons-source (cons-source (rename$5311$5343 (quote vector?)) (cons-source v$5352 (quote ()) (quote (v))) (quote (vector? v))) (cons-source (cons-source (rename$5311$5343 (quote let)) (cons-source (cons-source (cons-source (rename$5311$5343 (quote len)) (cons-source (cons-source (rename$5311$5343 (quote vector-length)) (cons-source v$5352 (quote ()) (quote (v))) (quote (vector-length v))) (quote ()) (quote ((vector-length v)))) (quote (len (vector-length v)))) (quote ()) (quote ((len (vector-length v))))) (cons-source (cons-source (rename$5311$5343 (quote if)) (cons-source (cons-source (rename$5311$5343 (quote >=)) (cons-source (rename$5311$5343 (quote len)) (cons-source n$5356 (quote ()) (quote (n))) (quote (len n))) (quote (>= len n))) (cons-source (cons-source (rename$5311$5343 (quote match-vector-step)) (cons-source v$5352 (cons-source (map (lambda (pat$5388 index$5389) (cons-source pat$5388 (cons-source index$5389 (quote ()) (quote (index))) (quote (pat index)))) pat$5368 index$5369) (cons-source (cons-source (rename$5311$5343 (quote match-vector-tail)) (cons-source v$5352 (cons-source p$5373 (cons-source n$5356 (cons-source (rename$5311$5343 (quote len)) (cons-source sk$5377 (cons-source fk$5381 (quote ()) (quote (fk))) (quote (sk fk))) (quote (len sk fk))) (quote (n len sk fk))) (quote (p n len sk fk))) (quote (v p n len sk fk))) (quote (match-vector-tail v p n len sk fk))) (cons-source fk$5381 (cons-source i$5385 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-vector-tail v p n len sk fk) fk i))) (quote (((pat index) ...) (match-vector-tail v p n len sk fk) fk i))) (quote (v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i))) (quote (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i))) (cons-source fk$5381 (quote ()) (quote (fk))) (quote ((match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk))) (quote ((>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk))) (quote (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk))) (quote ()) (quote ((if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)))) (quote (((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)))) (quote (let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)))) (cons-source fk$5381 (quote ()) (quote (fk))) (quote ((let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)) fk))) (quote ((vector? v) (let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)) fk))) (quote (if (vector? v) (let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)) fk))) #f) #f)) (cdr v.22$5339$5382))) v.23$5340$5384)) (car v.22$5339$5382)) #f)) (cdr v.20$5337$5378))) v.21$5338$5380)) (car v.20$5337$5378)) #f)) (cdr v.18$5335$5374))) v.19$5336$5376)) (car v.18$5335$5374)) #f)) (cdr v.16$5333$5370))) v.17$5334$5372)) (car v.16$5333$5370)) #f)) (cdr v.5$5322$5357))) (reverse pat-ls9$5326$5366) (reverse index-ls10$5327$5367)) (if (pair? w.7$5324$5365) ((lambda (v.11$5328$5391) (if (pair? v.11$5328$5391) ((lambda (v.12$5329$5393) ((lambda (pat$5394) ((lambda (v.13$5330$5395) (if (pair? v.13$5330$5395) ((lambda (v.14$5331$5397) ((lambda (index$5398) ((lambda (v.15$5332$5399) (if (null? v.15$5332$5399) (lp.8$5325$5364 (cdr w.7$5324$5365) (cons pat$5394 pat-ls9$5326$5366) (cons index$5398 index-ls10$5327$5367)) #f)) (cdr v.13$5330$5395))) v.14$5331$5397)) (car v.13$5330$5395)) #f)) (cdr v.11$5328$5391))) v.12$5329$5393)) (car v.11$5328$5391)) #f)) (car w.7$5324$5365)) #f)))) (lp.8$5325$5364 w.7$5324$5361 pat-ls9$5326$5362 index-ls10$5327$5363)) #f)) v.6$5323$5359 (quote ()) (quote ()))) (car v.5$5322$5357)) #f)) (cdr v.3$5320$5353))) v.4$5321$5355)) (car v.3$5320$5353)) #f)) (cdr v.1$5318$5349))) v.2$5319$5351)) (car v.1$5318$5349)) #f)) (cdr expr$5310$5342))))) (match-vector-step lambda (expr$5156$5192 rename$5157$5193 compare$5158$5194) (car ((lambda (tmp$5196$5198) (if tmp$5196$5198 tmp$5196$5198 ((lambda (tmp$5200$5202) (if tmp$5200$5202 tmp$5200$5202 (cons (error "no expansion for" expr$5156$5192) #f))) ((lambda (v.12$5175$5203) (if (pair? v.12$5175$5203) ((lambda (v.13$5176$5205) ((lambda (v$5206) ((lambda (v.14$5177$5207) (if (pair? v.14$5177$5207) ((lambda (v.15$5178$5209) (if (pair? v.15$5178$5209) ((lambda (v.16$5179$5211) (if (pair? v.16$5179$5211) ((lambda (v.17$5180$5213) ((lambda (pat$5214) ((lambda (v.18$5181$5215) (if (pair? v.18$5181$5215) ((lambda (v.19$5182$5217) ((lambda (index$5218) ((lambda (v.20$5183$5219) (if (null? v.20$5183$5219) ((lambda (v.21$5184$5221) ((lambda (rest$5222) ((lambda (v.22$5185$5223) (if (pair? v.22$5185$5223) ((lambda (v.23$5186$5225) ((lambda (sk$5226) ((lambda (v.24$5187$5227) (if (pair? v.24$5187$5227) ((lambda (v.25$5188$5229) ((lambda (fk$5230) ((lambda (v.26$5189$5231) (if (pair? v.26$5189$5231) ((lambda (v.27$5190$5233) ((lambda (i$5234) ((lambda (v.28$5191$5235) (if (null? v.28$5191$5235) (cons (cons-source (rename$5157$5193 (quote let)) (cons-source (cons-source (cons-source (rename$5157$5193 (quote w)) (cons-source (cons-source (rename$5157$5193 (quote vector-ref)) (cons-source v$5206 (cons-source index$5218 (quote ()) (quote (index))) (quote (v index))) (quote (vector-ref v index))) (quote ()) (quote ((vector-ref v index)))) (quote (w (vector-ref v index)))) (quote ()) (quote ((w (vector-ref v index))))) (cons-source (cons-source (rename$5157$5193 (quote match-one)) (cons-source (rename$5157$5193 (quote w)) (cons-source pat$5214 (cons-source (cons-source (cons-source (rename$5157$5193 (quote vector-ref)) (cons-source v$5206 (cons-source index$5218 (quote ()) (quote (index))) (quote (v index))) (quote (vector-ref v index))) (cons-source (cons-source (rename$5157$5193 (quote vector-set!)) (cons-source v$5206 (cons-source index$5218 (quote ()) (quote (index))) (quote (v index))) (quote (vector-set! v index))) (quote ()) (quote ((vector-set! v index)))) (quote ((vector-ref v index) (vector-set! v index)))) (cons-source (cons-source (rename$5157$5193 (quote match-vector-step)) (cons-source v$5206 (cons-source rest$5222 (cons-source sk$5226 (cons-source fk$5230 (quote ()) (quote (fk))) (quote (sk fk))) (quote (rest sk fk))) (quote (v rest sk fk))) (quote (match-vector-step v rest sk fk))) (cons-source fk$5230 (cons-source i$5234 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-vector-step v rest sk fk) fk i))) (quote (((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote (pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote (w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote (match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote ()) (quote ((match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i)))) (quote (((w (vector-ref v index))) (match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i)))) (quote (let ((w (vector-ref v index))) (match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i)))) #f) #f)) (cdr v.26$5189$5231))) v.27$5190$5233)) (car v.26$5189$5231)) #f)) (cdr v.24$5187$5227))) v.25$5188$5229)) (car v.24$5187$5227)) #f)) (cdr v.22$5185$5223))) v.23$5186$5225)) (car v.22$5185$5223)) #f)) (cdr v.14$5177$5207))) v.21$5184$5221)) (cdr v.15$5178$5209)) #f)) (cdr v.18$5181$5215))) v.19$5182$5217)) (car v.18$5181$5215)) #f)) (cdr v.16$5179$5211))) v.17$5180$5213)) (car v.16$5179$5211)) #f)) (car v.15$5178$5209)) #f)) (car v.14$5177$5207)) #f)) (cdr v.12$5175$5203))) v.13$5176$5205)) (car v.12$5175$5203)) #f)) (cdr expr$5156$5192))))) ((lambda (v.1$5164$5237) (if (pair? v.1$5164$5237) ((lambda (v.2$5165$5239) ((lambda (v$5240) ((lambda (v.3$5166$5241) (if (pair? v.3$5166$5241) ((lambda (v.4$5167$5243) (if (null? v.4$5167$5243) ((lambda (v.5$5168$5245) (if (pair? v.5$5168$5245) ((lambda (v.6$5169$5247) (if (list? v.6$5169$5247) ((lambda (sk$5249) ((lambda (v.7$5170$5250) (if (pair? v.7$5170$5250) ((lambda (v.8$5171$5252) ((lambda (fk$5253) ((lambda (v.9$5172$5254) (if (pair? v.9$5172$5254) ((lambda (v.10$5173$5256) ((lambda (i$5257) ((lambda (v.11$5174$5258) (if (null? v.11$5174$5258) (cons (append (map (lambda (sk$5260) sk$5260) sk$5249) (cons-source i$5257 (quote ()) (quote (i)))) #f) #f)) (cdr v.9$5172$5254))) v.10$5173$5256)) (car v.9$5172$5254)) #f)) (cdr v.7$5170$5250))) v.8$5171$5252)) (car v.7$5170$5250)) #f)) (cdr v.5$5168$5245))) v.6$5169$5247) #f)) (car v.5$5168$5245)) #f)) (cdr v.3$5166$5241)) #f)) (car v.3$5166$5241)) #f)) (cdr v.1$5164$5237))) v.2$5165$5239)) (car v.1$5164$5237)) #f)) (cdr expr$5156$5192))))) (match-vector-two lambda (expr$4961$5004 rename$4962$5005 compare$4963$5006) (car ((lambda (tmp$5008$5010) (if tmp$5008$5010 tmp$5008$5010 ((lambda (tmp$5012$5014) (if tmp$5012$5014 tmp$5012$5014 (cons (error "no expansion for" expr$4961$5004) #f))) ((lambda (v.25$4993$5015) (if (pair? v.25$4993$5015) ((lambda (v.26$4994$5017) ((lambda (v$5018) ((lambda (v.27$4995$5019) (if (pair? v.27$4995$5019) ((lambda (v.28$4996$5021) ((lambda (n$5022) ((lambda (v.29$4997$5023) (if (pair? v.29$4997$5023) ((lambda (v.30$4998$5025) (if (list? v.30$4998$5025) ((lambda (pats$5027) ((lambda (v.31$4999$5028) (if (pair? v.31$4999$5028) ((lambda (v.32$5000$5030) (if (pair? v.32$5000$5030) ((lambda (v.33$5001$5032) ((lambda (p$5033) ((lambda (v.34$5002$5034) ((lambda (q$5035) ((lambda (v.35$5003$5036) ((lambda (x$5037) (cons (cons-source (rename$4962$5005 (quote match-vector)) (cons-source v$5018 (cons-source (cons-source (rename$4962$5005 (quote +)) (cons-source n$5022 (cons-source 1 (quote ()) (quote (1))) (quote (n 1))) (quote (+ n 1))) (cons-source (append (map (lambda (pats$5038) pats$5038) pats$5027) (cons-source (cons-source p$5033 (cons-source n$5022 (quote ()) (quote (n))) (quote (p n))) (quote ()) (quote ((p n))))) (cons-source q$5035 x$5037 (quote (q . x))) (quote ((pats ... (p n)) q . x))) (quote ((+ n 1) (pats ... (p n)) q . x))) (quote (v (+ n 1) (pats ... (p n)) q . x))) (quote (match-vector v (+ n 1) (pats ... (p n)) q . x))) #f)) v.35$5003$5036)) (cdr v.31$4999$5028))) v.34$5002$5034)) (cdr v.32$5000$5030))) v.33$5001$5032)) (car v.32$5000$5030)) #f)) (car v.31$4999$5028)) #f)) (cdr v.29$4997$5023))) v.30$4998$5025) #f)) (car v.29$4997$5023)) #f)) (cdr v.27$4995$5019))) v.28$4996$5021)) (car v.27$4995$5019)) #f)) (cdr v.25$4993$5015))) v.26$4994$5017)) (car v.25$4993$5015)) #f)) (cdr expr$4961$5004))))) ((lambda (v.1$4969$5039) (if (pair? v.1$4969$5039) ((lambda (v.2$4970$5041) ((lambda (v$5042) ((lambda (v.3$4971$5043) (if (pair? v.3$4971$5043) ((lambda (v.4$4972$5045) ((lambda (n$5046) ((lambda (v.5$4973$5047) (if (pair? v.5$4973$5047) ((lambda (v.6$4974$5049) ((lambda (w.7$4975$5051 pat-ls9$4977$5052 index-ls10$4978$5053) ((lambda (lp.8$4976$5054) (set! lp.8$4976$5054 (lambda (w.7$4975$5055 pat-ls9$4977$5056 index-ls10$4978$5057) (if (null? w.7$4975$5055) ((lambda (pat$5058 index$5059) ((lambda (v.16$4984$5060) (if (pair? v.16$4984$5060) ((lambda (v.17$4985$5062) (if (null? v.17$4985$5062) ((lambda (v.18$4986$5064) (if (pair? v.18$4986$5064) ((lambda (v.19$4987$5066) ((lambda (sk$5067) ((lambda (v.20$4988$5068) (if (pair? v.20$4988$5068) ((lambda (v.21$4989$5070) ((lambda (fk$5071) ((lambda (v.22$4990$5072) (if (pair? v.22$4990$5072) ((lambda (v.23$4991$5074) ((lambda (i$5075) ((lambda (v.24$4992$5076) (if (null? v.24$4992$5076) (cons (cons-source (rename$4962$5005 (quote if)) (cons-source (cons-source (rename$4962$5005 (quote vector?)) (cons-source v$5042 (quote ()) (quote (v))) (quote (vector? v))) (cons-source (cons-source (rename$4962$5005 (quote let)) (cons-source (cons-source (cons-source (rename$4962$5005 (quote len)) (cons-source (cons-source (rename$4962$5005 (quote vector-length)) (cons-source v$5042 (quote ()) (quote (v))) (quote (vector-length v))) (quote ()) (quote ((vector-length v)))) (quote (len (vector-length v)))) (quote ()) (quote ((len (vector-length v))))) (cons-source (cons-source (rename$4962$5005 (quote if)) (cons-source (cons-source (rename$4962$5005 (quote =)) (cons-source (rename$4962$5005 (quote len)) (cons-source n$5046 (quote ()) (quote (n))) (quote (len n))) (quote (= len n))) (cons-source (cons-source (rename$4962$5005 (quote match-vector-step)) (cons-source v$5042 (cons-source (map (lambda (pat$5078 index$5079) (cons-source pat$5078 (cons-source index$5079 (quote ()) (quote (index))) (quote (pat index)))) pat$5058 index$5059) (cons-source sk$5067 (cons-source fk$5071 (cons-source i$5075 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (((pat index) ...) sk fk i))) (quote (v ((pat index) ...) sk fk i))) (quote (match-vector-step v ((pat index) ...) sk fk i))) (cons-source fk$5071 (quote ()) (quote (fk))) (quote ((match-vector-step v ((pat index) ...) sk fk i) fk))) (quote ((= len n) (match-vector-step v ((pat index) ...) sk fk i) fk))) (quote (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk))) (quote ()) (quote ((if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)))) (quote (((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)))) (quote (let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)))) (cons-source fk$5071 (quote ()) (quote (fk))) (quote ((let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)) fk))) (quote ((vector? v) (let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)) fk))) (quote (if (vector? v) (let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)) fk))) #f) #f)) (cdr v.22$4990$5072))) v.23$4991$5074)) (car v.22$4990$5072)) #f)) (cdr v.20$4988$5068))) v.21$4989$5070)) (car v.20$4988$5068)) #f)) (cdr v.18$4986$5064))) v.19$4987$5066)) (car v.18$4986$5064)) #f)) (cdr v.16$4984$5060)) #f)) (car v.16$4984$5060)) #f)) (cdr v.5$4973$5047))) (reverse pat-ls9$4977$5056) (reverse index-ls10$4978$5057)) (if (pair? w.7$4975$5055) ((lambda (v.11$4979$5081) (if (pair? v.11$4979$5081) ((lambda (v.12$4980$5083) ((lambda (pat$5084) ((lambda (v.13$4981$5085) (if (pair? v.13$4981$5085) ((lambda (v.14$4982$5087) ((lambda (index$5088) ((lambda (v.15$4983$5089) (if (null? v.15$4983$5089) (lp.8$4976$5054 (cdr w.7$4975$5055) (cons pat$5084 pat-ls9$4977$5056) (cons index$5088 index-ls10$4978$5057)) #f)) (cdr v.13$4981$5085))) v.14$4982$5087)) (car v.13$4981$5085)) #f)) (cdr v.11$4979$5081))) v.12$4980$5083)) (car v.11$4979$5081)) #f)) (car w.7$4975$5055)) #f)))) (lp.8$4976$5054 w.7$4975$5051 pat-ls9$4977$5052 index-ls10$4978$5053)) #f)) v.6$4974$5049 (quote ()) (quote ()))) (car v.5$4973$5047)) #f)) (cdr v.3$4971$5043))) v.4$4972$5045)) (car v.3$4971$5043)) #f)) (cdr v.1$4969$5039))) v.2$4970$5041)) (car v.1$4969$5039)) #f)) (cdr expr$4961$5004))))) (match-vector lambda (expr$4782$4823 rename$4783$4824 compare$4784$4825) (car ((lambda (tmp$4827$4829) (if tmp$4827$4829 tmp$4827$4829 ((lambda (tmp$4831$4833) (if tmp$4831$4833 tmp$4831$4833 ((lambda (tmp$4835$4837) (if tmp$4835$4837 tmp$4835$4837 (cons (error "no expansion for" expr$4782$4823) #f))) ((lambda (v.33$4822$4838) ((lambda (x$4839) (cons (cons-source (rename$4783$4824 (quote match-vector-two)) x$4839 (quote (match-vector-two . x))) #f)) v.33$4822$4838)) (cdr expr$4782$4823))))) ((lambda (v.14$4803$4840) (if (pair? v.14$4803$4840) ((lambda (v.15$4804$4842) ((lambda (v$4843) ((lambda (v.16$4805$4844) (if (pair? v.16$4805$4844) ((lambda (v.17$4806$4846) ((lambda (n$4847) ((lambda (v.18$4807$4848) (if (pair? v.18$4807$4848) ((lambda (v.19$4808$4850) ((lambda (pats$4851) ((lambda (v.20$4809$4852) (if (pair? v.20$4809$4852) ((lambda (v.21$4810$4854) (if (pair? v.21$4810$4854) ((lambda (v.22$4811$4856) ((lambda (p$4857) ((lambda (v.23$4812$4858) (if (pair? v.23$4812$4858) ((lambda (v.24$4813$4860) (if (compare$4784$4825 v.24$4813$4860 (rename$4783$4824 (quote ___))) ((lambda (v.25$4814$4862) (if (null? v.25$4814$4862) ((lambda (v.26$4815$4864) (if (pair? v.26$4815$4864) ((lambda (v.27$4816$4866) ((lambda (sk$4867) ((lambda (v.28$4817$4868) (if (pair? v.28$4817$4868) ((lambda (v.29$4818$4870) ((lambda (fk$4871) ((lambda (v.30$4819$4872) (if (pair? v.30$4819$4872) ((lambda (v.31$4820$4874) ((lambda (i$4875) ((lambda (v.32$4821$4876) (if (null? v.32$4821$4876) (cons (cons-source (rename$4783$4824 (quote match-gen-vector-ellipsis)) (cons-source v$4843 (cons-source n$4847 (cons-source pats$4851 (cons-source p$4857 (cons-source sk$4867 (cons-source fk$4871 (cons-source i$4875 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (p sk fk i))) (quote (pats p sk fk i))) (quote (n pats p sk fk i))) (quote (v n pats p sk fk i))) (quote (match-gen-vector-ellipsis v n pats p sk fk i))) #f) #f)) (cdr v.30$4819$4872))) v.31$4820$4874)) (car v.30$4819$4872)) #f)) (cdr v.28$4817$4868))) v.29$4818$4870)) (car v.28$4817$4868)) #f)) (cdr v.26$4815$4864))) v.27$4816$4866)) (car v.26$4815$4864)) #f)) (cdr v.20$4809$4852)) #f)) (cdr v.23$4812$4858)) #f)) (car v.23$4812$4858)) #f)) (cdr v.21$4810$4854))) v.22$4811$4856)) (car v.21$4810$4854)) #f)) (car v.20$4809$4852)) #f)) (cdr v.18$4807$4848))) v.19$4808$4850)) (car v.18$4807$4848)) #f)) (cdr v.16$4805$4844))) v.17$4806$4846)) (car v.16$4805$4844)) #f)) (cdr v.14$4803$4840))) v.15$4804$4842)) (car v.14$4803$4840)) #f)) (cdr expr$4782$4823))))) ((lambda (v.1$4790$4878) (if (pair? v.1$4790$4878) ((lambda (v.2$4791$4880) ((lambda (v$4881) ((lambda (v.3$4792$4882) (if (pair? v.3$4792$4882) ((lambda (v.4$4793$4884) ((lambda (n$4885) ((lambda (v.5$4794$4886) (if (pair? v.5$4794$4886) ((lambda (v.6$4795$4888) ((lambda (pats$4889) ((lambda (v.7$4796$4890) (if (pair? v.7$4796$4890) ((lambda (v.8$4797$4892) (if (pair? v.8$4797$4892) ((lambda (v.9$4798$4894) ((lambda (p$4895) ((lambda (v.10$4799$4896) (if (pair? v.10$4799$4896) ((lambda (v.11$4800$4898) ((lambda (q$4899) ((lambda (v.12$4801$4900) (if (null? v.12$4801$4900) ((lambda (v.13$4802$4902) ((lambda (x$4903) (cons (cons-source (rename$4783$4824 (quote match-check-ellipsis)) (cons-source q$4899 (cons-source (cons-source (rename$4783$4824 (quote match-gen-vector-ellipsis)) (cons-source v$4881 (cons-source n$4885 (cons-source pats$4889 (cons-source p$4895 x$4903 (quote (p . x))) (quote (pats p . x))) (quote (n pats p . x))) (quote (v n pats p . x))) (quote (match-gen-vector-ellipsis v n pats p . x))) (cons-source (cons-source (rename$4783$4824 (quote match-vector-two)) (cons-source v$4881 (cons-source n$4885 (cons-source pats$4889 (cons-source (cons-source p$4895 (cons-source q$4899 (quote ()) (quote (q))) (quote (p q))) x$4903 (quote ((p q) . x))) (quote (pats (p q) . x))) (quote (n pats (p q) . x))) (quote (v n pats (p q) . x))) (quote (match-vector-two v n pats (p q) . x))) (quote ()) (quote ((match-vector-two v n pats (p q) . x)))) (quote ((match-gen-vector-ellipsis v n pats p . x) (match-vector-two v n pats (p q) . x)))) (quote (q (match-gen-vector-ellipsis v n pats p . x) (match-vector-two v n pats (p q) . x)))) (quote (match-check-ellipsis q (match-gen-vector-ellipsis v n pats p . x) (match-vector-two v n pats (p q) . x)))) #f)) v.13$4802$4902)) (cdr v.7$4796$4890)) #f)) (cdr v.10$4799$4896))) v.11$4800$4898)) (car v.10$4799$4896)) #f)) (cdr v.8$4797$4892))) v.9$4798$4894)) (car v.8$4797$4892)) #f)) (car v.7$4796$4890)) #f)) (cdr v.5$4794$4886))) v.6$4795$4888)) (car v.5$4794$4886)) #f)) (cdr v.3$4792$4882))) v.4$4793$4884)) (car v.3$4792$4882)) #f)) (cdr v.1$4790$4878))) v.2$4791$4880)) (car v.1$4790$4878)) #f)) (cdr expr$4782$4823))))) (match-gen-search lambda (expr$4629$4663 rename$4630$4664 compare$4631$4665) (car ((lambda (tmp$4667$4669) (if tmp$4667$4669 tmp$4667$4669 (cons (error "no expansion for" expr$4629$4663) #f))) ((lambda (v.1$4637$4670) (if (pair? v.1$4637$4670) ((lambda (v.2$4638$4672) ((lambda (v$4673) ((lambda (v.3$4639$4674) (if (pair? v.3$4639$4674) ((lambda (v.4$4640$4676) ((lambda (p$4677) ((lambda (v.5$4641$4678) (if (pair? v.5$4641$4678) ((lambda (v.6$4642$4680) ((lambda (q$4681) ((lambda (v.7$4643$4682) (if (pair? v.7$4643$4682) ((lambda (v.8$4644$4684) ((lambda (g+s$4685) ((lambda (v.9$4645$4686) (if (pair? v.9$4645$4686) ((lambda (v.10$4646$4688) ((lambda (sk$4689) ((lambda (v.11$4647$4690) (if (pair? v.11$4647$4690) ((lambda (v.12$4648$4692) ((lambda (fk$4693) ((lambda (v.13$4649$4694) (if (pair? v.13$4649$4694) ((lambda (v.14$4650$4696) ((lambda (i$4697) ((lambda (v.15$4651$4698) (if (pair? v.15$4651$4698) ((lambda (v.16$4652$4700) ((lambda (w.17$4653$4702 id-ls19$4655$4703 id-ls-ls20$4656$4704) ((lambda (lp.18$4654$4705) (set! lp.18$4654$4705 (lambda (w.17$4653$4706 id-ls19$4655$4707 id-ls-ls20$4656$4708) (if (null? w.17$4653$4706) ((lambda (id$4709 id-ls$4710) ((lambda (v.26$4662$4711) (if (null? v.26$4662$4711) (cons (cons-source (rename$4630$4664 (quote letrec)) (cons-source (cons-source (cons-source (rename$4630$4664 (quote try)) (cons-source (cons-source (rename$4630$4664 (quote lambda)) (cons-source (cons-source (rename$4630$4664 (quote w)) (cons-source (rename$4630$4664 (quote fail)) id-ls$4710 (quote (fail id-ls ...))) (quote (w fail id-ls ...))) (cons-source (cons-source (rename$4630$4664 (quote match-one)) (cons-source (rename$4630$4664 (quote w)) (cons-source q$4681 (cons-source g+s$4685 (cons-source (cons-source (rename$4630$4664 (quote match-tuck-ids)) (cons-source (cons-source (rename$4630$4664 (quote let)) (cons-source (map (lambda (id$4713 id-ls$4714) (cons-source id$4713 (cons-source (cons-source (rename$4630$4664 (quote reverse)) (cons-source id-ls$4714 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$4709 id-ls$4710) (cons-source sk$4689 (quote ()) (quote (sk))) (quote (((id (reverse id-ls)) ...) sk))) (quote (let ((id (reverse id-ls)) ...) sk))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) sk)))) (quote (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)))) (cons-source (cons-source (rename$4630$4664 (quote next)) (cons-source (rename$4630$4664 (quote w)) (cons-source (rename$4630$4664 (quote fail)) id-ls$4710 (quote (fail id-ls ...))) (quote (w fail id-ls ...))) (quote (next w fail id-ls ...))) (cons-source i$4697 (quote ()) (quote (i))) (quote ((next w fail id-ls ...) i))) (quote ((match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote ()) (quote ((match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i)))) (quote ((w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i)))) (quote (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i)))) (quote ()) (quote ((lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))))) (quote (try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))))) (cons-source (cons-source (rename$4630$4664 (quote next)) (cons-source (cons-source (rename$4630$4664 (quote lambda)) (cons-source (cons-source (rename$4630$4664 (quote w)) (cons-source (rename$4630$4664 (quote fail)) id-ls$4710 (quote (fail id-ls ...))) (quote (w fail id-ls ...))) (cons-source (cons-source (rename$4630$4664 (quote if)) (cons-source (cons-source (rename$4630$4664 (quote not)) (cons-source (cons-source (rename$4630$4664 (quote pair?)) (cons-source (rename$4630$4664 (quote w)) (quote ()) (quote (w))) (quote (pair? w))) (quote ()) (quote ((pair? w)))) (quote (not (pair? w)))) (cons-source (cons-source (rename$4630$4664 (quote fail)) (quote ()) (quote (fail))) (cons-source (cons-source (rename$4630$4664 (quote let)) (cons-source (cons-source (cons-source (rename$4630$4664 (quote u)) (cons-source (cons-source (rename$4630$4664 (quote car)) (cons-source (rename$4630$4664 (quote w)) (quote ()) (quote (w))) (quote (car w))) (quote ()) (quote ((car w)))) (quote (u (car w)))) (quote ()) (quote ((u (car w))))) (cons-source (cons-source (rename$4630$4664 (quote match-one)) (cons-source (rename$4630$4664 (quote u)) (cons-source p$4677 (cons-source (cons-source (cons-source (rename$4630$4664 (quote car)) (cons-source (rename$4630$4664 (quote w)) (quote ()) (quote (w))) (quote (car w))) (cons-source (cons-source (rename$4630$4664 (quote set-car!)) (cons-source (rename$4630$4664 (quote w)) (quote ()) (quote (w))) (quote (set-car! w))) (quote ()) (quote ((set-car! w)))) (quote ((car w) (set-car! w)))) (cons-source (cons-source (rename$4630$4664 (quote match-drop-ids)) (cons-source (cons-source (rename$4630$4664 (quote let)) (cons-source (map (lambda (id$4715 id-ls$4716) (cons-source id-ls$4716 (cons-source (cons-source (rename$4630$4664 (quote cons)) (cons-source id$4715 (cons-source id-ls$4716 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls))) (quote ()) (quote ((cons id id-ls)))) (quote (id-ls (cons id id-ls))))) id$4709 id-ls$4710) (cons-source (cons-source (rename$4630$4664 (quote let)) (cons-source (rename$4630$4664 (quote lp)) (cons-source (cons-source (cons-source (rename$4630$4664 (quote ls)) (cons-source (cons-source (rename$4630$4664 (quote cdr)) (cons-source (rename$4630$4664 (quote w)) (quote ()) (quote (w))) (quote (cdr w))) (quote ()) (quote ((cdr w)))) (quote (ls (cdr w)))) (quote ()) (quote ((ls (cdr w))))) (cons-source (cons-source (rename$4630$4664 (quote if)) (cons-source (cons-source (rename$4630$4664 (quote pair?)) (cons-source (rename$4630$4664 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$4630$4664 (quote try)) (cons-source (cons-source (rename$4630$4664 (quote car)) (cons-source (rename$4630$4664 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$4630$4664 (quote lambda)) (cons-source (quote ()) (cons-source (cons-source (rename$4630$4664 (quote lp)) (cons-source (cons-source (rename$4630$4664 (quote cdr)) (cons-source (rename$4630$4664 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (quote ()) (quote ((cdr ls)))) (quote (lp (cdr ls)))) (quote ()) (quote ((lp (cdr ls))))) (quote (() (lp (cdr ls))))) (quote (lambda () (lp (cdr ls))))) id-ls$4710 (quote ((lambda () (lp (cdr ls))) id-ls ...))) (quote ((car ls) (lambda () (lp (cdr ls))) id-ls ...))) (quote (try (car ls) (lambda () (lp (cdr ls))) id-ls ...))) (cons-source (cons-source (rename$4630$4664 (quote fail)) (quote ()) (quote (fail))) (quote ()) (quote ((fail)))) (quote ((try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))) (quote ((pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))) (quote (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))) (quote ()) (quote ((if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote (((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote (lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote ()) (quote ((let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))))) (quote (((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))))) (quote (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))))) (quote ()) (quote ((let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))))) (quote (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))))) (cons-source (cons-source (rename$4630$4664 (quote fail)) (quote ()) (quote (fail))) (cons-source i$4697 (quote ()) (quote (i))) (quote ((fail) i))) (quote ((match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote ()) (quote ((match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))) (quote (((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))) (quote (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))) (quote ()) (quote ((let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote ((fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote ((not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote ()) (quote ((if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (quote ((w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (quote (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (quote ()) (quote ((lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))))) (quote (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))))) (quote ()) (quote ((next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))))) (quote ((try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))))) (cons-source (cons-source (rename$4630$4664 (quote let)) (cons-source (map (lambda (id-ls$4717) (cons-source id-ls$4717 (cons-source (cons-source (rename$4630$4664 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$4710) (cons-source (cons-source (rename$4630$4664 (quote try)) (cons-source v$4673 (cons-source (cons-source (rename$4630$4664 (quote lambda)) (cons-source (quote ()) (cons-source fk$4693 (quote ()) (quote (fk))) (quote (() fk))) (quote (lambda () fk))) id-ls$4710 (quote ((lambda () fk) id-ls ...))) (quote (v (lambda () fk) id-ls ...))) (quote (try v (lambda () fk) id-ls ...))) (quote ()) (quote ((try v (lambda () fk) id-ls ...)))) (quote (((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...)))) (quote (let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...)))) (quote ()) (quote ((let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...))))) (quote (((try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...))))) (quote (letrec ((try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...))))) #f) #f)) (cdr v.15$4651$4698))) (reverse id-ls19$4655$4707) (reverse id-ls-ls20$4656$4708)) (if (pair? w.17$4653$4706) ((lambda (v.21$4657$4719) (if (pair? v.21$4657$4719) ((lambda (v.22$4658$4721) ((lambda (id$4722) ((lambda (v.23$4659$4723) (if (pair? v.23$4659$4723) ((lambda (v.24$4660$4725) ((lambda (id-ls$4726) ((lambda (v.25$4661$4727) (if (null? v.25$4661$4727) (lp.18$4654$4705 (cdr w.17$4653$4706) (cons id$4722 id-ls19$4655$4707) (cons id-ls$4726 id-ls-ls20$4656$4708)) #f)) (cdr v.23$4659$4723))) v.24$4660$4725)) (car v.23$4659$4723)) #f)) (cdr v.21$4657$4719))) v.22$4658$4721)) (car v.21$4657$4719)) #f)) (car w.17$4653$4706)) #f)))) (lp.18$4654$4705 w.17$4653$4702 id-ls19$4655$4703 id-ls-ls20$4656$4704)) #f)) v.16$4652$4700 (quote ()) (quote ()))) (car v.15$4651$4698)) #f)) (cdr v.13$4649$4694))) v.14$4650$4696)) (car v.13$4649$4694)) #f)) (cdr v.11$4647$4690))) v.12$4648$4692)) (car v.11$4647$4690)) #f)) (cdr v.9$4645$4686))) v.10$4646$4688)) (car v.9$4645$4686)) #f)) (cdr v.7$4643$4682))) v.8$4644$4684)) (car v.7$4643$4682)) #f)) (cdr v.5$4641$4678))) v.6$4642$4680)) (car v.5$4641$4678)) #f)) (cdr v.3$4639$4674))) v.4$4640$4676)) (car v.3$4639$4674)) #f)) (cdr v.1$4637$4670))) v.2$4638$4672)) (car v.1$4637$4670)) #f)) (cdr expr$4629$4663))))) (match-verify-no-ellipsis lambda (expr$4522$4547 rename$4523$4548 compare$4524$4549) (car ((lambda (tmp$4551$4553) (if tmp$4551$4553 tmp$4551$4553 ((lambda (tmp$4555$4557) (if tmp$4555$4557 tmp$4555$4557 ((lambda (tmp$4559$4561) (if tmp$4559$4561 tmp$4559$4561 (cons (error "no expansion for" expr$4522$4547) #f))) ((lambda (v.13$4542$4562) (if (pair? v.13$4542$4562) ((lambda (v.14$4543$4564) ((lambda (x$4565) ((lambda (v.15$4544$4566) (if (pair? v.15$4544$4566) ((lambda (v.16$4545$4568) ((lambda (sk$4569) ((lambda (v.17$4546$4570) (if (null? v.17$4546$4570) (cons (cons-source (rename$4523$4548 (quote match-syntax-error)) (cons-source "dotted tail not allowed after ellipsis" (cons-source x$4565 (quote ()) (quote (x))) (quote ("dotted tail not allowed after ellipsis" x))) (quote (match-syntax-error "dotted tail not allowed after ellipsis" x))) #f) #f)) (cdr v.15$4544$4566))) v.16$4545$4568)) (car v.15$4544$4566)) #f)) (cdr v.13$4542$4562))) v.14$4543$4564)) (car v.13$4542$4562)) #f)) (cdr expr$4522$4547))))) ((lambda (v.8$4537$4572) (if (pair? v.8$4537$4572) ((lambda (v.9$4538$4574) (if (null? v.9$4538$4574) ((lambda (v.10$4539$4576) (if (pair? v.10$4539$4576) ((lambda (v.11$4540$4578) ((lambda (sk$4579) ((lambda (v.12$4541$4580) (if (null? v.12$4541$4580) (cons sk$4579 #f) #f)) (cdr v.10$4539$4576))) v.11$4540$4578)) (car v.10$4539$4576)) #f)) (cdr v.8$4537$4572)) #f)) (car v.8$4537$4572)) #f)) (cdr expr$4522$4547))))) ((lambda (v.1$4530$4582) (if (pair? v.1$4530$4582) ((lambda (v.2$4531$4584) (if (pair? v.2$4531$4584) ((lambda (v.3$4532$4586) ((lambda (x$4587) ((lambda (v.4$4533$4588) ((lambda (y$4589) ((lambda (v.5$4534$4590) (if (pair? v.5$4534$4590) ((lambda (v.6$4535$4592) ((lambda (sk$4593) ((lambda (v.7$4536$4594) (if (null? v.7$4536$4594) (cons (cons-source (rename$4523$4548 (quote match-check-ellipsis)) (cons-source x$4587 (cons-source (cons-source (rename$4523$4548 (quote match-syntax-error)) (cons-source "multiple ellipsis patterns not allowed at same level" (quote ()) (quote ("multiple ellipsis patterns not allowed at same level"))) (quote (match-syntax-error "multiple ellipsis patterns not allowed at same level"))) (cons-source (cons-source (rename$4523$4548 (quote match-verify-no-ellipsis)) (cons-source y$4589 (cons-source sk$4593 (quote ()) (quote (sk))) (quote (y sk))) (quote (match-verify-no-ellipsis y sk))) (quote ()) (quote ((match-verify-no-ellipsis y sk)))) (quote ((match-syntax-error "multiple ellipsis patterns not allowed at same level") (match-verify-no-ellipsis y sk)))) (quote (x (match-syntax-error "multiple ellipsis patterns not allowed at same level") (match-verify-no-ellipsis y sk)))) (quote (match-check-ellipsis x (match-syntax-error "multiple ellipsis patterns not allowed at same level") (match-verify-no-ellipsis y sk)))) #f) #f)) (cdr v.5$4534$4590))) v.6$4535$4592)) (car v.5$4534$4590)) #f)) (cdr v.1$4530$4582))) v.4$4533$4588)) (cdr v.2$4531$4584))) v.3$4532$4586)) (car v.2$4531$4584)) #f)) (car v.1$4530$4582)) #f)) (cdr expr$4522$4547))))) (match-gen-ellipsis/range lambda (expr$4347$4385 rename$4348$4386 compare$4349$4387) (car ((lambda (tmp$4389$4391) (if tmp$4389$4391 tmp$4389$4391 (cons (error "no expansion for" expr$4347$4385) #f))) ((lambda (v.1$4355$4392) (if (pair? v.1$4355$4392) ((lambda (v.2$4356$4394) ((lambda (%lo$4395) ((lambda (v.3$4357$4396) (if (pair? v.3$4357$4396) ((lambda (v.4$4358$4398) ((lambda (%hi$4399) ((lambda (v.5$4359$4400) (if (pair? v.5$4359$4400) ((lambda (v.6$4360$4402) ((lambda (v$4403) ((lambda (v.7$4361$4404) (if (pair? v.7$4361$4404) ((lambda (v.8$4362$4406) ((lambda (p$4407) ((lambda (v.9$4363$4408) (if (pair? v.9$4363$4408) ((lambda (v.10$4364$4410) ((lambda (r$4411) ((lambda (v.11$4365$4412) (if (pair? v.11$4365$4412) ((lambda (v.12$4366$4414) ((lambda (g+s$4415) ((lambda (v.13$4367$4416) (if (pair? v.13$4367$4416) ((lambda (v.14$4368$4418) (if (list? v.14$4368$4418) ((lambda (sk$4420) ((lambda (v.15$4369$4421) (if (pair? v.15$4369$4421) ((lambda (v.16$4370$4423) ((lambda (fk$4424) ((lambda (v.17$4371$4425) (if (pair? v.17$4371$4425) ((lambda (v.18$4372$4427) (if (list? v.18$4372$4427) ((lambda (i$4429) ((lambda (v.19$4373$4430) (if (pair? v.19$4373$4430) ((lambda (v.20$4374$4432) ((lambda (w.21$4375$4434 id-ls23$4377$4435 id-ls-ls24$4378$4436) ((lambda (lp.22$4376$4437) (set! lp.22$4376$4437 (lambda (w.21$4375$4438 id-ls23$4377$4439 id-ls-ls24$4378$4440) (if (null? w.21$4375$4438) ((lambda (id$4441 id-ls$4442) ((lambda (v.30$4384$4443) (if (null? v.30$4384$4443) (cons (cons-source (rename$4348$4386 (quote match-verify-no-ellipsis)) (cons-source r$4411 (cons-source (cons-source (rename$4348$4386 (quote let*)) (cons-source (cons-source (cons-source (rename$4348$4386 (quote lo)) (cons-source %lo$4395 (quote ()) (quote (%lo))) (quote (lo %lo))) (cons-source (cons-source (rename$4348$4386 (quote hi)) (cons-source %hi$4399 (quote ()) (quote (%hi))) (quote (hi %hi))) (cons-source (cons-source (rename$4348$4386 (quote tail-len)) (cons-source (cons-source (rename$4348$4386 (quote length)) (cons-source (cons-source (rename$4348$4386 (quote quote)) (cons-source r$4411 (quote ()) (quote (r))) (quote (quote r))) (quote ()) (quote ((quote r)))) (quote (length (quote r)))) (quote ()) (quote ((length (quote r))))) (quote (tail-len (length (quote r))))) (cons-source (cons-source (rename$4348$4386 (quote ls)) (cons-source v$4403 (quote ()) (quote (v))) (quote (ls v))) (cons-source (cons-source (rename$4348$4386 (quote len)) (cons-source (cons-source (rename$4348$4386 (quote and)) (cons-source (cons-source (rename$4348$4386 (quote list?)) (cons-source (rename$4348$4386 (quote ls)) (quote ()) (quote (ls))) (quote (list? ls))) (cons-source (cons-source (rename$4348$4386 (quote -)) (cons-source (cons-source (rename$4348$4386 (quote length)) (cons-source (rename$4348$4386 (quote ls)) (quote ()) (quote (ls))) (quote (length ls))) (cons-source (rename$4348$4386 (quote tail-len)) (quote ()) (quote (tail-len))) (quote ((length ls) tail-len))) (quote (- (length ls) tail-len))) (quote ()) (quote ((- (length ls) tail-len)))) (quote ((list? ls) (- (length ls) tail-len)))) (quote (and (list? ls) (- (length ls) tail-len)))) (quote ()) (quote ((and (list? ls) (- (length ls) tail-len))))) (quote (len (and (list? ls) (- (length ls) tail-len))))) (quote ()) (quote ((len (and (list? ls) (- (length ls) tail-len)))))) (quote ((ls v) (len (and (list? ls) (- (length ls) tail-len)))))) (quote ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))))) (quote ((hi %hi) (tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))))) (quote ((lo %lo) (hi %hi) (tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))))) (cons-source (cons-source (rename$4348$4386 (quote if)) (cons-source (cons-source (rename$4348$4386 (quote and)) (cons-source (rename$4348$4386 (quote len)) (cons-source (cons-source (rename$4348$4386 (quote <=)) (cons-source (rename$4348$4386 (quote lo)) (cons-source (rename$4348$4386 (quote len)) (cons-source (rename$4348$4386 (quote hi)) (quote ()) (quote (hi))) (quote (len hi))) (quote (lo len hi))) (quote (<= lo len hi))) (quote ()) (quote ((<= lo len hi)))) (quote (len (<= lo len hi)))) (quote (and len (<= lo len hi)))) (cons-source (cons-source (rename$4348$4386 (quote let)) (cons-source (rename$4348$4386 (quote loop)) (cons-source (cons-source (cons-source (rename$4348$4386 (quote ls)) (cons-source (rename$4348$4386 (quote ls)) (quote ()) (quote (ls))) (quote (ls ls))) (cons-source (cons-source (rename$4348$4386 (quote j)) (cons-source 0 (quote ()) (quote (0))) (quote (j 0))) (map (lambda (id-ls$4445) (cons-source id-ls$4445 (cons-source (cons-source (rename$4348$4386 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$4442) (quote ((j 0) (id-ls (quote ())) ...))) (quote ((ls ls) (j 0) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$4348$4386 (quote cond)) (cons-source (cons-source (cons-source (rename$4348$4386 (quote =)) (cons-source (rename$4348$4386 (quote j)) (cons-source (rename$4348$4386 (quote len)) (quote ()) (quote (len))) (quote (j len))) (quote (= j len))) (cons-source (cons-source (rename$4348$4386 (quote let)) (cons-source (map (lambda (id$4446 id-ls$4447) (cons-source id$4446 (cons-source (cons-source (rename$4348$4386 (quote reverse)) (cons-source id-ls$4447 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$4441 id-ls$4442) (cons-source (cons-source (rename$4348$4386 (quote match-one)) (cons-source (rename$4348$4386 (quote ls)) (cons-source r$4411 (cons-source (cons-source #f (cons-source #f (quote ()) (quote (#f))) (quote (#f #f))) (cons-source sk$4420 (cons-source fk$4424 (cons-source (append (map (lambda (i$4448) i$4448) i$4429) id$4441) (quote ()) (quote ((i ... id ...)))) (quote (fk (i ... id ...)))) (quote ((sk ...) fk (i ... id ...)))) (quote ((#f #f) (sk ...) fk (i ... id ...)))) (quote (r (#f #f) (sk ...) fk (i ... id ...)))) (quote (ls r (#f #f) (sk ...) fk (i ... id ...)))) (quote (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) (quote ()) (quote ((match-one ls r (#f #f) (sk ...) fk (i ... id ...))))) (quote (((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...))))) (quote (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...))))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))))) (quote ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))))) (cons-source (cons-source (cons-source (rename$4348$4386 (quote pair?)) (cons-source (rename$4348$4386 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$4348$4386 (quote let)) (cons-source (cons-source (cons-source (rename$4348$4386 (quote w)) (cons-source (cons-source (rename$4348$4386 (quote car)) (cons-source (rename$4348$4386 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (quote ()) (quote ((car ls)))) (quote (w (car ls)))) (quote ()) (quote ((w (car ls))))) (cons-source (cons-source (rename$4348$4386 (quote match-one)) (cons-source (rename$4348$4386 (quote w)) (cons-source p$4407 (cons-source (cons-source (cons-source (rename$4348$4386 (quote car)) (cons-source (rename$4348$4386 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$4348$4386 (quote set-car!)) (cons-source (rename$4348$4386 (quote ls)) (quote ()) (quote (ls))) (quote (set-car! ls))) (quote ()) (quote ((set-car! ls)))) (quote ((car ls) (set-car! ls)))) (cons-source (cons-source (rename$4348$4386 (quote match-drop-ids)) (cons-source (cons-source (rename$4348$4386 (quote loop)) (cons-source (cons-source (rename$4348$4386 (quote cdr)) (cons-source (rename$4348$4386 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (cons-source (cons-source (rename$4348$4386 (quote +)) (cons-source (rename$4348$4386 (quote j)) (cons-source 1 (quote ()) (quote (1))) (quote (j 1))) (quote (+ j 1))) (map (lambda (id$4449 id-ls$4450) (cons-source (rename$4348$4386 (quote cons)) (cons-source id$4449 (cons-source id-ls$4450 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$4441 id-ls$4442) (quote ((+ j 1) (cons id id-ls) ...))) (quote ((cdr ls) (+ j 1) (cons id id-ls) ...))) (quote (loop (cdr ls) (+ j 1) (cons id id-ls) ...))) (quote ()) (quote ((loop (cdr ls) (+ j 1) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)))) (cons-source fk$4424 (cons-source i$4429 (quote ()) (quote ((i ...)))) (quote (fk (i ...)))) (quote ((match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (quote (((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (quote (p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (quote (w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (quote (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (quote ()) (quote ((match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...))))) (quote (((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...))))) (quote (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...))))) (quote ()) (quote ((let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))))) (quote ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))))) (cons-source (cons-source (rename$4348$4386 (quote else)) (cons-source fk$4424 (quote ()) (quote (fk))) (quote (else fk))) (quote ()) (quote ((else fk)))) (quote (((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote (((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote ()) (quote ((cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (cons-source fk$4424 (quote ()) (quote (fk))) (quote ((let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk))) (quote ((and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk))) (quote (if (and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk))) (quote ()) (quote ((if (and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk)))) (quote (((lo %lo) (hi %hi) (tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))) (if (and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk)))) (quote (let* ((lo %lo) (hi %hi) (tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))) (if (and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk)))) (quote ()) (quote ((let* ((lo %lo) (hi %hi) (tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))) (if (and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk))))) (quote (r (let* ((lo %lo) (hi %hi) (tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))) (if (and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk))))) (quote (match-verify-no-ellipsis r (let* ((lo %lo) (hi %hi) (tail-len (length (quote r))) (ls v) (len (and (list? ls) (- (length ls) tail-len)))) (if (and len (<= lo len hi)) (let loop ((ls ls) (j 0) (id-ls (quote ())) ...) (cond ((= j len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (+ j 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))) fk))))) #f) #f)) (cdr v.19$4373$4430))) (reverse id-ls23$4377$4439) (reverse id-ls-ls24$4378$4440)) (if (pair? w.21$4375$4438) ((lambda (v.25$4379$4452) (if (pair? v.25$4379$4452) ((lambda (v.26$4380$4454) ((lambda (id$4455) ((lambda (v.27$4381$4456) (if (pair? v.27$4381$4456) ((lambda (v.28$4382$4458) ((lambda (id-ls$4459) ((lambda (v.29$4383$4460) (if (null? v.29$4383$4460) (lp.22$4376$4437 (cdr w.21$4375$4438) (cons id$4455 id-ls23$4377$4439) (cons id-ls$4459 id-ls-ls24$4378$4440)) #f)) (cdr v.27$4381$4456))) v.28$4382$4458)) (car v.27$4381$4456)) #f)) (cdr v.25$4379$4452))) v.26$4380$4454)) (car v.25$4379$4452)) #f)) (car w.21$4375$4438)) #f)))) (lp.22$4376$4437 w.21$4375$4434 id-ls23$4377$4435 id-ls-ls24$4378$4436)) #f)) v.20$4374$4432 (quote ()) (quote ()))) (car v.19$4373$4430)) #f)) (cdr v.17$4371$4425))) v.18$4372$4427) #f)) (car v.17$4371$4425)) #f)) (cdr v.15$4369$4421))) v.16$4370$4423)) (car v.15$4369$4421)) #f)) (cdr v.13$4367$4416))) v.14$4368$4418) #f)) (car v.13$4367$4416)) #f)) (cdr v.11$4365$4412))) v.12$4366$4414)) (car v.11$4365$4412)) #f)) (cdr v.9$4363$4408))) v.10$4364$4410)) (car v.9$4363$4408)) #f)) (cdr v.7$4361$4404))) v.8$4362$4406)) (car v.7$4361$4404)) #f)) (cdr v.5$4359$4400))) v.6$4360$4402)) (car v.5$4359$4400)) #f)) (cdr v.3$4357$4396))) v.4$4358$4398)) (car v.3$4357$4396)) #f)) (cdr v.1$4355$4392))) v.2$4356$4394)) (car v.1$4355$4392)) #f)) (cdr expr$4347$4385))))) (match-gen-ellipsis/qq lambda (expr$4190$4224 rename$4191$4225 compare$4192$4226) (car ((lambda (tmp$4228$4230) (if tmp$4228$4230 tmp$4228$4230 (cons (error "no expansion for" expr$4190$4224) #f))) ((lambda (v.1$4198$4231) (if (pair? v.1$4198$4231) ((lambda (v.2$4199$4233) ((lambda (v$4234) ((lambda (v.3$4200$4235) (if (pair? v.3$4200$4235) ((lambda (v.4$4201$4237) ((lambda (p$4238) ((lambda (v.5$4202$4239) (if (pair? v.5$4202$4239) ((lambda (v.6$4203$4241) ((lambda (r$4242) ((lambda (v.7$4204$4243) (if (pair? v.7$4204$4243) ((lambda (v.8$4205$4245) ((lambda (g+s$4246) ((lambda (v.9$4206$4247) (if (pair? v.9$4206$4247) ((lambda (v.10$4207$4249) (if (list? v.10$4207$4249) ((lambda (sk$4251) ((lambda (v.11$4208$4252) (if (pair? v.11$4208$4252) ((lambda (v.12$4209$4254) ((lambda (fk$4255) ((lambda (v.13$4210$4256) (if (pair? v.13$4210$4256) ((lambda (v.14$4211$4258) (if (list? v.14$4211$4258) ((lambda (i$4260) ((lambda (v.15$4212$4261) (if (pair? v.15$4212$4261) ((lambda (v.16$4213$4263) ((lambda (w.17$4214$4265 id-ls19$4216$4266 id-ls-ls20$4217$4267) ((lambda (lp.18$4215$4268) (set! lp.18$4215$4268 (lambda (w.17$4214$4269 id-ls19$4216$4270 id-ls-ls20$4217$4271) (if (null? w.17$4214$4269) ((lambda (id$4272 id-ls$4273) ((lambda (v.26$4223$4274) (if (null? v.26$4223$4274) (cons (cons-source (rename$4191$4225 (quote match-verify-no-ellipsis)) (cons-source r$4242 (cons-source (cons-source (rename$4191$4225 (quote let*)) (cons-source (cons-source (cons-source (rename$4191$4225 (quote tail-len)) (cons-source (cons-source (rename$4191$4225 (quote length)) (cons-source (cons-source (rename$4191$4225 (quote quote)) (cons-source r$4242 (quote ()) (quote (r))) (quote (quote r))) (quote ()) (quote ((quote r)))) (quote (length (quote r)))) (quote ()) (quote ((length (quote r))))) (quote (tail-len (length (quote r))))) (cons-source (cons-source (rename$4191$4225 (quote ls)) (cons-source v$4234 (quote ()) (quote (v))) (quote (ls v))) (cons-source (cons-source (rename$4191$4225 (quote len)) (cons-source (cons-source (rename$4191$4225 (quote and)) (cons-source (cons-source (rename$4191$4225 (quote list?)) (cons-source (rename$4191$4225 (quote ls)) (quote ()) (quote (ls))) (quote (list? ls))) (cons-source (cons-source (rename$4191$4225 (quote length)) (cons-source (rename$4191$4225 (quote ls)) (quote ()) (quote (ls))) (quote (length ls))) (quote ()) (quote ((length ls)))) (quote ((list? ls) (length ls)))) (quote (and (list? ls) (length ls)))) (quote ()) (quote ((and (list? ls) (length ls))))) (quote (len (and (list? ls) (length ls))))) (quote ()) (quote ((len (and (list? ls) (length ls)))))) (quote ((ls v) (len (and (list? ls) (length ls)))))) (quote ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))))) (cons-source (cons-source (rename$4191$4225 (quote if)) (cons-source (cons-source (rename$4191$4225 (quote or)) (cons-source (cons-source (rename$4191$4225 (quote not)) (cons-source (rename$4191$4225 (quote len)) (quote ()) (quote (len))) (quote (not len))) (cons-source (cons-source (rename$4191$4225 (quote <)) (cons-source (rename$4191$4225 (quote len)) (cons-source (rename$4191$4225 (quote tail-len)) (quote ()) (quote (tail-len))) (quote (len tail-len))) (quote (< len tail-len))) (quote ()) (quote ((< len tail-len)))) (quote ((not len) (< len tail-len)))) (quote (or (not len) (< len tail-len)))) (cons-source fk$4255 (cons-source (cons-source (rename$4191$4225 (quote let)) (cons-source (rename$4191$4225 (quote loop)) (cons-source (cons-source (cons-source (rename$4191$4225 (quote ls)) (cons-source (rename$4191$4225 (quote ls)) (quote ()) (quote (ls))) (quote (ls ls))) (cons-source (cons-source (rename$4191$4225 (quote n)) (cons-source (rename$4191$4225 (quote len)) (quote ()) (quote (len))) (quote (n len))) (map (lambda (id-ls$4276) (cons-source id-ls$4276 (cons-source (cons-source (rename$4191$4225 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$4273) (quote ((n len) (id-ls (quote ())) ...))) (quote ((ls ls) (n len) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$4191$4225 (quote cond)) (cons-source (cons-source (cons-source (rename$4191$4225 (quote =)) (cons-source (rename$4191$4225 (quote n)) (cons-source (rename$4191$4225 (quote tail-len)) (quote ()) (quote (tail-len))) (quote (n tail-len))) (quote (= n tail-len))) (cons-source (cons-source (rename$4191$4225 (quote let)) (cons-source (map (lambda (id$4277 id-ls$4278) (cons-source id$4277 (cons-source (cons-source (rename$4191$4225 (quote reverse)) (cons-source id-ls$4278 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$4272 id-ls$4273) (cons-source (cons-source (rename$4191$4225 (quote match-quasiquote)) (cons-source (rename$4191$4225 (quote ls)) (cons-source r$4242 (cons-source g+s$4246 (cons-source sk$4251 (cons-source fk$4255 (cons-source (append (map (lambda (i$4279) i$4279) i$4260) id$4272) (quote ()) (quote ((i ... id ...)))) (quote (fk (i ... id ...)))) (quote ((sk ...) fk (i ... id ...)))) (quote (g+s (sk ...) fk (i ... id ...)))) (quote (r g+s (sk ...) fk (i ... id ...)))) (quote (ls r g+s (sk ...) fk (i ... id ...)))) (quote (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) (quote ()) (quote ((match-quasiquote ls r g+s (sk ...) fk (i ... id ...))))) (quote (((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...))))) (quote (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...))))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))))) (quote ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))))) (cons-source (cons-source (cons-source (rename$4191$4225 (quote pair?)) (cons-source (rename$4191$4225 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$4191$4225 (quote let)) (cons-source (cons-source (cons-source (rename$4191$4225 (quote w)) (cons-source (cons-source (rename$4191$4225 (quote car)) (cons-source (rename$4191$4225 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (quote ()) (quote ((car ls)))) (quote (w (car ls)))) (quote ()) (quote ((w (car ls))))) (cons-source (cons-source (rename$4191$4225 (quote match-one)) (cons-source (rename$4191$4225 (quote w)) (cons-source p$4238 (cons-source (cons-source (cons-source (rename$4191$4225 (quote car)) (cons-source (rename$4191$4225 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$4191$4225 (quote set-car!)) (cons-source (rename$4191$4225 (quote ls)) (quote ()) (quote (ls))) (quote (set-car! ls))) (quote ()) (quote ((set-car! ls)))) (quote ((car ls) (set-car! ls)))) (cons-source (cons-source (rename$4191$4225 (quote match-drop-ids)) (cons-source (cons-source (rename$4191$4225 (quote loop)) (cons-source (cons-source (rename$4191$4225 (quote cdr)) (cons-source (rename$4191$4225 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (cons-source (cons-source (rename$4191$4225 (quote -)) (cons-source (rename$4191$4225 (quote n)) (cons-source 1 (quote ()) (quote (1))) (quote (n 1))) (quote (- n 1))) (map (lambda (id$4280 id-ls$4281) (cons-source (rename$4191$4225 (quote cons)) (cons-source id$4280 (cons-source id-ls$4281 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$4272 id-ls$4273) (quote ((- n 1) (cons id id-ls) ...))) (quote ((cdr ls) (- n 1) (cons id id-ls) ...))) (quote (loop (cdr ls) (- n 1) (cons id id-ls) ...))) (quote ()) (quote ((loop (cdr ls) (- n 1) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)))) (cons-source fk$4255 (cons-source i$4260 (quote ()) (quote ((i ...)))) (quote (fk (i ...)))) (quote ((match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote ()) (quote ((match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...))))) (quote (((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...))))) (quote (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...))))) (quote ()) (quote ((let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))))) (quote ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))))) (cons-source (cons-source (rename$4191$4225 (quote else)) (cons-source fk$4255 (quote ()) (quote (fk))) (quote (else fk))) (quote ()) (quote ((else fk)))) (quote (((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote (((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote ()) (quote ((cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote ()) (quote ((let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote (fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote ((or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote ()) (quote ((if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))))) (quote (((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))))) (quote (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))))) (quote ()) (quote ((let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))))) (quote (r (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))))) (quote (match-verify-no-ellipsis r (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-quasiquote ls r g+s (sk ...) fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))))) #f) #f)) (cdr v.15$4212$4261))) (reverse id-ls19$4216$4270) (reverse id-ls-ls20$4217$4271)) (if (pair? w.17$4214$4269) ((lambda (v.21$4218$4283) (if (pair? v.21$4218$4283) ((lambda (v.22$4219$4285) ((lambda (id$4286) ((lambda (v.23$4220$4287) (if (pair? v.23$4220$4287) ((lambda (v.24$4221$4289) ((lambda (id-ls$4290) ((lambda (v.25$4222$4291) (if (null? v.25$4222$4291) (lp.18$4215$4268 (cdr w.17$4214$4269) (cons id$4286 id-ls19$4216$4270) (cons id-ls$4290 id-ls-ls20$4217$4271)) #f)) (cdr v.23$4220$4287))) v.24$4221$4289)) (car v.23$4220$4287)) #f)) (cdr v.21$4218$4283))) v.22$4219$4285)) (car v.21$4218$4283)) #f)) (car w.17$4214$4269)) #f)))) (lp.18$4215$4268 w.17$4214$4265 id-ls19$4216$4266 id-ls-ls20$4217$4267)) #f)) v.16$4213$4263 (quote ()) (quote ()))) (car v.15$4212$4261)) #f)) (cdr v.13$4210$4256))) v.14$4211$4258) #f)) (car v.13$4210$4256)) #f)) (cdr v.11$4208$4252))) v.12$4209$4254)) (car v.11$4208$4252)) #f)) (cdr v.9$4206$4247))) v.10$4207$4249) #f)) (car v.9$4206$4247)) #f)) (cdr v.7$4204$4243))) v.8$4205$4245)) (car v.7$4204$4243)) #f)) (cdr v.5$4202$4239))) v.6$4203$4241)) (car v.5$4202$4239)) #f)) (cdr v.3$4200$4235))) v.4$4201$4237)) (car v.3$4200$4235)) #f)) (cdr v.1$4198$4231))) v.2$4199$4233)) (car v.1$4198$4231)) #f)) (cdr expr$4190$4224))))) (match-gen-ellipsis lambda (expr$3895$3955 rename$3896$3956 compare$3897$3957) (car ((lambda (tmp$3959$3961) (if tmp$3959$3961 tmp$3959$3961 ((lambda (tmp$3963$3965) (if tmp$3963$3965 tmp$3963$3965 (cons (error "no expansion for" expr$3895$3955) #f))) ((lambda (v.27$3929$3966) (if (pair? v.27$3929$3966) ((lambda (v.28$3930$3968) ((lambda (v$3969) ((lambda (v.29$3931$3970) (if (pair? v.29$3931$3970) ((lambda (v.30$3932$3972) ((lambda (p$3973) ((lambda (v.31$3933$3974) (if (pair? v.31$3933$3974) ((lambda (v.32$3934$3976) ((lambda (r$3977) ((lambda (v.33$3935$3978) (if (pair? v.33$3935$3978) ((lambda (v.34$3936$3980) ((lambda (g+s$3981) ((lambda (v.35$3937$3982) (if (pair? v.35$3937$3982) ((lambda (v.36$3938$3984) ((lambda (sk$3985) ((lambda (v.37$3939$3986) (if (pair? v.37$3939$3986) ((lambda (v.38$3940$3988) ((lambda (fk$3989) ((lambda (v.39$3941$3990) (if (pair? v.39$3941$3990) ((lambda (v.40$3942$3992) (if (list? v.40$3942$3992) ((lambda (i$3994) ((lambda (v.41$3943$3995) (if (pair? v.41$3943$3995) ((lambda (v.42$3944$3997) ((lambda (w.43$3945$3999 id-ls45$3947$4000 id-ls-ls46$3948$4001) ((lambda (lp.44$3946$4002) (set! lp.44$3946$4002 (lambda (w.43$3945$4003 id-ls45$3947$4004 id-ls-ls46$3948$4005) (if (null? w.43$3945$4003) ((lambda (id$4006 id-ls$4007) ((lambda (v.52$3954$4008) (if (null? v.52$3954$4008) (cons (cons-source (rename$3896$3956 (quote match-verify-no-ellipsis)) (cons-source r$3977 (cons-source (cons-source (rename$3896$3956 (quote let*)) (cons-source (cons-source (cons-source (rename$3896$3956 (quote tail-len)) (cons-source (cons-source (rename$3896$3956 (quote length)) (cons-source (cons-source (rename$3896$3956 (quote quote)) (cons-source r$3977 (quote ()) (quote (r))) (quote (quote r))) (quote ()) (quote ((quote r)))) (quote (length (quote r)))) (quote ()) (quote ((length (quote r))))) (quote (tail-len (length (quote r))))) (cons-source (cons-source (rename$3896$3956 (quote ls)) (cons-source v$3969 (quote ()) (quote (v))) (quote (ls v))) (cons-source (cons-source (rename$3896$3956 (quote len)) (cons-source (cons-source (rename$3896$3956 (quote and)) (cons-source (cons-source (rename$3896$3956 (quote list?)) (cons-source (rename$3896$3956 (quote ls)) (quote ()) (quote (ls))) (quote (list? ls))) (cons-source (cons-source (rename$3896$3956 (quote length)) (cons-source (rename$3896$3956 (quote ls)) (quote ()) (quote (ls))) (quote (length ls))) (quote ()) (quote ((length ls)))) (quote ((list? ls) (length ls)))) (quote (and (list? ls) (length ls)))) (quote ()) (quote ((and (list? ls) (length ls))))) (quote (len (and (list? ls) (length ls))))) (quote ()) (quote ((len (and (list? ls) (length ls)))))) (quote ((ls v) (len (and (list? ls) (length ls)))))) (quote ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))))) (cons-source (cons-source (rename$3896$3956 (quote if)) (cons-source (cons-source (rename$3896$3956 (quote or)) (cons-source (cons-source (rename$3896$3956 (quote not)) (cons-source (rename$3896$3956 (quote len)) (quote ()) (quote (len))) (quote (not len))) (cons-source (cons-source (rename$3896$3956 (quote <)) (cons-source (rename$3896$3956 (quote len)) (cons-source (rename$3896$3956 (quote tail-len)) (quote ()) (quote (tail-len))) (quote (len tail-len))) (quote (< len tail-len))) (quote ()) (quote ((< len tail-len)))) (quote ((not len) (< len tail-len)))) (quote (or (not len) (< len tail-len)))) (cons-source fk$3989 (cons-source (cons-source (rename$3896$3956 (quote let)) (cons-source (rename$3896$3956 (quote loop)) (cons-source (cons-source (cons-source (rename$3896$3956 (quote ls)) (cons-source (rename$3896$3956 (quote ls)) (quote ()) (quote (ls))) (quote (ls ls))) (cons-source (cons-source (rename$3896$3956 (quote n)) (cons-source (rename$3896$3956 (quote len)) (quote ()) (quote (len))) (quote (n len))) (map (lambda (id-ls$4010) (cons-source id-ls$4010 (cons-source (cons-source (rename$3896$3956 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$4007) (quote ((n len) (id-ls (quote ())) ...))) (quote ((ls ls) (n len) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$3896$3956 (quote cond)) (cons-source (cons-source (cons-source (rename$3896$3956 (quote =)) (cons-source (rename$3896$3956 (quote n)) (cons-source (rename$3896$3956 (quote tail-len)) (quote ()) (quote (tail-len))) (quote (n tail-len))) (quote (= n tail-len))) (cons-source (cons-source (rename$3896$3956 (quote let)) (cons-source (map (lambda (id$4011 id-ls$4012) (cons-source id$4011 (cons-source (cons-source (rename$3896$3956 (quote reverse)) (cons-source id-ls$4012 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$4006 id-ls$4007) (cons-source (cons-source (rename$3896$3956 (quote match-one)) (cons-source (rename$3896$3956 (quote ls)) (cons-source r$3977 (cons-source (cons-source #f (cons-source #f (quote ()) (quote (#f))) (quote (#f #f))) (cons-source sk$3985 (cons-source fk$3989 (cons-source (append (map (lambda (i$4013) i$4013) i$3994) id$4006) (quote ()) (quote ((i ... id ...)))) (quote (fk (i ... id ...)))) (quote (sk fk (i ... id ...)))) (quote ((#f #f) sk fk (i ... id ...)))) (quote (r (#f #f) sk fk (i ... id ...)))) (quote (ls r (#f #f) sk fk (i ... id ...)))) (quote (match-one ls r (#f #f) sk fk (i ... id ...)))) (quote ()) (quote ((match-one ls r (#f #f) sk fk (i ... id ...))))) (quote (((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...))))) (quote (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...))))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))))) (quote ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))))) (cons-source (cons-source (cons-source (rename$3896$3956 (quote pair?)) (cons-source (rename$3896$3956 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$3896$3956 (quote let)) (cons-source (cons-source (cons-source (rename$3896$3956 (quote w)) (cons-source (cons-source (rename$3896$3956 (quote car)) (cons-source (rename$3896$3956 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (quote ()) (quote ((car ls)))) (quote (w (car ls)))) (quote ()) (quote ((w (car ls))))) (cons-source (cons-source (rename$3896$3956 (quote match-one)) (cons-source (rename$3896$3956 (quote w)) (cons-source p$3973 (cons-source (cons-source (cons-source (rename$3896$3956 (quote car)) (cons-source (rename$3896$3956 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$3896$3956 (quote set-car!)) (cons-source (rename$3896$3956 (quote ls)) (quote ()) (quote (ls))) (quote (set-car! ls))) (quote ()) (quote ((set-car! ls)))) (quote ((car ls) (set-car! ls)))) (cons-source (cons-source (rename$3896$3956 (quote match-drop-ids)) (cons-source (cons-source (rename$3896$3956 (quote loop)) (cons-source (cons-source (rename$3896$3956 (quote cdr)) (cons-source (rename$3896$3956 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (cons-source (cons-source (rename$3896$3956 (quote -)) (cons-source (rename$3896$3956 (quote n)) (cons-source 1 (quote ()) (quote (1))) (quote (n 1))) (quote (- n 1))) (map (lambda (id$4014 id-ls$4015) (cons-source (rename$3896$3956 (quote cons)) (cons-source id$4014 (cons-source id-ls$4015 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$4006 id-ls$4007) (quote ((- n 1) (cons id id-ls) ...))) (quote ((cdr ls) (- n 1) (cons id id-ls) ...))) (quote (loop (cdr ls) (- n 1) (cons id id-ls) ...))) (quote ()) (quote ((loop (cdr ls) (- n 1) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)))) (cons-source fk$3989 (cons-source i$3994 (quote ()) (quote ((i ...)))) (quote (fk (i ...)))) (quote ((match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (quote ()) (quote ((match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...))))) (quote (((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...))))) (quote (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...))))) (quote ()) (quote ((let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))))) (quote ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))))) (cons-source (cons-source (rename$3896$3956 (quote else)) (cons-source fk$3989 (quote ()) (quote (fk))) (quote (else fk))) (quote ()) (quote ((else fk)))) (quote (((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote (((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))) (quote ()) (quote ((cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))) (quote ()) (quote ((let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote (fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote ((or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))) (quote ()) (quote ((if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))))) (quote (((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))))) (quote (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk))))))) (quote ()) (quote ((let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))))) (quote (r (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))))) (quote (match-verify-no-ellipsis r (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) sk fk (i ... id ...)))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk (i ...)))) (else fk)))))))) #f) #f)) (cdr v.41$3943$3995))) (reverse id-ls45$3947$4004) (reverse id-ls-ls46$3948$4005)) (if (pair? w.43$3945$4003) ((lambda (v.47$3949$4017) (if (pair? v.47$3949$4017) ((lambda (v.48$3950$4019) ((lambda (id$4020) ((lambda (v.49$3951$4021) (if (pair? v.49$3951$4021) ((lambda (v.50$3952$4023) ((lambda (id-ls$4024) ((lambda (v.51$3953$4025) (if (null? v.51$3953$4025) (lp.44$3946$4002 (cdr w.43$3945$4003) (cons id$4020 id-ls45$3947$4004) (cons id-ls$4024 id-ls-ls46$3948$4005)) #f)) (cdr v.49$3951$4021))) v.50$3952$4023)) (car v.49$3951$4021)) #f)) (cdr v.47$3949$4017))) v.48$3950$4019)) (car v.47$3949$4017)) #f)) (car w.43$3945$4003)) #f)))) (lp.44$3946$4002 w.43$3945$3999 id-ls45$3947$4000 id-ls-ls46$3948$4001)) #f)) v.42$3944$3997 (quote ()) (quote ()))) (car v.41$3943$3995)) #f)) (cdr v.39$3941$3990))) v.40$3942$3992) #f)) (car v.39$3941$3990)) #f)) (cdr v.37$3939$3986))) v.38$3940$3988)) (car v.37$3939$3986)) #f)) (cdr v.35$3937$3982))) v.36$3938$3984)) (car v.35$3937$3982)) #f)) (cdr v.33$3935$3978))) v.34$3936$3980)) (car v.33$3935$3978)) #f)) (cdr v.31$3933$3974))) v.32$3934$3976)) (car v.31$3933$3974)) #f)) (cdr v.29$3931$3970))) v.30$3932$3972)) (car v.29$3931$3970)) #f)) (cdr v.27$3929$3966))) v.28$3930$3968)) (car v.27$3929$3966)) #f)) (cdr expr$3895$3955))))) ((lambda (v.1$3903$4027) (if (pair? v.1$3903$4027) ((lambda (v.2$3904$4029) ((lambda (v$4030) ((lambda (v.3$3905$4031) (if (pair? v.3$3905$4031) ((lambda (v.4$3906$4033) ((lambda (p$4034) ((lambda (v.5$3907$4035) (if (pair? v.5$3907$4035) ((lambda (v.6$3908$4037) (if (null? v.6$3908$4037) ((lambda (v.7$3909$4039) (if (pair? v.7$3909$4039) ((lambda (v.8$3910$4041) ((lambda (g+s$4042) ((lambda (v.9$3911$4043) (if (pair? v.9$3911$4043) ((lambda (v.10$3912$4045) (if (list? v.10$3912$4045) ((lambda (sk$4047) ((lambda (v.11$3913$4048) (if (pair? v.11$3913$4048) ((lambda (v.12$3914$4050) ((lambda (fk$4051) ((lambda (v.13$3915$4052) (if (pair? v.13$3915$4052) ((lambda (v.14$3916$4054) ((lambda (i$4055) ((lambda (v.15$3917$4056) (if (pair? v.15$3917$4056) ((lambda (v.16$3918$4058) ((lambda (w.17$3919$4060 id-ls19$3921$4061 id-ls-ls20$3922$4062) ((lambda (lp.18$3920$4063) (set! lp.18$3920$4063 (lambda (w.17$3919$4064 id-ls19$3921$4065 id-ls-ls20$3922$4066) (if (null? w.17$3919$4064) ((lambda (id$4067 id-ls$4068) ((lambda (v.26$3928$4069) (if (null? v.26$3928$4069) (cons (cons-source (rename$3896$3956 (quote match-check-identifier)) (cons-source p$4034 (cons-source (cons-source (rename$3896$3956 (quote let)) (cons-source (cons-source (cons-source p$4034 (cons-source v$4030 (quote ()) (quote (v))) (quote (p v))) (quote ()) (quote ((p v)))) (cons-source (cons-source (rename$3896$3956 (quote if)) (cons-source (cons-source (rename$3896$3956 (quote list?)) (cons-source p$4034 (quote ()) (quote (p))) (quote (list? p))) (cons-source (append (map (lambda (sk$4071) sk$4071) sk$4047) (cons-source i$4055 (quote ()) (quote (i)))) (cons-source fk$4051 (quote ()) (quote (fk))) (quote ((sk ... i) fk))) (quote ((list? p) (sk ... i) fk))) (quote (if (list? p) (sk ... i) fk))) (quote ()) (quote ((if (list? p) (sk ... i) fk)))) (quote (((p v)) (if (list? p) (sk ... i) fk)))) (quote (let ((p v)) (if (list? p) (sk ... i) fk)))) (cons-source (cons-source (rename$3896$3956 (quote let)) (cons-source (rename$3896$3956 (quote loop)) (cons-source (cons-source (cons-source (rename$3896$3956 (quote ls)) (cons-source v$4030 (quote ()) (quote (v))) (quote (ls v))) (map (lambda (id-ls$4072) (cons-source id-ls$4072 (cons-source (cons-source (rename$3896$3956 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$4068) (quote ((ls v) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$3896$3956 (quote cond)) (cons-source (cons-source (cons-source (rename$3896$3956 (quote null?)) (cons-source (rename$3896$3956 (quote ls)) (quote ()) (quote (ls))) (quote (null? ls))) (cons-source (cons-source (rename$3896$3956 (quote let)) (cons-source (map (lambda (id$4073 id-ls$4074) (cons-source id$4073 (cons-source (cons-source (rename$3896$3956 (quote reverse)) (cons-source id-ls$4074 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$4067 id-ls$4068) (cons-source (append (map (lambda (sk$4075) sk$4075) sk$4047) (cons-source i$4055 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((id (reverse id-ls)) ...) (sk ... i)))) (quote (let ((id (reverse id-ls)) ...) (sk ... i)))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) (sk ... i))))) (quote ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))))) (cons-source (cons-source (cons-source (rename$3896$3956 (quote pair?)) (cons-source (rename$3896$3956 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$3896$3956 (quote let)) (cons-source (cons-source (cons-source (rename$3896$3956 (quote w)) (cons-source (cons-source (rename$3896$3956 (quote car)) (cons-source (rename$3896$3956 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (quote ()) (quote ((car ls)))) (quote (w (car ls)))) (quote ()) (quote ((w (car ls))))) (cons-source (cons-source (rename$3896$3956 (quote match-one)) (cons-source (rename$3896$3956 (quote w)) (cons-source p$4034 (cons-source (cons-source (cons-source (rename$3896$3956 (quote car)) (cons-source (rename$3896$3956 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$3896$3956 (quote set-car!)) (cons-source (rename$3896$3956 (quote ls)) (quote ()) (quote (ls))) (quote (set-car! ls))) (quote ()) (quote ((set-car! ls)))) (quote ((car ls) (set-car! ls)))) (cons-source (cons-source (rename$3896$3956 (quote match-drop-ids)) (cons-source (cons-source (rename$3896$3956 (quote loop)) (cons-source (cons-source (rename$3896$3956 (quote cdr)) (cons-source (rename$3896$3956 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (map (lambda (id$4076 id-ls$4077) (cons-source (rename$3896$3956 (quote cons)) (cons-source id$4076 (cons-source id-ls$4077 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$4067 id-ls$4068) (quote ((cdr ls) (cons id id-ls) ...))) (quote (loop (cdr ls) (cons id id-ls) ...))) (quote ()) (quote ((loop (cdr ls) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)))) (cons-source fk$4051 (cons-source i$4055 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote ()) (quote ((match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i)))) (quote (((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i)))) (quote (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i)))) (quote ()) (quote ((let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))))) (quote ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))))) (cons-source (cons-source (rename$3896$3956 (quote else)) (cons-source fk$4051 (quote ()) (quote (fk))) (quote (else fk))) (quote ()) (quote ((else fk)))) (quote (((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))) (quote (((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))) (quote (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))) (quote ()) (quote ((cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote ()) (quote ((let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote ((let ((p v)) (if (list? p) (sk ... i) fk)) (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote (p (let ((p v)) (if (list? p) (sk ... i) fk)) (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote (match-check-identifier p (let ((p v)) (if (list? p) (sk ... i) fk)) (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) #f) #f)) (cdr v.15$3917$4056))) (reverse id-ls19$3921$4065) (reverse id-ls-ls20$3922$4066)) (if (pair? w.17$3919$4064) ((lambda (v.21$3923$4079) (if (pair? v.21$3923$4079) ((lambda (v.22$3924$4081) ((lambda (id$4082) ((lambda (v.23$3925$4083) (if (pair? v.23$3925$4083) ((lambda (v.24$3926$4085) ((lambda (id-ls$4086) ((lambda (v.25$3927$4087) (if (null? v.25$3927$4087) (lp.18$3920$4063 (cdr w.17$3919$4064) (cons id$4082 id-ls19$3921$4065) (cons id-ls$4086 id-ls-ls20$3922$4066)) #f)) (cdr v.23$3925$4083))) v.24$3926$4085)) (car v.23$3925$4083)) #f)) (cdr v.21$3923$4079))) v.22$3924$4081)) (car v.21$3923$4079)) #f)) (car w.17$3919$4064)) #f)))) (lp.18$3920$4063 w.17$3919$4060 id-ls19$3921$4061 id-ls-ls20$3922$4062)) #f)) v.16$3918$4058 (quote ()) (quote ()))) (car v.15$3917$4056)) #f)) (cdr v.13$3915$4052))) v.14$3916$4054)) (car v.13$3915$4052)) #f)) (cdr v.11$3913$4048))) v.12$3914$4050)) (car v.11$3913$4048)) #f)) (cdr v.9$3911$4043))) v.10$3912$4045) #f)) (car v.9$3911$4043)) #f)) (cdr v.7$3909$4039))) v.8$3910$4041)) (car v.7$3909$4039)) #f)) (cdr v.5$3907$4035)) #f)) (car v.5$3907$4035)) #f)) (cdr v.3$3905$4031))) v.4$3906$4033)) (car v.3$3905$4031)) #f)) (cdr v.1$3903$4027))) v.2$3904$4029)) (car v.1$3903$4027)) #f)) (cdr expr$3895$3955))))) (match-gen-or-step lambda (expr$3715$3756 rename$3716$3757 compare$3717$3758) (car ((lambda (tmp$3760$3762) (if tmp$3760$3762 tmp$3760$3762 ((lambda (tmp$3764$3766) (if tmp$3764$3766 tmp$3764$3766 ((lambda (tmp$3768$3770) (if tmp$3768$3770 tmp$3768$3770 (cons (error "no expansion for" expr$3715$3756) #f))) ((lambda (v.19$3741$3771) (if (pair? v.19$3741$3771) ((lambda (v.20$3742$3773) ((lambda (v$3774) ((lambda (v.21$3743$3775) (if (pair? v.21$3743$3775) ((lambda (v.22$3744$3777) (if (pair? v.22$3744$3777) ((lambda (v.23$3745$3779) ((lambda (p$3780) ((lambda (v.24$3746$3781) ((lambda (q$3782) ((lambda (v.25$3747$3783) (if (pair? v.25$3747$3783) ((lambda (v.26$3748$3785) ((lambda (g+s$3786) ((lambda (v.27$3749$3787) (if (pair? v.27$3749$3787) ((lambda (v.28$3750$3789) ((lambda (sk$3790) ((lambda (v.29$3751$3791) (if (pair? v.29$3751$3791) ((lambda (v.30$3752$3793) ((lambda (fk$3794) ((lambda (v.31$3753$3795) (if (pair? v.31$3753$3795) ((lambda (v.32$3754$3797) ((lambda (i$3798) ((lambda (v.33$3755$3799) (if (null? v.33$3755$3799) (cons (cons-source (rename$3716$3757 (quote let)) (cons-source (cons-source (cons-source (rename$3716$3757 (quote fk2)) (cons-source (cons-source (rename$3716$3757 (quote lambda)) (cons-source (quote ()) (cons-source (cons-source (rename$3716$3757 (quote match-gen-or-step)) (cons-source v$3774 (cons-source q$3782 (cons-source g+s$3786 (cons-source sk$3790 (cons-source fk$3794 (cons-source i$3798 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (q g+s sk fk i))) (quote (v q g+s sk fk i))) (quote (match-gen-or-step v q g+s sk fk i))) (quote ()) (quote ((match-gen-or-step v q g+s sk fk i)))) (quote (() (match-gen-or-step v q g+s sk fk i)))) (quote (lambda () (match-gen-or-step v q g+s sk fk i)))) (quote ()) (quote ((lambda () (match-gen-or-step v q g+s sk fk i))))) (quote (fk2 (lambda () (match-gen-or-step v q g+s sk fk i))))) (quote ()) (quote ((fk2 (lambda () (match-gen-or-step v q g+s sk fk i)))))) (cons-source (cons-source (rename$3716$3757 (quote match-one)) (cons-source v$3774 (cons-source p$3780 (cons-source g+s$3786 (cons-source sk$3790 (cons-source (cons-source (rename$3716$3757 (quote fk2)) (quote ()) (quote (fk2))) (cons-source i$3798 (quote ()) (quote (i))) (quote ((fk2) i))) (quote (sk (fk2) i))) (quote (g+s sk (fk2) i))) (quote (p g+s sk (fk2) i))) (quote (v p g+s sk (fk2) i))) (quote (match-one v p g+s sk (fk2) i))) (quote ()) (quote ((match-one v p g+s sk (fk2) i)))) (quote (((fk2 (lambda () (match-gen-or-step v q g+s sk fk i)))) (match-one v p g+s sk (fk2) i)))) (quote (let ((fk2 (lambda () (match-gen-or-step v q g+s sk fk i)))) (match-one v p g+s sk (fk2) i)))) #f) #f)) (cdr v.31$3753$3795))) v.32$3754$3797)) (car v.31$3753$3795)) #f)) (cdr v.29$3751$3791))) v.30$3752$3793)) (car v.29$3751$3791)) #f)) (cdr v.27$3749$3787))) v.28$3750$3789)) (car v.27$3749$3787)) #f)) (cdr v.25$3747$3783))) v.26$3748$3785)) (car v.25$3747$3783)) #f)) (cdr v.21$3743$3775))) v.24$3746$3781)) (cdr v.22$3744$3777))) v.23$3745$3779)) (car v.22$3744$3777)) #f)) (car v.21$3743$3775)) #f)) (cdr v.19$3741$3771))) v.20$3742$3773)) (car v.19$3741$3771)) #f)) (cdr expr$3715$3756))))) ((lambda (v.12$3734$3801) (if (pair? v.12$3734$3801) ((lambda (v.13$3735$3803) ((lambda (v$3804) ((lambda (v.14$3736$3805) (if (pair? v.14$3736$3805) ((lambda (v.15$3737$3807) (if (pair? v.15$3737$3807) ((lambda (v.16$3738$3809) ((lambda (p$3810) ((lambda (v.17$3739$3811) (if (null? v.17$3739$3811) ((lambda (v.18$3740$3813) ((lambda (x$3814) (cons (cons-source (rename$3716$3757 (quote match-one)) (cons-source v$3804 (cons-source p$3810 x$3814 (quote (p . x))) (quote (v p . x))) (quote (match-one v p . x))) #f)) v.18$3740$3813)) (cdr v.14$3736$3805)) #f)) (cdr v.15$3737$3807))) v.16$3738$3809)) (car v.15$3737$3807)) #f)) (car v.14$3736$3805)) #f)) (cdr v.12$3734$3801))) v.13$3735$3803)) (car v.12$3734$3801)) #f)) (cdr expr$3715$3756))))) ((lambda (v.1$3723$3815) (if (pair? v.1$3723$3815) ((lambda (v.2$3724$3817) ((lambda (v$3818) ((lambda (v.3$3725$3819) (if (pair? v.3$3725$3819) ((lambda (v.4$3726$3821) (if (null? v.4$3726$3821) ((lambda (v.5$3727$3823) (if (pair? v.5$3727$3823) ((lambda (v.6$3728$3825) ((lambda (g+s$3826) ((lambda (v.7$3729$3827) (if (pair? v.7$3729$3827) ((lambda (v.8$3730$3829) ((lambda (sk$3830) ((lambda (v.9$3731$3831) (if (pair? v.9$3731$3831) ((lambda (v.10$3732$3833) ((lambda (fk$3834) ((lambda (v.11$3733$3835) ((lambda (x$3836) (cons fk$3834 #f)) v.11$3733$3835)) (cdr v.9$3731$3831))) v.10$3732$3833)) (car v.9$3731$3831)) #f)) (cdr v.7$3729$3827))) v.8$3730$3829)) (car v.7$3729$3827)) #f)) (cdr v.5$3727$3823))) v.6$3728$3825)) (car v.5$3727$3823)) #f)) (cdr v.3$3725$3819)) #f)) (car v.3$3725$3819)) #f)) (cdr v.1$3723$3815))) v.2$3724$3817)) (car v.1$3723$3815)) #f)) (cdr expr$3715$3756))))) (match-gen-or lambda (expr$3573$3605 rename$3574$3606 compare$3575$3607) (car ((lambda (tmp$3609$3611) (if tmp$3609$3611 tmp$3609$3611 (cons (error "no expansion for" expr$3573$3605) #f))) ((lambda (v.1$3581$3612) (if (pair? v.1$3581$3612) ((lambda (v.2$3582$3614) ((lambda (v$3615) ((lambda (v.3$3583$3616) (if (pair? v.3$3583$3616) ((lambda (v.4$3584$3618) ((lambda (p$3619) ((lambda (v.5$3585$3620) (if (pair? v.5$3585$3620) ((lambda (v.6$3586$3622) ((lambda (g+s$3623) ((lambda (v.7$3587$3624) (if (pair? v.7$3587$3624) ((lambda (v.8$3588$3626) (if (list? v.8$3588$3626) ((lambda (sk$3628) ((lambda (v.9$3589$3629) (if (pair? v.9$3589$3629) ((lambda (v.10$3590$3631) ((lambda (fk$3632) ((lambda (v.11$3591$3633) (if (pair? v.11$3591$3633) ((lambda (v.12$3592$3635) (if (list? v.12$3592$3635) ((lambda (i$3637) ((lambda (v.13$3593$3638) (if (pair? v.13$3593$3638) ((lambda (v.14$3594$3640) ((lambda (w.15$3595$3642 id-ls17$3597$3643 id-ls-ls18$3598$3644) ((lambda (lp.16$3596$3645) (set! lp.16$3596$3645 (lambda (w.15$3595$3646 id-ls17$3597$3647 id-ls-ls18$3598$3648) (if (null? w.15$3595$3646) ((lambda (id$3649 id-ls$3650) ((lambda (v.24$3604$3651) (if (null? v.24$3604$3651) (cons (cons-source (rename$3574$3606 (quote let)) (cons-source (cons-source (cons-source (rename$3574$3606 (quote sk2)) (cons-source (cons-source (rename$3574$3606 (quote lambda)) (cons-source id$3649 (cons-source (append (map (lambda (sk$3653) sk$3653) sk$3628) (cons-source (append (map (lambda (i$3654) i$3654) i$3637) id$3649) (quote ()) (quote ((i ... id ...))))) (quote ()) (quote ((sk ... (i ... id ...))))) (quote ((id ...) (sk ... (i ... id ...))))) (quote (lambda (id ...) (sk ... (i ... id ...))))) (quote ()) (quote ((lambda (id ...) (sk ... (i ... id ...)))))) (quote (sk2 (lambda (id ...) (sk ... (i ... id ...)))))) (map (lambda (id$3655) (cons-source id$3655 (cons-source (cons-source (rename$3574$3606 (quote if)) (cons-source #f (cons-source #f (quote ()) (quote (#f))) (quote (#f #f))) (quote (if #f #f))) (quote ()) (quote ((if #f #f)))) (quote (id (if #f #f))))) id$3649) (quote ((sk2 (lambda (id ...) (sk ... (i ... id ...)))) (id (if #f #f)) ...))) (cons-source (cons-source (rename$3574$3606 (quote match-gen-or-step)) (cons-source v$3615 (cons-source p$3619 (cons-source g+s$3623 (cons-source (cons-source (rename$3574$3606 (quote match-drop-ids)) (cons-source (cons-source (rename$3574$3606 (quote sk2)) id$3649 (quote (sk2 id ...))) (quote ()) (quote ((sk2 id ...)))) (quote (match-drop-ids (sk2 id ...)))) (cons-source fk$3632 (cons-source i$3637 (quote ()) (quote ((i ...)))) (quote (fk (i ...)))) (quote ((match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (p g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (v p g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote ()) (quote ((match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...))))) (quote (((sk2 (lambda (id ...) (sk ... (i ... id ...)))) (id (if #f #f)) ...) (match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...))))) (quote (let ((sk2 (lambda (id ...) (sk ... (i ... id ...)))) (id (if #f #f)) ...) (match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...))))) #f) #f)) (cdr v.13$3593$3638))) (reverse id-ls17$3597$3647) (reverse id-ls-ls18$3598$3648)) (if (pair? w.15$3595$3646) ((lambda (v.19$3599$3657) (if (pair? v.19$3599$3657) ((lambda (v.20$3600$3659) ((lambda (id$3660) ((lambda (v.21$3601$3661) (if (pair? v.21$3601$3661) ((lambda (v.22$3602$3663) ((lambda (id-ls$3664) ((lambda (v.23$3603$3665) (if (null? v.23$3603$3665) (lp.16$3596$3645 (cdr w.15$3595$3646) (cons id$3660 id-ls17$3597$3647) (cons id-ls$3664 id-ls-ls18$3598$3648)) #f)) (cdr v.21$3601$3661))) v.22$3602$3663)) (car v.21$3601$3661)) #f)) (cdr v.19$3599$3657))) v.20$3600$3659)) (car v.19$3599$3657)) #f)) (car w.15$3595$3646)) #f)))) (lp.16$3596$3645 w.15$3595$3642 id-ls17$3597$3643 id-ls-ls18$3598$3644)) #f)) v.14$3594$3640 (quote ()) (quote ()))) (car v.13$3593$3638)) #f)) (cdr v.11$3591$3633))) v.12$3592$3635) #f)) (car v.11$3591$3633)) #f)) (cdr v.9$3589$3629))) v.10$3590$3631)) (car v.9$3589$3629)) #f)) (cdr v.7$3587$3624))) v.8$3588$3626) #f)) (car v.7$3587$3624)) #f)) (cdr v.5$3585$3620))) v.6$3586$3622)) (car v.5$3585$3620)) #f)) (cdr v.3$3583$3616))) v.4$3584$3618)) (car v.3$3583$3616)) #f)) (cdr v.1$3581$3612))) v.2$3582$3614)) (car v.1$3581$3612)) #f)) (cdr expr$3573$3605))))) (match-drop-first-arg lambda (expr$3528$3541 rename$3529$3542 compare$3530$3543) (car ((lambda (tmp$3545$3547) (if tmp$3545$3547 tmp$3545$3547 (cons (error "no expansion for" expr$3528$3541) #f))) ((lambda (v.1$3536$3548) (if (pair? v.1$3536$3548) ((lambda (v.2$3537$3550) ((lambda (arg$3551) ((lambda (v.3$3538$3552) (if (pair? v.3$3538$3552) ((lambda (v.4$3539$3554) ((lambda (expr$3555) ((lambda (v.5$3540$3556) (if (null? v.5$3540$3556) (cons expr$3555 #f) #f)) (cdr v.3$3538$3552))) v.4$3539$3554)) (car v.3$3538$3552)) #f)) (cdr v.1$3536$3548))) v.2$3537$3550)) (car v.1$3536$3548)) #f)) (cdr expr$3528$3541))))) (match-tuck-ids lambda (expr$3461$3478 rename$3462$3479 compare$3463$3480) (car ((lambda (tmp$3482$3484) (if tmp$3482$3484 tmp$3482$3484 (cons (error "no expansion for" expr$3461$3478) #f))) ((lambda (v.1$3469$3485) (if (pair? v.1$3469$3485) ((lambda (v.2$3470$3487) (if (pair? v.2$3470$3487) ((lambda (v.3$3471$3489) ((lambda (letish$3490) ((lambda (v.4$3472$3491) (if (pair? v.4$3472$3491) ((lambda (v.5$3473$3493) ((lambda (args$3494) ((lambda (v.6$3474$3495) (if (pair? v.6$3474$3495) ((lambda (v.7$3475$3497) (if (list? v.7$3475$3497) ((lambda (expr$3499) ((lambda (v.8$3476$3500) (if (null? v.8$3476$3500) ((lambda (v.9$3477$3502) (if (list? v.9$3477$3502) ((lambda (ids$3504) (cons (cons-source letish$3490 (cons-source args$3494 (cons-source (append (map (lambda (expr$3505) expr$3505) expr$3499) ids$3504) (quote ()) (quote ((expr ... ids ...)))) (quote (args (expr ... ids ...)))) (quote (letish args (expr ... ids ...)))) #f)) v.9$3477$3502) #f)) (cdr v.1$3469$3485)) #f)) (cdr v.6$3474$3495))) v.7$3475$3497) #f)) (car v.6$3474$3495)) #f)) (cdr v.4$3472$3491))) v.5$3473$3493)) (car v.4$3472$3491)) #f)) (cdr v.2$3470$3487))) v.3$3471$3489)) (car v.2$3470$3487)) #f)) (car v.1$3469$3485)) #f)) (cdr expr$3461$3478))))) (match-drop-ids lambda (expr$3423$3434 rename$3424$3435 compare$3425$3436) (car ((lambda (tmp$3438$3440) (if tmp$3438$3440 tmp$3438$3440 (cons (error "no expansion for" expr$3423$3434) #f))) ((lambda (v.1$3431$3441) (if (pair? v.1$3431$3441) ((lambda (v.2$3432$3443) ((lambda (expr$3444) ((lambda (v.3$3433$3445) (if (list? v.3$3433$3445) ((lambda (ids$3447) (cons expr$3444 #f)) v.3$3433$3445) #f)) (cdr v.1$3431$3441))) v.2$3432$3443)) (car v.1$3431$3441)) #f)) (cdr expr$3423$3434))))) (match-quasiquote-step lambda (expr$3333$3356 rename$3334$3357 compare$3335$3358) (car ((lambda (tmp$3360$3362) (if tmp$3360$3362 tmp$3360$3362 (cons (error "no expansion for" expr$3333$3356) #f))) ((lambda (v.1$3341$3363) (if (pair? v.1$3341$3363) ((lambda (v.2$3342$3365) ((lambda (x$3366) ((lambda (v.3$3343$3367) (if (pair? v.3$3343$3367) ((lambda (v.4$3344$3369) ((lambda (q$3370) ((lambda (v.5$3345$3371) (if (pair? v.5$3345$3371) ((lambda (v.6$3346$3373) ((lambda (g+s$3374) ((lambda (v.7$3347$3375) (if (pair? v.7$3347$3375) ((lambda (v.8$3348$3377) ((lambda (sk$3378) ((lambda (v.9$3349$3379) (if (pair? v.9$3349$3379) ((lambda (v.10$3350$3381) ((lambda (fk$3382) ((lambda (v.11$3351$3383) (if (pair? v.11$3351$3383) ((lambda (v.12$3352$3385) ((lambda (depth$3386) ((lambda (v.13$3353$3387) (if (pair? v.13$3353$3387) ((lambda (v.14$3354$3389) ((lambda (i$3390) ((lambda (v.15$3355$3391) (if (null? v.15$3355$3391) (cons (cons-source (rename$3334$3357 (quote match-quasiquote)) (cons-source x$3366 (cons-source q$3370 (cons-source g+s$3374 (cons-source sk$3378 (cons-source fk$3382 (cons-source i$3390 depth$3386 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote (q g+s sk fk i . depth))) (quote (x q g+s sk fk i . depth))) (quote (match-quasiquote x q g+s sk fk i . depth))) #f) #f)) (cdr v.13$3353$3387))) v.14$3354$3389)) (car v.13$3353$3387)) #f)) (cdr v.11$3351$3383))) v.12$3352$3385)) (car v.11$3351$3383)) #f)) (cdr v.9$3349$3379))) v.10$3350$3381)) (car v.9$3349$3379)) #f)) (cdr v.7$3347$3375))) v.8$3348$3377)) (car v.7$3347$3375)) #f)) (cdr v.5$3345$3371))) v.6$3346$3373)) (car v.5$3345$3371)) #f)) (cdr v.3$3343$3367))) v.4$3344$3369)) (car v.3$3343$3367)) #f)) (cdr v.1$3341$3363))) v.2$3342$3365)) (car v.1$3341$3363)) #f)) (cdr expr$3333$3356))))) (match-quasiquote lambda (expr$2684$2825 rename$2685$2826 compare$2686$2827) (car ((lambda (tmp$2829$2831) (if tmp$2829$2831 tmp$2829$2831 ((lambda (tmp$2833$2835) (if tmp$2833$2835 tmp$2833$2835 ((lambda (tmp$2837$2839) (if tmp$2837$2839 tmp$2837$2839 ((lambda (tmp$2841$2843) (if tmp$2841$2843 tmp$2841$2843 ((lambda (tmp$2845$2847) (if tmp$2845$2847 tmp$2845$2847 ((lambda (tmp$2849$2851) (if tmp$2849$2851 tmp$2849$2851 ((lambda (tmp$2853$2855) (if tmp$2853$2855 tmp$2853$2855 ((lambda (tmp$2857$2859) (if tmp$2857$2859 tmp$2857$2859 (cons (error "no expansion for" expr$2684$2825) #f))) ((lambda (v.121$2812$2860) (if (pair? v.121$2812$2860) ((lambda (v.122$2813$2862) ((lambda (v$2863) ((lambda (v.123$2814$2864) (if (pair? v.123$2814$2864) ((lambda (v.124$2815$2866) ((lambda (x$2867) ((lambda (v.125$2816$2868) (if (pair? v.125$2816$2868) ((lambda (v.126$2817$2870) ((lambda (g+s$2871) ((lambda (v.127$2818$2872) (if (pair? v.127$2818$2872) ((lambda (v.128$2819$2874) ((lambda (sk$2875) ((lambda (v.129$2820$2876) (if (pair? v.129$2820$2876) ((lambda (v.130$2821$2878) ((lambda (fk$2879) ((lambda (v.131$2822$2880) (if (pair? v.131$2822$2880) ((lambda (v.132$2823$2882) ((lambda (i$2883) ((lambda (v.133$2824$2884) ((lambda (depth$2885) (cons (cons-source (rename$2685$2826 (quote match-one)) (cons-source v$2863 (cons-source (cons-source (rename$2685$2826 (quote quote)) (cons-source x$2867 (quote ()) (quote (x))) (quote (quote x))) (cons-source g+s$2871 (cons-source sk$2875 (cons-source fk$2879 (cons-source i$2883 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((quote x) g+s sk fk i))) (quote (v (quote x) g+s sk fk i))) (quote (match-one v (quote x) g+s sk fk i))) #f)) v.133$2824$2884)) (cdr v.131$2822$2880))) v.132$2823$2882)) (car v.131$2822$2880)) #f)) (cdr v.129$2820$2876))) v.130$2821$2878)) (car v.129$2820$2876)) #f)) (cdr v.127$2818$2872))) v.128$2819$2874)) (car v.127$2818$2872)) #f)) (cdr v.125$2816$2868))) v.126$2817$2870)) (car v.125$2816$2868)) #f)) (cdr v.123$2814$2864))) v.124$2815$2866)) (car v.123$2814$2864)) #f)) (cdr v.121$2812$2860))) v.122$2813$2862)) (car v.121$2812$2860)) #f)) (cdr expr$2684$2825))))) ((lambda (v.107$2798$2886) (if (pair? v.107$2798$2886) ((lambda (v.108$2799$2888) ((lambda (v$2889) ((lambda (v.109$2800$2890) (if (pair? v.109$2800$2890) ((lambda (v.110$2801$2892) (if (vector? v.110$2801$2892) ((lambda (v.111$2802$2894) (if (list? v.111$2802$2894) ((lambda (elt$2896) ((lambda (v.112$2803$2897) (if (pair? v.112$2803$2897) ((lambda (v.113$2804$2899) ((lambda (g+s$2900) ((lambda (v.114$2805$2901) (if (pair? v.114$2805$2901) ((lambda (v.115$2806$2903) ((lambda (sk$2904) ((lambda (v.116$2807$2905) (if (pair? v.116$2807$2905) ((lambda (v.117$2808$2907) ((lambda (fk$2908) ((lambda (v.118$2809$2909) (if (pair? v.118$2809$2909) ((lambda (v.119$2810$2911) ((lambda (i$2912) ((lambda (v.120$2811$2913) ((lambda (depth$2914) (cons (cons-source (rename$2685$2826 (quote if)) (cons-source (cons-source (rename$2685$2826 (quote vector?)) (cons-source v$2889 (quote ()) (quote (v))) (quote (vector? v))) (cons-source (cons-source (rename$2685$2826 (quote let)) (cons-source (cons-source (cons-source (rename$2685$2826 (quote ls)) (cons-source (cons-source (rename$2685$2826 (quote vector->list)) (cons-source v$2889 (quote ()) (quote (v))) (quote (vector->list v))) (quote ()) (quote ((vector->list v)))) (quote (ls (vector->list v)))) (quote ()) (quote ((ls (vector->list v))))) (cons-source (cons-source (rename$2685$2826 (quote match-quasiquote)) (cons-source (rename$2685$2826 (quote ls)) (cons-source elt$2896 (cons-source g+s$2900 (cons-source sk$2904 (cons-source fk$2908 (cons-source i$2912 depth$2914 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote ((elt ...) g+s sk fk i . depth))) (quote (ls (elt ...) g+s sk fk i . depth))) (quote (match-quasiquote ls (elt ...) g+s sk fk i . depth))) (quote ()) (quote ((match-quasiquote ls (elt ...) g+s sk fk i . depth)))) (quote (((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)))) (quote (let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)))) (cons-source fk$2908 (quote ()) (quote (fk))) (quote ((let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)) fk))) (quote ((vector? v) (let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)) fk))) (quote (if (vector? v) (let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)) fk))) #f)) v.120$2811$2913)) (cdr v.118$2809$2909))) v.119$2810$2911)) (car v.118$2809$2909)) #f)) (cdr v.116$2807$2905))) v.117$2808$2907)) (car v.116$2807$2905)) #f)) (cdr v.114$2805$2901))) v.115$2806$2903)) (car v.114$2805$2901)) #f)) (cdr v.112$2803$2897))) v.113$2804$2899)) (car v.112$2803$2897)) #f)) (cdr v.109$2800$2890))) v.111$2802$2894) #f)) (vector->list v.110$2801$2892)) #f)) (car v.109$2800$2890)) #f)) (cdr v.107$2798$2886))) v.108$2799$2888)) (car v.107$2798$2886)) #f)) (cdr expr$2684$2825))))) ((lambda (v.92$2783$2915) (if (pair? v.92$2783$2915) ((lambda (v.93$2784$2917) ((lambda (v$2918) ((lambda (v.94$2785$2919) (if (pair? v.94$2785$2919) ((lambda (v.95$2786$2921) (if (pair? v.95$2786$2921) ((lambda (v.96$2787$2923) ((lambda (p$2924) ((lambda (v.97$2788$2925) ((lambda (q$2926) ((lambda (v.98$2789$2927) (if (pair? v.98$2789$2927) ((lambda (v.99$2790$2929) ((lambda (g+s$2930) ((lambda (v.100$2791$2931) (if (pair? v.100$2791$2931) ((lambda (v.101$2792$2933) ((lambda (sk$2934) ((lambda (v.102$2793$2935) (if (pair? v.102$2793$2935) ((lambda (v.103$2794$2937) ((lambda (fk$2938) ((lambda (v.104$2795$2939) (if (pair? v.104$2795$2939) ((lambda (v.105$2796$2941) ((lambda (i$2942) ((lambda (v.106$2797$2943) ((lambda (depth$2944) (cons (cons-source (rename$2685$2826 (quote if)) (cons-source (cons-source (rename$2685$2826 (quote pair?)) (cons-source v$2918 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$2685$2826 (quote let)) (cons-source (cons-source (cons-source (rename$2685$2826 (quote w)) (cons-source (cons-source (rename$2685$2826 (quote car)) (cons-source v$2918 (quote ()) (quote (v))) (quote (car v))) (quote ()) (quote ((car v)))) (quote (w (car v)))) (cons-source (cons-source (rename$2685$2826 (quote x)) (cons-source (cons-source (rename$2685$2826 (quote cdr)) (cons-source v$2918 (quote ()) (quote (v))) (quote (cdr v))) (quote ()) (quote ((cdr v)))) (quote (x (cdr v)))) (quote ()) (quote ((x (cdr v))))) (quote ((w (car v)) (x (cdr v))))) (cons-source (cons-source (rename$2685$2826 (quote match-quasiquote)) (cons-source (rename$2685$2826 (quote w)) (cons-source p$2924 (cons-source g+s$2930 (cons-source (cons-source (rename$2685$2826 (quote match-quasiquote-step)) (cons-source (rename$2685$2826 (quote x)) (cons-source q$2926 (cons-source g+s$2930 (cons-source sk$2934 (cons-source fk$2938 (cons-source depth$2944 (quote ()) (quote (depth))) (quote (fk depth))) (quote (sk fk depth))) (quote (g+s sk fk depth))) (quote (q g+s sk fk depth))) (quote (x q g+s sk fk depth))) (quote (match-quasiquote-step x q g+s sk fk depth))) (cons-source fk$2938 (cons-source i$2942 depth$2944 (quote (i . depth))) (quote (fk i . depth))) (quote ((match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote ()) (quote ((match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)))) (quote (((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)))) (quote (let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)))) (cons-source fk$2938 (quote ()) (quote (fk))) (quote ((let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)) fk))) (quote ((pair? v) (let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)) fk))) (quote (if (pair? v) (let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)) fk))) #f)) v.106$2797$2943)) (cdr v.104$2795$2939))) v.105$2796$2941)) (car v.104$2795$2939)) #f)) (cdr v.102$2793$2935))) v.103$2794$2937)) (car v.102$2793$2935)) #f)) (cdr v.100$2791$2931))) v.101$2792$2933)) (car v.100$2791$2931)) #f)) (cdr v.98$2789$2927))) v.99$2790$2929)) (car v.98$2789$2927)) #f)) (cdr v.94$2785$2919))) v.97$2788$2925)) (cdr v.95$2786$2921))) v.96$2787$2923)) (car v.95$2786$2921)) #f)) (car v.94$2785$2919)) #f)) (cdr v.92$2783$2915))) v.93$2784$2917)) (car v.92$2783$2915)) #f)) (cdr expr$2684$2825))))) ((lambda (v.73$2764$2945) (if (pair? v.73$2764$2945) ((lambda (v.74$2765$2947) ((lambda (v$2948) ((lambda (v.75$2766$2949) (if (pair? v.75$2766$2949) ((lambda (v.76$2767$2951) (if (pair? v.76$2767$2951) ((lambda (v.77$2768$2953) (if (compare$2686$2827 v.77$2768$2953 (rename$2685$2826 (quote unquote-splicing))) ((lambda (v.78$2769$2955) (if (pair? v.78$2769$2955) ((lambda (v.79$2770$2957) ((lambda (p$2958) ((lambda (v.80$2771$2959) (if (null? v.80$2771$2959) ((lambda (v.81$2772$2961) (if (pair? v.81$2772$2961) ((lambda (v.82$2773$2963) ((lambda (g+s$2964) ((lambda (v.83$2774$2965) (if (pair? v.83$2774$2965) ((lambda (v.84$2775$2967) ((lambda (sk$2968) ((lambda (v.85$2776$2969) (if (pair? v.85$2776$2969) ((lambda (v.86$2777$2971) ((lambda (fk$2972) ((lambda (v.87$2778$2973) (if (pair? v.87$2778$2973) ((lambda (v.88$2779$2975) ((lambda (i$2976) ((lambda (v.89$2780$2977) (if (pair? v.89$2780$2977) ((lambda (v.90$2781$2979) ((lambda (x$2980) ((lambda (v.91$2782$2981) ((lambda (depth$2982) (cons (cons-source (rename$2685$2826 (quote match-quasiquote)) (cons-source v$2948 (cons-source p$2958 (cons-source g+s$2964 (cons-source sk$2968 (cons-source fk$2972 (cons-source i$2976 depth$2982 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote (p g+s sk fk i . depth))) (quote (v p g+s sk fk i . depth))) (quote (match-quasiquote v p g+s sk fk i . depth))) #f)) v.91$2782$2981)) (cdr v.89$2780$2977))) v.90$2781$2979)) (car v.89$2780$2977)) #f)) (cdr v.87$2778$2973))) v.88$2779$2975)) (car v.87$2778$2973)) #f)) (cdr v.85$2776$2969))) v.86$2777$2971)) (car v.85$2776$2969)) #f)) (cdr v.83$2774$2965))) v.84$2775$2967)) (car v.83$2774$2965)) #f)) (cdr v.81$2772$2961))) v.82$2773$2963)) (car v.81$2772$2961)) #f)) (cdr v.75$2766$2949)) #f)) (cdr v.78$2769$2955))) v.79$2770$2957)) (car v.78$2769$2955)) #f)) (cdr v.76$2767$2951)) #f)) (car v.76$2767$2951)) #f)) (car v.75$2766$2949)) #f)) (cdr v.73$2764$2945))) v.74$2765$2947)) (car v.73$2764$2945)) #f)) (cdr expr$2684$2825))))) ((lambda (v.54$2745$2983) (if (pair? v.54$2745$2983) ((lambda (v.55$2746$2985) ((lambda (v$2986) ((lambda (v.56$2747$2987) (if (pair? v.56$2747$2987) ((lambda (v.57$2748$2989) (if (pair? v.57$2748$2989) ((lambda (v.58$2749$2991) (if (compare$2686$2827 v.58$2749$2991 (rename$2685$2826 (quote unquote))) ((lambda (v.59$2750$2993) (if (pair? v.59$2750$2993) ((lambda (v.60$2751$2995) ((lambda (p$2996) ((lambda (v.61$2752$2997) (if (null? v.61$2752$2997) ((lambda (v.62$2753$2999) (if (pair? v.62$2753$2999) ((lambda (v.63$2754$3001) ((lambda (g+s$3002) ((lambda (v.64$2755$3003) (if (pair? v.64$2755$3003) ((lambda (v.65$2756$3005) ((lambda (sk$3006) ((lambda (v.66$2757$3007) (if (pair? v.66$2757$3007) ((lambda (v.67$2758$3009) ((lambda (fk$3010) ((lambda (v.68$2759$3011) (if (pair? v.68$2759$3011) ((lambda (v.69$2760$3013) ((lambda (i$3014) ((lambda (v.70$2761$3015) (if (pair? v.70$2761$3015) ((lambda (v.71$2762$3017) ((lambda (x$3018) ((lambda (v.72$2763$3019) ((lambda (depth$3020) (cons (cons-source (rename$2685$2826 (quote match-quasiquote)) (cons-source v$2986 (cons-source p$2996 (cons-source g+s$3002 (cons-source sk$3006 (cons-source fk$3010 (cons-source i$3014 depth$3020 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote (p g+s sk fk i . depth))) (quote (v p g+s sk fk i . depth))) (quote (match-quasiquote v p g+s sk fk i . depth))) #f)) v.72$2763$3019)) (cdr v.70$2761$3015))) v.71$2762$3017)) (car v.70$2761$3015)) #f)) (cdr v.68$2759$3011))) v.69$2760$3013)) (car v.68$2759$3011)) #f)) (cdr v.66$2757$3007))) v.67$2758$3009)) (car v.66$2757$3007)) #f)) (cdr v.64$2755$3003))) v.65$2756$3005)) (car v.64$2755$3003)) #f)) (cdr v.62$2753$2999))) v.63$2754$3001)) (car v.62$2753$2999)) #f)) (cdr v.56$2747$2987)) #f)) (cdr v.59$2750$2993))) v.60$2751$2995)) (car v.59$2750$2993)) #f)) (cdr v.57$2748$2989)) #f)) (car v.57$2748$2989)) #f)) (car v.56$2747$2987)) #f)) (cdr v.54$2745$2983))) v.55$2746$2985)) (car v.54$2745$2983)) #f)) (cdr expr$2684$2825))))) ((lambda (v.37$2728$3021) (if (pair? v.37$2728$3021) ((lambda (v.38$2729$3023) ((lambda (v$3024) ((lambda (v.39$2730$3025) (if (pair? v.39$2730$3025) ((lambda (v.40$2731$3027) (if (pair? v.40$2731$3027) ((lambda (v.41$2732$3029) (if (compare$2686$2827 v.41$2732$3029 (rename$2685$2826 (quote quasiquote))) ((lambda (v.42$2733$3031) (if (pair? v.42$2733$3031) ((lambda (v.43$2734$3033) ((lambda (p$3034) ((lambda (v.44$2735$3035) (if (null? v.44$2735$3035) ((lambda (v.45$2736$3037) (if (pair? v.45$2736$3037) ((lambda (v.46$2737$3039) ((lambda (g+s$3040) ((lambda (v.47$2738$3041) (if (pair? v.47$2738$3041) ((lambda (v.48$2739$3043) ((lambda (sk$3044) ((lambda (v.49$2740$3045) (if (pair? v.49$2740$3045) ((lambda (v.50$2741$3047) ((lambda (fk$3048) ((lambda (v.51$2742$3049) (if (pair? v.51$2742$3049) ((lambda (v.52$2743$3051) ((lambda (i$3052) ((lambda (v.53$2744$3053) ((lambda (depth$3054) (cons (cons-source (rename$2685$2826 (quote match-quasiquote)) (cons-source v$3024 (cons-source p$3034 (cons-source g+s$3040 (cons-source sk$3044 (cons-source fk$3048 (cons-source i$3052 (cons-source #f depth$3054 (quote (#f . depth))) (quote (i #f . depth))) (quote (fk i #f . depth))) (quote (sk fk i #f . depth))) (quote (g+s sk fk i #f . depth))) (quote (p g+s sk fk i #f . depth))) (quote (v p g+s sk fk i #f . depth))) (quote (match-quasiquote v p g+s sk fk i #f . depth))) #f)) v.53$2744$3053)) (cdr v.51$2742$3049))) v.52$2743$3051)) (car v.51$2742$3049)) #f)) (cdr v.49$2740$3045))) v.50$2741$3047)) (car v.49$2740$3045)) #f)) (cdr v.47$2738$3041))) v.48$2739$3043)) (car v.47$2738$3041)) #f)) (cdr v.45$2736$3037))) v.46$2737$3039)) (car v.45$2736$3037)) #f)) (cdr v.39$2730$3025)) #f)) (cdr v.42$2733$3031))) v.43$2734$3033)) (car v.42$2733$3031)) #f)) (cdr v.40$2731$3027)) #f)) (car v.40$2731$3027)) #f)) (car v.39$2730$3025)) #f)) (cdr v.37$2728$3021))) v.38$2729$3023)) (car v.37$2728$3021)) #f)) (cdr expr$2684$2825))))) ((lambda (v.18$2709$3055) (if (pair? v.18$2709$3055) ((lambda (v.19$2710$3057) ((lambda (v$3058) ((lambda (v.20$2711$3059) (if (pair? v.20$2711$3059) ((lambda (v.21$2712$3061) (if (pair? v.21$2712$3061) ((lambda (v.22$2713$3063) (if (pair? v.22$2713$3063) ((lambda (v.23$2714$3065) (if (compare$2686$2827 v.23$2714$3065 (rename$2685$2826 (quote unquote-splicing))) ((lambda (v.24$2715$3067) (if (pair? v.24$2715$3067) ((lambda (v.25$2716$3069) ((lambda (p$3070) ((lambda (v.26$2717$3071) (if (null? v.26$2717$3071) ((lambda (v.27$2718$3073) ((lambda (rest$3074) ((lambda (v.28$2719$3075) (if (pair? v.28$2719$3075) ((lambda (v.29$2720$3077) ((lambda (g+s$3078) ((lambda (v.30$2721$3079) (if (pair? v.30$2721$3079) ((lambda (v.31$2722$3081) ((lambda (sk$3082) ((lambda (v.32$2723$3083) (if (pair? v.32$2723$3083) ((lambda (v.33$2724$3085) ((lambda (fk$3086) ((lambda (v.34$2725$3087) (if (pair? v.34$2725$3087) ((lambda (v.35$2726$3089) ((lambda (i$3090) ((lambda (v.36$2727$3091) (if (null? v.36$2727$3091) (cons (cons-source (rename$2685$2826 (quote match-extract-underscore)) (cons-source p$3070 (cons-source (cons-source (rename$2685$2826 (quote match-gen-ellipsis/qq)) (cons-source v$3058 (cons-source p$3070 (cons-source rest$3074 (cons-source g+s$3078 (cons-source sk$3082 (cons-source fk$3086 (cons-source i$3090 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (rest g+s sk fk i))) (quote (p rest g+s sk fk i))) (quote (v p rest g+s sk fk i))) (quote (match-gen-ellipsis/qq v p rest g+s sk fk i))) (cons-source i$3090 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-ellipsis/qq v p rest g+s sk fk i) i ()))) (quote (p (match-gen-ellipsis/qq v p rest g+s sk fk i) i ()))) (quote (match-extract-underscore p (match-gen-ellipsis/qq v p rest g+s sk fk i) i ()))) #f) #f)) (cdr v.34$2725$3087))) v.35$2726$3089)) (car v.34$2725$3087)) #f)) (cdr v.32$2723$3083))) v.33$2724$3085)) (car v.32$2723$3083)) #f)) (cdr v.30$2721$3079))) v.31$2722$3081)) (car v.30$2721$3079)) #f)) (cdr v.28$2719$3075))) v.29$2720$3077)) (car v.28$2719$3075)) #f)) (cdr v.20$2711$3059))) v.27$2718$3073)) (cdr v.21$2712$3061)) #f)) (cdr v.24$2715$3067))) v.25$2716$3069)) (car v.24$2715$3067)) #f)) (cdr v.22$2713$3063)) #f)) (car v.22$2713$3063)) #f)) (car v.21$2712$3061)) #f)) (car v.20$2711$3059)) #f)) (cdr v.18$2709$3055))) v.19$2710$3057)) (car v.18$2709$3055)) #f)) (cdr expr$2684$2825))))) ((lambda (v.1$2692$3093) (if (pair? v.1$2692$3093) ((lambda (v.2$2693$3095) ((lambda (v$3096) ((lambda (v.3$2694$3097) (if (pair? v.3$2694$3097) ((lambda (v.4$2695$3099) (if (pair? v.4$2695$3099) ((lambda (v.5$2696$3101) (if (compare$2686$2827 v.5$2696$3101 (rename$2685$2826 (quote unquote))) ((lambda (v.6$2697$3103) (if (pair? v.6$2697$3103) ((lambda (v.7$2698$3105) ((lambda (p$3106) ((lambda (v.8$2699$3107) (if (null? v.8$2699$3107) ((lambda (v.9$2700$3109) (if (pair? v.9$2700$3109) ((lambda (v.10$2701$3111) ((lambda (g+s$3112) ((lambda (v.11$2702$3113) (if (pair? v.11$2702$3113) ((lambda (v.12$2703$3115) ((lambda (sk$3116) ((lambda (v.13$2704$3117) (if (pair? v.13$2704$3117) ((lambda (v.14$2705$3119) ((lambda (fk$3120) ((lambda (v.15$2706$3121) (if (pair? v.15$2706$3121) ((lambda (v.16$2707$3123) ((lambda (i$3124) ((lambda (v.17$2708$3125) (if (null? v.17$2708$3125) (cons (cons-source (rename$2685$2826 (quote match-one)) (cons-source v$3096 (cons-source p$3106 (cons-source g+s$3112 (cons-source sk$3116 (cons-source fk$3120 (cons-source i$3124 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (p g+s sk fk i))) (quote (v p g+s sk fk i))) (quote (match-one v p g+s sk fk i))) #f) #f)) (cdr v.15$2706$3121))) v.16$2707$3123)) (car v.15$2706$3121)) #f)) (cdr v.13$2704$3117))) v.14$2705$3119)) (car v.13$2704$3117)) #f)) (cdr v.11$2702$3113))) v.12$2703$3115)) (car v.11$2702$3113)) #f)) (cdr v.9$2700$3109))) v.10$2701$3111)) (car v.9$2700$3109)) #f)) (cdr v.3$2694$3097)) #f)) (cdr v.6$2697$3103))) v.7$2698$3105)) (car v.6$2697$3103)) #f)) (cdr v.4$2695$3099)) #f)) (car v.4$2695$3099)) #f)) (car v.3$2694$3097)) #f)) (cdr v.1$2692$3093))) v.2$2693$3095)) (car v.1$2692$3093)) #f)) (cdr expr$2684$2825))))) (match-two lambda (expr$704$1121 rename$705$1122 compare$706$1123) (car ((lambda (tmp$1125$1127) (if tmp$1125$1127 tmp$1125$1127 ((lambda (tmp$1129$1131) (if tmp$1129$1131 tmp$1129$1131 ((lambda (tmp$1133$1135) (if tmp$1133$1135 tmp$1133$1135 ((lambda (tmp$1137$1139) (if tmp$1137$1139 tmp$1137$1139 ((lambda (tmp$1141$1143) (if tmp$1141$1143 tmp$1141$1143 ((lambda (tmp$1145$1147) (if tmp$1145$1147 tmp$1145$1147 ((lambda (tmp$1149$1151) (if tmp$1149$1151 tmp$1149$1151 ((lambda (tmp$1153$1155) (if tmp$1153$1155 tmp$1153$1155 ((lambda (tmp$1157$1159) (if tmp$1157$1159 tmp$1157$1159 ((lambda (tmp$1161$1163) (if tmp$1161$1163 tmp$1161$1163 ((lambda (tmp$1165$1167) (if tmp$1165$1167 tmp$1165$1167 ((lambda (tmp$1169$1171) (if tmp$1169$1171 tmp$1169$1171 ((lambda (tmp$1173$1175) (if tmp$1173$1175 tmp$1173$1175 ((lambda (tmp$1177$1179) (if tmp$1177$1179 tmp$1177$1179 ((lambda (tmp$1181$1183) (if tmp$1181$1183 tmp$1181$1183 ((lambda (tmp$1185$1187) (if tmp$1185$1187 tmp$1185$1187 ((lambda (tmp$1189$1191) (if tmp$1189$1191 tmp$1189$1191 ((lambda (tmp$1193$1195) (if tmp$1193$1195 tmp$1193$1195 ((lambda (tmp$1197$1199) (if tmp$1197$1199 tmp$1197$1199 ((lambda (tmp$1201$1203) (if tmp$1201$1203 tmp$1201$1203 ((lambda (tmp$1205$1207) (if tmp$1205$1207 tmp$1205$1207 ((lambda (tmp$1209$1211) (if tmp$1209$1211 tmp$1209$1211 ((lambda (tmp$1213$1215) (if tmp$1213$1215 tmp$1213$1215 ((lambda (tmp$1217$1219) (if tmp$1217$1219 tmp$1217$1219 ((lambda (tmp$1221$1223) (if tmp$1221$1223 tmp$1221$1223 ((lambda (tmp$1225$1227) (if tmp$1225$1227 tmp$1225$1227 (cons (error "no expansion for" expr$704$1121) #f))) ((lambda (v.397$1108$1228) (if (pair? v.397$1108$1228) ((lambda (v.398$1109$1230) ((lambda (v$1231) ((lambda (v.399$1110$1232) (if (pair? v.399$1110$1232) ((lambda (v.400$1111$1234) ((lambda (x$1235) ((lambda (v.401$1112$1236) (if (pair? v.401$1112$1236) ((lambda (v.402$1113$1238) ((lambda (g+s$1239) ((lambda (v.403$1114$1240) (if (pair? v.403$1114$1240) ((lambda (v.404$1115$1242) (if (list? v.404$1115$1242) ((lambda (sk$1244) ((lambda (v.405$1116$1245) (if (pair? v.405$1116$1245) ((lambda (v.406$1117$1247) ((lambda (fk$1248) ((lambda (v.407$1118$1249) (if (pair? v.407$1118$1249) ((lambda (v.408$1119$1251) (if (list? v.408$1119$1251) ((lambda (id$1253) ((lambda (v.409$1120$1254) (if (null? v.409$1120$1254) (cons (cons-source (rename$705$1122 (quote match-check-identifier)) (cons-source x$1235 (cons-source (cons-source (rename$705$1122 (quote let-syntax)) (cons-source (cons-source (cons-source (rename$705$1122 (quote new-sym?)) (cons-source (cons-source (rename$705$1122 (quote syntax-rules)) (cons-source id$1253 (cons-source (cons-source (cons-source (rename$705$1122 (quote new-sym?)) (cons-source x$1235 (cons-source (rename$705$1122 (quote sk2)) (cons-source (rename$705$1122 (quote fk2)) (quote ()) (quote (fk2))) (quote (sk2 fk2))) (quote (x sk2 fk2))) (quote (new-sym? x sk2 fk2))) (cons-source (rename$705$1122 (quote sk2)) (quote ()) (quote (sk2))) (quote ((new-sym? x sk2 fk2) sk2))) (cons-source (cons-source (cons-source (rename$705$1122 (quote new-sym?)) (cons-source (rename$705$1122 (quote y)) (cons-source (rename$705$1122 (quote sk2)) (cons-source (rename$705$1122 (quote fk2)) (quote ()) (quote (fk2))) (quote (sk2 fk2))) (quote (y sk2 fk2))) (quote (new-sym? y sk2 fk2))) (cons-source (rename$705$1122 (quote fk2)) (quote ()) (quote (fk2))) (quote ((new-sym? y sk2 fk2) fk2))) (quote ()) (quote (((new-sym? y sk2 fk2) fk2)))) (quote (((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (quote ((id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (quote (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (quote ()) (quote ((syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2))))) (quote (new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2))))) (quote ()) (quote ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))))) (cons-source (cons-source (rename$705$1122 (quote new-sym?)) (cons-source (rename$705$1122 (quote random-sym-to-match)) (cons-source (cons-source (rename$705$1122 (quote let)) (cons-source (cons-source (cons-source x$1235 (cons-source v$1231 (quote ()) (quote (v))) (quote (x v))) (quote ()) (quote ((x v)))) (cons-source (append (map (lambda (sk$1256) sk$1256) sk$1244) (cons-source (append (map (lambda (id$1257) id$1257) id$1253) (cons-source x$1235 (quote ()) (quote (x)))) (quote ()) (quote ((id ... x))))) (quote ()) (quote ((sk ... (id ... x))))) (quote (((x v)) (sk ... (id ... x))))) (quote (let ((x v)) (sk ... (id ... x))))) (cons-source (cons-source (rename$705$1122 (quote if)) (cons-source (cons-source (rename$705$1122 (quote equal?)) (cons-source v$1231 (cons-source x$1235 (quote ()) (quote (x))) (quote (v x))) (quote (equal? v x))) (cons-source (append (map (lambda (sk$1258) sk$1258) sk$1244) (cons-source id$1253 (quote ()) (quote ((id ...))))) (cons-source fk$1248 (quote ()) (quote (fk))) (quote ((sk ... (id ...)) fk))) (quote ((equal? v x) (sk ... (id ...)) fk))) (quote (if (equal? v x) (sk ... (id ...)) fk))) (quote ()) (quote ((if (equal? v x) (sk ... (id ...)) fk)))) (quote ((let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote ()) (quote ((new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))))) (quote (((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))))) (quote (let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))))) (cons-source (cons-source (rename$705$1122 (quote if)) (cons-source (cons-source (rename$705$1122 (quote equal?)) (cons-source v$1231 (cons-source x$1235 (quote ()) (quote (x))) (quote (v x))) (quote (equal? v x))) (cons-source (append (map (lambda (sk$1259) sk$1259) sk$1244) (cons-source id$1253 (quote ()) (quote ((id ...))))) (cons-source fk$1248 (quote ()) (quote (fk))) (quote ((sk ... (id ...)) fk))) (quote ((equal? v x) (sk ... (id ...)) fk))) (quote (if (equal? v x) (sk ... (id ...)) fk))) (quote ()) (quote ((if (equal? v x) (sk ... (id ...)) fk)))) (quote ((let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (x (let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (match-check-identifier x (let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))) (if (equal? v x) (sk ... (id ...)) fk)))) #f) #f)) (cdr v.407$1118$1249))) v.408$1119$1251) #f)) (car v.407$1118$1249)) #f)) (cdr v.405$1116$1245))) v.406$1117$1247)) (car v.405$1116$1245)) #f)) (cdr v.403$1114$1240))) v.404$1115$1242) #f)) (car v.403$1114$1240)) #f)) (cdr v.401$1112$1236))) v.402$1113$1238)) (car v.401$1112$1236)) #f)) (cdr v.399$1110$1232))) v.400$1111$1234)) (car v.399$1110$1232)) #f)) (cdr v.397$1108$1228))) v.398$1109$1230)) (car v.397$1108$1228)) #f)) (cdr expr$704$1121))))) ((lambda (v.389$1100$1260) (if (pair? v.389$1100$1260) ((lambda (v.390$1101$1262) ((lambda (v$1263) ((lambda (v.391$1102$1264) (if (pair? v.391$1102$1264) ((lambda (v.392$1103$1266) (if (vector? v.392$1103$1266) ((lambda (v.393$1104$1268) (if (list? v.393$1104$1268) ((lambda (p$1270) ((lambda (v.394$1105$1271) (if (pair? v.394$1105$1271) ((lambda (v.395$1106$1273) ((lambda (g+s$1274) ((lambda (v.396$1107$1275) ((lambda (x$1276) (cons (cons-source (rename$705$1122 (quote match-vector)) (cons-source v$1263 (cons-source 0 (cons-source (quote ()) (cons-source p$1270 x$1276 (quote ((p ...) . x))) (quote (() (p ...) . x))) (quote (0 () (p ...) . x))) (quote (v 0 () (p ...) . x))) (quote (match-vector v 0 () (p ...) . x))) #f)) v.396$1107$1275)) (cdr v.394$1105$1271))) v.395$1106$1273)) (car v.394$1105$1271)) #f)) (cdr v.391$1102$1264))) v.393$1104$1268) #f)) (vector->list v.392$1103$1266)) #f)) (car v.391$1102$1264)) #f)) (cdr v.389$1100$1260))) v.390$1101$1262)) (car v.389$1100$1260)) #f)) (cdr expr$704$1121))))) ((lambda (v.374$1085$1277) (if (pair? v.374$1085$1277) ((lambda (v.375$1086$1279) ((lambda (v$1280) ((lambda (v.376$1087$1281) (if (pair? v.376$1087$1281) ((lambda (v.377$1088$1283) (if (pair? v.377$1088$1283) ((lambda (v.378$1089$1285) ((lambda (p$1286) ((lambda (v.379$1090$1287) ((lambda (q$1288) ((lambda (v.380$1091$1289) (if (pair? v.380$1091$1289) ((lambda (v.381$1092$1291) ((lambda (g+s$1292) ((lambda (v.382$1093$1293) (if (pair? v.382$1093$1293) ((lambda (v.383$1094$1295) ((lambda (sk$1296) ((lambda (v.384$1095$1297) (if (pair? v.384$1095$1297) ((lambda (v.385$1096$1299) ((lambda (fk$1300) ((lambda (v.386$1097$1301) (if (pair? v.386$1097$1301) ((lambda (v.387$1098$1303) ((lambda (i$1304) ((lambda (v.388$1099$1305) (if (null? v.388$1099$1305) (cons (cons-source (rename$705$1122 (quote if)) (cons-source (cons-source (rename$705$1122 (quote pair?)) (cons-source v$1280 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$705$1122 (quote let)) (cons-source (cons-source (cons-source (rename$705$1122 (quote w)) (cons-source (cons-source (rename$705$1122 (quote car)) (cons-source v$1280 (quote ()) (quote (v))) (quote (car v))) (quote ()) (quote ((car v)))) (quote (w (car v)))) (cons-source (cons-source (rename$705$1122 (quote x)) (cons-source (cons-source (rename$705$1122 (quote cdr)) (cons-source v$1280 (quote ()) (quote (v))) (quote (cdr v))) (quote ()) (quote ((cdr v)))) (quote (x (cdr v)))) (quote ()) (quote ((x (cdr v))))) (quote ((w (car v)) (x (cdr v))))) (cons-source (cons-source (rename$705$1122 (quote match-one)) (cons-source (rename$705$1122 (quote w)) (cons-source p$1286 (cons-source (cons-source (cons-source (rename$705$1122 (quote car)) (cons-source v$1280 (quote ()) (quote (v))) (quote (car v))) (cons-source (cons-source (rename$705$1122 (quote set-car!)) (cons-source v$1280 (quote ()) (quote (v))) (quote (set-car! v))) (quote ()) (quote ((set-car! v)))) (quote ((car v) (set-car! v)))) (cons-source (cons-source (rename$705$1122 (quote match-one)) (cons-source (rename$705$1122 (quote x)) (cons-source q$1288 (cons-source (cons-source (cons-source (rename$705$1122 (quote cdr)) (cons-source v$1280 (quote ()) (quote (v))) (quote (cdr v))) (cons-source (cons-source (rename$705$1122 (quote set-cdr!)) (cons-source v$1280 (quote ()) (quote (v))) (quote (set-cdr! v))) (quote ()) (quote ((set-cdr! v)))) (quote ((cdr v) (set-cdr! v)))) (cons-source sk$1296 (cons-source fk$1300 (quote ()) (quote (fk))) (quote (sk fk))) (quote (((cdr v) (set-cdr! v)) sk fk))) (quote (q ((cdr v) (set-cdr! v)) sk fk))) (quote (x q ((cdr v) (set-cdr! v)) sk fk))) (quote (match-one x q ((cdr v) (set-cdr! v)) sk fk))) (cons-source fk$1300 (cons-source i$1304 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote ()) (quote ((match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)))) (quote (((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)))) (quote (let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)))) (cons-source fk$1300 (quote ()) (quote (fk))) (quote ((let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)) fk))) (quote ((pair? v) (let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)) fk))) (quote (if (pair? v) (let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)) fk))) #f) #f)) (cdr v.386$1097$1301))) v.387$1098$1303)) (car v.386$1097$1301)) #f)) (cdr v.384$1095$1297))) v.385$1096$1299)) (car v.384$1095$1297)) #f)) (cdr v.382$1093$1293))) v.383$1094$1295)) (car v.382$1093$1293)) #f)) (cdr v.380$1091$1289))) v.381$1092$1291)) (car v.380$1091$1289)) #f)) (cdr v.376$1087$1281))) v.379$1090$1287)) (cdr v.377$1088$1283))) v.378$1089$1285)) (car v.377$1088$1283)) #f)) (car v.376$1087$1281)) #f)) (cdr v.374$1085$1277))) v.375$1086$1279)) (car v.374$1085$1277)) #f)) (cdr expr$704$1121))))) ((lambda (v.357$1068$1307) (if (pair? v.357$1068$1307) ((lambda (v.358$1069$1309) ((lambda (v$1310) ((lambda (v.359$1070$1311) (if (pair? v.359$1070$1311) ((lambda (v.360$1071$1313) (if (pair? v.360$1071$1313) ((lambda (v.361$1072$1315) (if (compare$706$1123 v.361$1072$1315 (rename$705$1122 (quote object))) ((lambda (v.362$1073$1317) (if (pair? v.362$1073$1317) ((lambda (v.363$1074$1319) ((lambda (rec$1320) ((lambda (v.364$1075$1321) (if (list? v.364$1075$1321) ((lambda (p$1323) ((lambda (v.365$1076$1324) (if (pair? v.365$1076$1324) ((lambda (v.366$1077$1326) ((lambda (g+s$1327) ((lambda (v.367$1078$1328) (if (pair? v.367$1078$1328) ((lambda (v.368$1079$1330) ((lambda (sk$1331) ((lambda (v.369$1080$1332) (if (pair? v.369$1080$1332) ((lambda (v.370$1081$1334) ((lambda (fk$1335) ((lambda (v.371$1082$1336) (if (pair? v.371$1082$1336) ((lambda (v.372$1083$1338) ((lambda (i$1339) ((lambda (v.373$1084$1340) (if (null? v.373$1084$1340) (cons (cons-source (rename$705$1122 (quote if)) (cons-source (cons-source (rename$705$1122 (quote is-a?)) (cons-source v$1310 (cons-source rec$1320 (quote ()) (quote (rec))) (quote (v rec))) (quote (is-a? v rec))) (cons-source (cons-source (rename$705$1122 (quote match-record-named-refs)) (cons-source v$1310 (cons-source rec$1320 (cons-source p$1323 (cons-source g+s$1327 (cons-source sk$1331 (cons-source fk$1335 (cons-source i$1339 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (rec (p ...) g+s sk fk i))) (quote (v rec (p ...) g+s sk fk i))) (quote (match-record-named-refs v rec (p ...) g+s sk fk i))) (cons-source fk$1335 (quote ()) (quote (fk))) (quote ((match-record-named-refs v rec (p ...) g+s sk fk i) fk))) (quote ((is-a? v rec) (match-record-named-refs v rec (p ...) g+s sk fk i) fk))) (quote (if (is-a? v rec) (match-record-named-refs v rec (p ...) g+s sk fk i) fk))) #f) #f)) (cdr v.371$1082$1336))) v.372$1083$1338)) (car v.371$1082$1336)) #f)) (cdr v.369$1080$1332))) v.370$1081$1334)) (car v.369$1080$1332)) #f)) (cdr v.367$1078$1328))) v.368$1079$1330)) (car v.367$1078$1328)) #f)) (cdr v.365$1076$1324))) v.366$1077$1326)) (car v.365$1076$1324)) #f)) (cdr v.359$1070$1311))) v.364$1075$1321) #f)) (cdr v.362$1073$1317))) v.363$1074$1319)) (car v.362$1073$1317)) #f)) (cdr v.360$1071$1313)) #f)) (car v.360$1071$1313)) #f)) (car v.359$1070$1311)) #f)) (cdr v.357$1068$1307))) v.358$1069$1309)) (car v.357$1068$1307)) #f)) (cdr expr$704$1121))))) ((lambda (v.340$1051$1342) (if (pair? v.340$1051$1342) ((lambda (v.341$1052$1344) ((lambda (v$1345) ((lambda (v.342$1053$1346) (if (pair? v.342$1053$1346) ((lambda (v.343$1054$1348) (if (pair? v.343$1054$1348) ((lambda (v.344$1055$1350) (if (compare$706$1123 v.344$1055$1350 (rename$705$1122 (quote struct))) ((lambda (v.345$1056$1352) (if (pair? v.345$1056$1352) ((lambda (v.346$1057$1354) ((lambda (rec$1355) ((lambda (v.347$1058$1356) (if (list? v.347$1058$1356) ((lambda (p$1358) ((lambda (v.348$1059$1359) (if (pair? v.348$1059$1359) ((lambda (v.349$1060$1361) ((lambda (g+s$1362) ((lambda (v.350$1061$1363) (if (pair? v.350$1061$1363) ((lambda (v.351$1062$1365) ((lambda (sk$1366) ((lambda (v.352$1063$1367) (if (pair? v.352$1063$1367) ((lambda (v.353$1064$1369) ((lambda (fk$1370) ((lambda (v.354$1065$1371) (if (pair? v.354$1065$1371) ((lambda (v.355$1066$1373) ((lambda (i$1374) ((lambda (v.356$1067$1375) (if (null? v.356$1067$1375) (cons (cons-source (rename$705$1122 (quote if)) (cons-source (cons-source (rename$705$1122 (quote is-a?)) (cons-source v$1345 (cons-source rec$1355 (quote ()) (quote (rec))) (quote (v rec))) (quote (is-a? v rec))) (cons-source (cons-source (rename$705$1122 (quote match-record-refs)) (cons-source v$1345 (cons-source rec$1355 (cons-source 0 (cons-source p$1358 (cons-source g+s$1362 (cons-source sk$1366 (cons-source fk$1370 (cons-source i$1374 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (0 (p ...) g+s sk fk i))) (quote (rec 0 (p ...) g+s sk fk i))) (quote (v rec 0 (p ...) g+s sk fk i))) (quote (match-record-refs v rec 0 (p ...) g+s sk fk i))) (cons-source fk$1370 (quote ()) (quote (fk))) (quote ((match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote ((is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote (if (is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) #f) #f)) (cdr v.354$1065$1371))) v.355$1066$1373)) (car v.354$1065$1371)) #f)) (cdr v.352$1063$1367))) v.353$1064$1369)) (car v.352$1063$1367)) #f)) (cdr v.350$1061$1363))) v.351$1062$1365)) (car v.350$1061$1363)) #f)) (cdr v.348$1059$1359))) v.349$1060$1361)) (car v.348$1059$1359)) #f)) (cdr v.342$1053$1346))) v.347$1058$1356) #f)) (cdr v.345$1056$1352))) v.346$1057$1354)) (car v.345$1056$1352)) #f)) (cdr v.343$1054$1348)) #f)) (car v.343$1054$1348)) #f)) (car v.342$1053$1346)) #f)) (cdr v.340$1051$1342))) v.341$1052$1344)) (car v.340$1051$1342)) #f)) (cdr expr$704$1121))))) ((lambda (v.323$1034$1377) (if (pair? v.323$1034$1377) ((lambda (v.324$1035$1379) ((lambda (v$1380) ((lambda (v.325$1036$1381) (if (pair? v.325$1036$1381) ((lambda (v.326$1037$1383) (if (pair? v.326$1037$1383) ((lambda (v.327$1038$1385) (if (compare$706$1123 v.327$1038$1385 (rename$705$1122 (quote $))) ((lambda (v.328$1039$1387) (if (pair? v.328$1039$1387) ((lambda (v.329$1040$1389) ((lambda (rec$1390) ((lambda (v.330$1041$1391) (if (list? v.330$1041$1391) ((lambda (p$1393) ((lambda (v.331$1042$1394) (if (pair? v.331$1042$1394) ((lambda (v.332$1043$1396) ((lambda (g+s$1397) ((lambda (v.333$1044$1398) (if (pair? v.333$1044$1398) ((lambda (v.334$1045$1400) ((lambda (sk$1401) ((lambda (v.335$1046$1402) (if (pair? v.335$1046$1402) ((lambda (v.336$1047$1404) ((lambda (fk$1405) ((lambda (v.337$1048$1406) (if (pair? v.337$1048$1406) ((lambda (v.338$1049$1408) ((lambda (i$1409) ((lambda (v.339$1050$1410) (if (null? v.339$1050$1410) (cons (cons-source (rename$705$1122 (quote if)) (cons-source (cons-source (rename$705$1122 (quote is-a?)) (cons-source v$1380 (cons-source rec$1390 (quote ()) (quote (rec))) (quote (v rec))) (quote (is-a? v rec))) (cons-source (cons-source (rename$705$1122 (quote match-record-refs)) (cons-source v$1380 (cons-source rec$1390 (cons-source 0 (cons-source p$1393 (cons-source g+s$1397 (cons-source sk$1401 (cons-source fk$1405 (cons-source i$1409 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (0 (p ...) g+s sk fk i))) (quote (rec 0 (p ...) g+s sk fk i))) (quote (v rec 0 (p ...) g+s sk fk i))) (quote (match-record-refs v rec 0 (p ...) g+s sk fk i))) (cons-source fk$1405 (quote ()) (quote (fk))) (quote ((match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote ((is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote (if (is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) #f) #f)) (cdr v.337$1048$1406))) v.338$1049$1408)) (car v.337$1048$1406)) #f)) (cdr v.335$1046$1402))) v.336$1047$1404)) (car v.335$1046$1402)) #f)) (cdr v.333$1044$1398))) v.334$1045$1400)) (car v.333$1044$1398)) #f)) (cdr v.331$1042$1394))) v.332$1043$1396)) (car v.331$1042$1394)) #f)) (cdr v.325$1036$1381))) v.330$1041$1391) #f)) (cdr v.328$1039$1387))) v.329$1040$1389)) (car v.328$1039$1387)) #f)) (cdr v.326$1037$1383)) #f)) (car v.326$1037$1383)) #f)) (car v.325$1036$1381)) #f)) (cdr v.323$1034$1377))) v.324$1035$1379)) (car v.323$1034$1377)) #f)) (cdr expr$704$1121))))) ((lambda (v.302$1013$1412) (if (pair? v.302$1013$1412) ((lambda (v.303$1014$1414) ((lambda (v$1415) ((lambda (v.304$1015$1416) (if (pair? v.304$1015$1416) ((lambda (v.305$1016$1418) (if (pair? v.305$1016$1418) ((lambda (v.306$1017$1420) ((lambda (p$1421) ((lambda (v.307$1018$1422) (if (pair? v.307$1018$1422) ((lambda (v.308$1019$1424) (if (compare$706$1123 v.308$1019$1424 (rename$705$1122 (quote *..))) ((lambda (v.309$1020$1426) (if (pair? v.309$1020$1426) ((lambda (v.310$1021$1428) ((lambda (n$1429) ((lambda (v.311$1022$1430) (if (pair? v.311$1022$1430) ((lambda (v.312$1023$1432) ((lambda (m$1433) ((lambda (v.313$1024$1434) ((lambda (r$1435) ((lambda (v.314$1025$1436) (if (pair? v.314$1025$1436) ((lambda (v.315$1026$1438) ((lambda (g+s$1439) ((lambda (v.316$1027$1440) (if (pair? v.316$1027$1440) ((lambda (v.317$1028$1442) ((lambda (sk$1443) ((lambda (v.318$1029$1444) (if (pair? v.318$1029$1444) ((lambda (v.319$1030$1446) ((lambda (fk$1447) ((lambda (v.320$1031$1448) (if (pair? v.320$1031$1448) ((lambda (v.321$1032$1450) ((lambda (i$1451) ((lambda (v.322$1033$1452) (if (null? v.322$1033$1452) (cons (cons-source (rename$705$1122 (quote match-extract-underscore)) (cons-source p$1421 (cons-source (cons-source (rename$705$1122 (quote match-gen-ellipsis/range)) (cons-source n$1429 (cons-source m$1433 (cons-source v$1415 (cons-source p$1421 (cons-source r$1435 (cons-source g+s$1439 (cons-source sk$1443 (cons-source fk$1447 (cons-source i$1451 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (r g+s sk fk i))) (quote (p r g+s sk fk i))) (quote (v p r g+s sk fk i))) (quote (m v p r g+s sk fk i))) (quote (n m v p r g+s sk fk i))) (quote (match-gen-ellipsis/range n m v p r g+s sk fk i))) (cons-source i$1451 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-ellipsis/range n m v p r g+s sk fk i) i ()))) (quote (p (match-gen-ellipsis/range n m v p r g+s sk fk i) i ()))) (quote (match-extract-underscore p (match-gen-ellipsis/range n m v p r g+s sk fk i) i ()))) #f) #f)) (cdr v.320$1031$1448))) v.321$1032$1450)) (car v.320$1031$1448)) #f)) (cdr v.318$1029$1444))) v.319$1030$1446)) (car v.318$1029$1444)) #f)) (cdr v.316$1027$1440))) v.317$1028$1442)) (car v.316$1027$1440)) #f)) (cdr v.314$1025$1436))) v.315$1026$1438)) (car v.314$1025$1436)) #f)) (cdr v.304$1015$1416))) v.313$1024$1434)) (cdr v.311$1022$1430))) v.312$1023$1432)) (car v.311$1022$1430)) #f)) (cdr v.309$1020$1426))) v.310$1021$1428)) (car v.309$1020$1426)) #f)) (cdr v.307$1018$1422)) #f)) (car v.307$1018$1422)) #f)) (cdr v.305$1016$1418))) v.306$1017$1420)) (car v.305$1016$1418)) #f)) (car v.304$1015$1416)) #f)) (cdr v.302$1013$1412))) v.303$1014$1414)) (car v.302$1013$1412)) #f)) (cdr expr$704$1121))))) ((lambda (v.283$994$1454) (if (pair? v.283$994$1454) ((lambda (v.284$995$1456) ((lambda (v$1457) ((lambda (v.285$996$1458) (if (pair? v.285$996$1458) ((lambda (v.286$997$1460) (if (pair? v.286$997$1460) ((lambda (v.287$998$1462) ((lambda (p$1463) ((lambda (v.288$999$1464) (if (pair? v.288$999$1464) ((lambda (v.289$1000$1466) (if (compare$706$1123 v.289$1000$1466 (rename$705$1122 (quote =..))) ((lambda (v.290$1001$1468) (if (pair? v.290$1001$1468) ((lambda (v.291$1002$1470) ((lambda (n$1471) ((lambda (v.292$1003$1472) ((lambda (r$1473) ((lambda (v.293$1004$1474) (if (pair? v.293$1004$1474) ((lambda (v.294$1005$1476) ((lambda (g+s$1477) ((lambda (v.295$1006$1478) (if (pair? v.295$1006$1478) ((lambda (v.296$1007$1480) ((lambda (sk$1481) ((lambda (v.297$1008$1482) (if (pair? v.297$1008$1482) ((lambda (v.298$1009$1484) ((lambda (fk$1485) ((lambda (v.299$1010$1486) (if (pair? v.299$1010$1486) ((lambda (v.300$1011$1488) ((lambda (i$1489) ((lambda (v.301$1012$1490) (if (null? v.301$1012$1490) (cons (cons-source (rename$705$1122 (quote match-extract-underscore)) (cons-source p$1463 (cons-source (cons-source (rename$705$1122 (quote match-gen-ellipsis/range)) (cons-source n$1471 (cons-source n$1471 (cons-source v$1457 (cons-source p$1463 (cons-source r$1473 (cons-source g+s$1477 (cons-source sk$1481 (cons-source fk$1485 (cons-source i$1489 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (r g+s sk fk i))) (quote (p r g+s sk fk i))) (quote (v p r g+s sk fk i))) (quote (n v p r g+s sk fk i))) (quote (n n v p r g+s sk fk i))) (quote (match-gen-ellipsis/range n n v p r g+s sk fk i))) (cons-source i$1489 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-ellipsis/range n n v p r g+s sk fk i) i ()))) (quote (p (match-gen-ellipsis/range n n v p r g+s sk fk i) i ()))) (quote (match-extract-underscore p (match-gen-ellipsis/range n n v p r g+s sk fk i) i ()))) #f) #f)) (cdr v.299$1010$1486))) v.300$1011$1488)) (car v.299$1010$1486)) #f)) (cdr v.297$1008$1482))) v.298$1009$1484)) (car v.297$1008$1482)) #f)) (cdr v.295$1006$1478))) v.296$1007$1480)) (car v.295$1006$1478)) #f)) (cdr v.293$1004$1474))) v.294$1005$1476)) (car v.293$1004$1474)) #f)) (cdr v.285$996$1458))) v.292$1003$1472)) (cdr v.290$1001$1468))) v.291$1002$1470)) (car v.290$1001$1468)) #f)) (cdr v.288$999$1464)) #f)) (car v.288$999$1464)) #f)) (cdr v.286$997$1460))) v.287$998$1462)) (car v.286$997$1460)) #f)) (car v.285$996$1458)) #f)) (cdr v.283$994$1454))) v.284$995$1456)) (car v.283$994$1454)) #f)) (cdr expr$704$1121))))) ((lambda (v.266$977$1492) (if (pair? v.266$977$1492) ((lambda (v.267$978$1494) ((lambda (v$1495) ((lambda (v.268$979$1496) (if (pair? v.268$979$1496) ((lambda (v.269$980$1498) (if (pair? v.269$980$1498) ((lambda (v.270$981$1500) ((lambda (p$1501) ((lambda (v.271$982$1502) (if (pair? v.271$982$1502) ((lambda (v.272$983$1504) (if (compare$706$1123 v.272$983$1504 (rename$705$1122 (quote **1))) ((lambda (v.273$984$1506) (if (null? v.273$984$1506) ((lambda (v.274$985$1508) (if (pair? v.274$985$1508) ((lambda (v.275$986$1510) ((lambda (g+s$1511) ((lambda (v.276$987$1512) (if (pair? v.276$987$1512) ((lambda (v.277$988$1514) ((lambda (sk$1515) ((lambda (v.278$989$1516) (if (pair? v.278$989$1516) ((lambda (v.279$990$1518) ((lambda (fk$1519) ((lambda (v.280$991$1520) (if (pair? v.280$991$1520) ((lambda (v.281$992$1522) ((lambda (i$1523) ((lambda (v.282$993$1524) (if (null? v.282$993$1524) (cons (cons-source (rename$705$1122 (quote if)) (cons-source (cons-source (rename$705$1122 (quote pair?)) (cons-source v$1495 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$705$1122 (quote match-one)) (cons-source v$1495 (cons-source (cons-source p$1501 (cons-source (rename$705$1122 (quote ___)) (quote ()) (quote (___))) (quote (p ___))) (cons-source g+s$1511 (cons-source sk$1515 (cons-source fk$1519 (cons-source i$1523 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ___) g+s sk fk i))) (quote (v (p ___) g+s sk fk i))) (quote (match-one v (p ___) g+s sk fk i))) (cons-source fk$1519 (quote ()) (quote (fk))) (quote ((match-one v (p ___) g+s sk fk i) fk))) (quote ((pair? v) (match-one v (p ___) g+s sk fk i) fk))) (quote (if (pair? v) (match-one v (p ___) g+s sk fk i) fk))) #f) #f)) (cdr v.280$991$1520))) v.281$992$1522)) (car v.280$991$1520)) #f)) (cdr v.278$989$1516))) v.279$990$1518)) (car v.278$989$1516)) #f)) (cdr v.276$987$1512))) v.277$988$1514)) (car v.276$987$1512)) #f)) (cdr v.274$985$1508))) v.275$986$1510)) (car v.274$985$1508)) #f)) (cdr v.268$979$1496)) #f)) (cdr v.271$982$1502)) #f)) (car v.271$982$1502)) #f)) (cdr v.269$980$1498))) v.270$981$1500)) (car v.269$980$1498)) #f)) (car v.268$979$1496)) #f)) (cdr v.266$977$1492))) v.267$978$1494)) (car v.266$977$1492)) #f)) (cdr expr$704$1121))))) ((lambda (v.249$960$1526) (if (pair? v.249$960$1526) ((lambda (v.250$961$1528) ((lambda (v$1529) ((lambda (v.251$962$1530) (if (pair? v.251$962$1530) ((lambda (v.252$963$1532) (if (pair? v.252$963$1532) ((lambda (v.253$964$1534) ((lambda (p$1535) ((lambda (v.254$965$1536) (if (pair? v.254$965$1536) ((lambda (v.255$966$1538) (if (compare$706$1123 v.255$966$1538 (rename$705$1122 (quote ***))) ((lambda (v.256$967$1540) ((lambda (q$1541) ((lambda (v.257$968$1542) (if (pair? v.257$968$1542) ((lambda (v.258$969$1544) ((lambda (g+s$1545) ((lambda (v.259$970$1546) (if (pair? v.259$970$1546) ((lambda (v.260$971$1548) ((lambda (sk$1549) ((lambda (v.261$972$1550) (if (pair? v.261$972$1550) ((lambda (v.262$973$1552) ((lambda (fk$1553) ((lambda (v.263$974$1554) (if (pair? v.263$974$1554) ((lambda (v.264$975$1556) ((lambda (i$1557) ((lambda (v.265$976$1558) (if (null? v.265$976$1558) (cons (cons-source (rename$705$1122 (quote match-syntax-error)) (cons-source "invalid use of ***" (cons-source (cons-source p$1535 (cons-source (rename$705$1122 (quote ***)) q$1541 (quote (*** . q))) (quote (p *** . q))) (quote ()) (quote ((p *** . q)))) (quote ("invalid use of ***" (p *** . q)))) (quote (match-syntax-error "invalid use of ***" (p *** . q)))) #f) #f)) (cdr v.263$974$1554))) v.264$975$1556)) (car v.263$974$1554)) #f)) (cdr v.261$972$1550))) v.262$973$1552)) (car v.261$972$1550)) #f)) (cdr v.259$970$1546))) v.260$971$1548)) (car v.259$970$1546)) #f)) (cdr v.257$968$1542))) v.258$969$1544)) (car v.257$968$1542)) #f)) (cdr v.251$962$1530))) v.256$967$1540)) (cdr v.254$965$1536)) #f)) (car v.254$965$1536)) #f)) (cdr v.252$963$1532))) v.253$964$1534)) (car v.252$963$1532)) #f)) (car v.251$962$1530)) #f)) (cdr v.249$960$1526))) v.250$961$1528)) (car v.249$960$1526)) #f)) (cdr expr$704$1121))))) ((lambda (v.230$941$1560) (if (pair? v.230$941$1560) ((lambda (v.231$942$1562) ((lambda (v$1563) ((lambda (v.232$943$1564) (if (pair? v.232$943$1564) ((lambda (v.233$944$1566) (if (pair? v.233$944$1566) ((lambda (v.234$945$1568) ((lambda (p$1569) ((lambda (v.235$946$1570) (if (pair? v.235$946$1570) ((lambda (v.236$947$1572) (if (compare$706$1123 v.236$947$1572 (rename$705$1122 (quote ***))) ((lambda (v.237$948$1574) (if (pair? v.237$948$1574) ((lambda (v.238$949$1576) ((lambda (q$1577) ((lambda (v.239$950$1578) (if (null? v.239$950$1578) ((lambda (v.240$951$1580) (if (pair? v.240$951$1580) ((lambda (v.241$952$1582) ((lambda (g+s$1583) ((lambda (v.242$953$1584) (if (pair? v.242$953$1584) ((lambda (v.243$954$1586) ((lambda (sk$1587) ((lambda (v.244$955$1588) (if (pair? v.244$955$1588) ((lambda (v.245$956$1590) ((lambda (fk$1591) ((lambda (v.246$957$1592) (if (pair? v.246$957$1592) ((lambda (v.247$958$1594) ((lambda (i$1595) ((lambda (v.248$959$1596) (if (null? v.248$959$1596) (cons (cons-source (rename$705$1122 (quote match-extract-underscore)) (cons-source p$1569 (cons-source (cons-source (rename$705$1122 (quote match-gen-search)) (cons-source v$1563 (cons-source p$1569 (cons-source q$1577 (cons-source g+s$1583 (cons-source sk$1587 (cons-source fk$1591 (cons-source i$1595 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (q g+s sk fk i))) (quote (p q g+s sk fk i))) (quote (v p q g+s sk fk i))) (quote (match-gen-search v p q g+s sk fk i))) (cons-source i$1595 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-search v p q g+s sk fk i) i ()))) (quote (p (match-gen-search v p q g+s sk fk i) i ()))) (quote (match-extract-underscore p (match-gen-search v p q g+s sk fk i) i ()))) #f) #f)) (cdr v.246$957$1592))) v.247$958$1594)) (car v.246$957$1592)) #f)) (cdr v.244$955$1588))) v.245$956$1590)) (car v.244$955$1588)) #f)) (cdr v.242$953$1584))) v.243$954$1586)) (car v.242$953$1584)) #f)) (cdr v.240$951$1580))) v.241$952$1582)) (car v.240$951$1580)) #f)) (cdr v.232$943$1564)) #f)) (cdr v.237$948$1574))) v.238$949$1576)) (car v.237$948$1574)) #f)) (cdr v.235$946$1570)) #f)) (car v.235$946$1570)) #f)) (cdr v.233$944$1566))) v.234$945$1568)) (car v.233$944$1566)) #f)) (car v.232$943$1564)) #f)) (cdr v.230$941$1560))) v.231$942$1562)) (car v.230$941$1560)) #f)) (cdr expr$704$1121))))) ((lambda (v.215$926$1598) (if (pair? v.215$926$1598) ((lambda (v.216$927$1600) ((lambda (v$1601) ((lambda (v.217$928$1602) (if (pair? v.217$928$1602) ((lambda (v.218$929$1604) (if (pair? v.218$929$1604) ((lambda (v.219$930$1606) ((lambda (p$1607) ((lambda (v.220$931$1608) (if (null? v.220$931$1608) ((lambda (v.221$932$1610) (if (pair? v.221$932$1610) ((lambda (v.222$933$1612) ((lambda (g+s$1613) ((lambda (v.223$934$1614) (if (pair? v.223$934$1614) ((lambda (v.224$935$1616) ((lambda (sk$1617) ((lambda (v.225$936$1618) (if (pair? v.225$936$1618) ((lambda (v.226$937$1620) ((lambda (fk$1621) ((lambda (v.227$938$1622) (if (pair? v.227$938$1622) ((lambda (v.228$939$1624) ((lambda (i$1625) ((lambda (v.229$940$1626) (if (null? v.229$940$1626) (cons (cons-source (rename$705$1122 (quote if)) (cons-source (cons-source (rename$705$1122 (quote and)) (cons-source (cons-source (rename$705$1122 (quote pair?)) (cons-source v$1601 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$705$1122 (quote null?)) (cons-source (cons-source (rename$705$1122 (quote cdr)) (cons-source v$1601 (quote ()) (quote (v))) (quote (cdr v))) (quote ()) (quote ((cdr v)))) (quote (null? (cdr v)))) (quote ()) (quote ((null? (cdr v))))) (quote ((pair? v) (null? (cdr v))))) (quote (and (pair? v) (null? (cdr v))))) (cons-source (cons-source (rename$705$1122 (quote let)) (cons-source (cons-source (cons-source (rename$705$1122 (quote w)) (cons-source (cons-source (rename$705$1122 (quote car)) (cons-source v$1601 (quote ()) (quote (v))) (quote (car v))) (quote ()) (quote ((car v)))) (quote (w (car v)))) (quote ()) (quote ((w (car v))))) (cons-source (cons-source (rename$705$1122 (quote match-one)) (cons-source (rename$705$1122 (quote w)) (cons-source p$1607 (cons-source (cons-source (cons-source (rename$705$1122 (quote car)) (cons-source v$1601 (quote ()) (quote (v))) (quote (car v))) (cons-source (cons-source (rename$705$1122 (quote set-car!)) (cons-source v$1601 (quote ()) (quote (v))) (quote (set-car! v))) (quote ()) (quote ((set-car! v)))) (quote ((car v) (set-car! v)))) (cons-source sk$1617 (cons-source fk$1621 (cons-source i$1625 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (((car v) (set-car! v)) sk fk i))) (quote (p ((car v) (set-car! v)) sk fk i))) (quote (w p ((car v) (set-car! v)) sk fk i))) (quote (match-one w p ((car v) (set-car! v)) sk fk i))) (quote ()) (quote ((match-one w p ((car v) (set-car! v)) sk fk i)))) (quote (((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)))) (quote (let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)))) (cons-source fk$1621 (quote ()) (quote (fk))) (quote ((let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)) fk))) (quote ((and (pair? v) (null? (cdr v))) (let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)) fk))) (quote (if (and (pair? v) (null? (cdr v))) (let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)) fk))) #f) #f)) (cdr v.227$938$1622))) v.228$939$1624)) (car v.227$938$1622)) #f)) (cdr v.225$936$1618))) v.226$937$1620)) (car v.225$936$1618)) #f)) (cdr v.223$934$1614))) v.224$935$1616)) (car v.223$934$1614)) #f)) (cdr v.221$932$1610))) v.222$933$1612)) (car v.221$932$1610)) #f)) (cdr v.217$928$1602)) #f)) (cdr v.218$929$1604))) v.219$930$1606)) (car v.218$929$1604)) #f)) (car v.217$928$1602)) #f)) (cdr v.215$926$1598))) v.216$927$1600)) (car v.215$926$1598)) #f)) (cdr expr$704$1121))))) ((lambda (v.198$909$1628) (if (pair? v.198$909$1628) ((lambda (v.199$910$1630) ((lambda (v$1631) ((lambda (v.200$911$1632) (if (pair? v.200$911$1632) ((lambda (v.201$912$1634) (if (pair? v.201$912$1634) ((lambda (v.202$913$1636) ((lambda (p$1637) ((lambda (v.203$914$1638) (if (pair? v.203$914$1638) ((lambda (v.204$915$1640) (if (compare$706$1123 v.204$915$1640 (rename$705$1122 (quote ___))) ((lambda (v.205$916$1642) ((lambda (r$1643) ((lambda (v.206$917$1644) (if (pair? v.206$917$1644) ((lambda (v.207$918$1646) ((lambda (g+s$1647) ((lambda (v.208$919$1648) (if (pair? v.208$919$1648) ((lambda (v.209$920$1650) ((lambda (sk$1651) ((lambda (v.210$921$1652) (if (pair? v.210$921$1652) ((lambda (v.211$922$1654) ((lambda (fk$1655) ((lambda (v.212$923$1656) (if (pair? v.212$923$1656) ((lambda (v.213$924$1658) ((lambda (i$1659) ((lambda (v.214$925$1660) (if (null? v.214$925$1660) (cons (cons-source (rename$705$1122 (quote match-extract-underscore)) (cons-source p$1637 (cons-source (cons-source (rename$705$1122 (quote match-gen-ellipsis)) (cons-source v$1631 (cons-source p$1637 (cons-source r$1643 (cons-source g+s$1647 (cons-source sk$1651 (cons-source fk$1655 (cons-source i$1659 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (r g+s sk fk i))) (quote (p r g+s sk fk i))) (quote (v p r g+s sk fk i))) (quote (match-gen-ellipsis v p r g+s sk fk i))) (cons-source i$1659 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (p (match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (match-extract-underscore p (match-gen-ellipsis v p r g+s sk fk i) i ()))) #f) #f)) (cdr v.212$923$1656))) v.213$924$1658)) (car v.212$923$1656)) #f)) (cdr v.210$921$1652))) v.211$922$1654)) (car v.210$921$1652)) #f)) (cdr v.208$919$1648))) v.209$920$1650)) (car v.208$919$1648)) #f)) (cdr v.206$917$1644))) v.207$918$1646)) (car v.206$917$1644)) #f)) (cdr v.200$911$1632))) v.205$916$1642)) (cdr v.203$914$1638)) #f)) (car v.203$914$1638)) #f)) (cdr v.201$912$1634))) v.202$913$1636)) (car v.201$912$1634)) #f)) (car v.200$911$1632)) #f)) (cdr v.198$909$1628))) v.199$910$1630)) (car v.198$909$1628)) #f)) (cdr expr$704$1121))))) ((lambda (v.187$898$1662) (if (pair? v.187$898$1662) ((lambda (v.188$899$1664) ((lambda (v$1665) ((lambda (v.189$900$1666) (if (pair? v.189$900$1666) ((lambda (v.190$901$1668) (if (pair? v.190$901$1668) ((lambda (v.191$902$1670) (if (compare$706$1123 v.191$902$1670 (rename$705$1122 (quote =))) ((lambda (v.192$903$1672) (if (pair? v.192$903$1672) ((lambda (v.193$904$1674) ((lambda (proc$1675) ((lambda (v.194$905$1676) (if (pair? v.194$905$1676) ((lambda (v.195$906$1678) ((lambda (p$1679) ((lambda (v.196$907$1680) (if (null? v.196$907$1680) ((lambda (v.197$908$1682) ((lambda (x$1683) (cons (cons-source (rename$705$1122 (quote let)) (cons-source (cons-source (cons-source (rename$705$1122 (quote w)) (cons-source (cons-source proc$1675 (cons-source v$1665 (quote ()) (quote (v))) (quote (proc v))) (quote ()) (quote ((proc v)))) (quote (w (proc v)))) (quote ()) (quote ((w (proc v))))) (cons-source (cons-source (rename$705$1122 (quote match-one)) (cons-source (rename$705$1122 (quote w)) (cons-source p$1679 x$1683 (quote (p . x))) (quote (w p . x))) (quote (match-one w p . x))) (quote ()) (quote ((match-one w p . x)))) (quote (((w (proc v))) (match-one w p . x)))) (quote (let ((w (proc v))) (match-one w p . x)))) #f)) v.197$908$1682)) (cdr v.189$900$1666)) #f)) (cdr v.194$905$1676))) v.195$906$1678)) (car v.194$905$1676)) #f)) (cdr v.192$903$1672))) v.193$904$1674)) (car v.192$903$1672)) #f)) (cdr v.190$901$1668)) #f)) (car v.190$901$1668)) #f)) (car v.189$900$1666)) #f)) (cdr v.187$898$1662))) v.188$899$1664)) (car v.187$898$1662)) #f)) (cdr expr$704$1121))))) ((lambda (v.170$881$1684) (if (pair? v.170$881$1684) ((lambda (v.171$882$1686) ((lambda (v$1687) ((lambda (v.172$883$1688) (if (pair? v.172$883$1688) ((lambda (v.173$884$1690) (if (pair? v.173$884$1690) ((lambda (v.174$885$1692) (if (compare$706$1123 v.174$885$1692 (rename$705$1122 (quote ?))) ((lambda (v.175$886$1694) (if (pair? v.175$886$1694) ((lambda (v.176$887$1696) ((lambda (pred$1697) ((lambda (v.177$888$1698) ((lambda (p$1699) ((lambda (v.178$889$1700) (if (pair? v.178$889$1700) ((lambda (v.179$890$1702) ((lambda (g+s$1703) ((lambda (v.180$891$1704) (if (pair? v.180$891$1704) ((lambda (v.181$892$1706) ((lambda (sk$1707) ((lambda (v.182$893$1708) (if (pair? v.182$893$1708) ((lambda (v.183$894$1710) ((lambda (fk$1711) ((lambda (v.184$895$1712) (if (pair? v.184$895$1712) ((lambda (v.185$896$1714) ((lambda (i$1715) ((lambda (v.186$897$1716) (if (null? v.186$897$1716) (cons (cons-source (rename$705$1122 (quote if)) (cons-source (cons-source pred$1697 (cons-source v$1687 (quote ()) (quote (v))) (quote (pred v))) (cons-source (cons-source (rename$705$1122 (quote match-one)) (cons-source v$1687 (cons-source (cons-source (rename$705$1122 (quote and)) p$1699 (quote (and . p))) (cons-source g+s$1703 (cons-source sk$1707 (cons-source fk$1711 (cons-source i$1715 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((and . p) g+s sk fk i))) (quote (v (and . p) g+s sk fk i))) (quote (match-one v (and . p) g+s sk fk i))) (cons-source fk$1711 (quote ()) (quote (fk))) (quote ((match-one v (and . p) g+s sk fk i) fk))) (quote ((pred v) (match-one v (and . p) g+s sk fk i) fk))) (quote (if (pred v) (match-one v (and . p) g+s sk fk i) fk))) #f) #f)) (cdr v.184$895$1712))) v.185$896$1714)) (car v.184$895$1712)) #f)) (cdr v.182$893$1708))) v.183$894$1710)) (car v.182$893$1708)) #f)) (cdr v.180$891$1704))) v.181$892$1706)) (car v.180$891$1704)) #f)) (cdr v.178$889$1700))) v.179$890$1702)) (car v.178$889$1700)) #f)) (cdr v.172$883$1688))) v.177$888$1698)) (cdr v.175$886$1694))) v.176$887$1696)) (car v.175$886$1694)) #f)) (cdr v.173$884$1690)) #f)) (car v.173$884$1690)) #f)) (car v.172$883$1688)) #f)) (cdr v.170$881$1684))) v.171$882$1686)) (car v.170$881$1684)) #f)) (cdr expr$704$1121))))) ((lambda (v.149$860$1718) (if (pair? v.149$860$1718) ((lambda (v.150$861$1720) ((lambda (v$1721) ((lambda (v.151$862$1722) (if (pair? v.151$862$1722) ((lambda (v.152$863$1724) (if (pair? v.152$863$1724) ((lambda (v.153$864$1726) (if (compare$706$1123 v.153$864$1726 (rename$705$1122 (quote set!))) ((lambda (v.154$865$1728) (if (pair? v.154$865$1728) ((lambda (v.155$866$1730) ((lambda (setter$1731) ((lambda (v.156$867$1732) (if (null? v.156$867$1732) ((lambda (v.157$868$1734) (if (pair? v.157$868$1734) ((lambda (v.158$869$1736) (if (pair? v.158$869$1736) ((lambda (v.159$870$1738) ((lambda (g$1739) ((lambda (v.160$871$1740) (if (pair? v.160$871$1740) ((lambda (v.161$872$1742) (if (list? v.161$872$1742) ((lambda (s$1744) ((lambda (v.162$873$1745) (if (null? v.162$873$1745) ((lambda (v.163$874$1747) (if (pair? v.163$874$1747) ((lambda (v.164$875$1749) (if (list? v.164$875$1749) ((lambda (sk$1751) ((lambda (v.165$876$1752) (if (pair? v.165$876$1752) ((lambda (v.166$877$1754) ((lambda (fk$1755) ((lambda (v.167$878$1756) (if (pair? v.167$878$1756) ((lambda (v.168$879$1758) ((lambda (i$1759) ((lambda (v.169$880$1760) (if (null? v.169$880$1760) (cons (cons-source (rename$705$1122 (quote let)) (cons-source (cons-source (cons-source setter$1731 (cons-source (cons-source (rename$705$1122 (quote lambda)) (cons-source (cons-source (rename$705$1122 (quote x)) (quote ()) (quote (x))) (cons-source (append (map (lambda (s$1762) s$1762) s$1744) (cons-source (rename$705$1122 (quote x)) (quote ()) (quote (x)))) (quote ()) (quote ((s ... x)))) (quote ((x) (s ... x)))) (quote (lambda (x) (s ... x)))) (quote ()) (quote ((lambda (x) (s ... x))))) (quote (setter (lambda (x) (s ... x))))) (quote ()) (quote ((setter (lambda (x) (s ... x)))))) (cons-source (append (map (lambda (sk$1763) sk$1763) sk$1751) (cons-source i$1759 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((setter (lambda (x) (s ... x)))) (sk ... i)))) (quote (let ((setter (lambda (x) (s ... x)))) (sk ... i)))) #f) #f)) (cdr v.167$878$1756))) v.168$879$1758)) (car v.167$878$1756)) #f)) (cdr v.165$876$1752))) v.166$877$1754)) (car v.165$876$1752)) #f)) (cdr v.163$874$1747))) v.164$875$1749) #f)) (car v.163$874$1747)) #f)) (cdr v.157$868$1734)) #f)) (cdr v.160$871$1740))) v.161$872$1742) #f)) (car v.160$871$1740)) #f)) (cdr v.158$869$1736))) v.159$870$1738)) (car v.158$869$1736)) #f)) (car v.157$868$1734)) #f)) (cdr v.151$862$1722)) #f)) (cdr v.154$865$1728))) v.155$866$1730)) (car v.154$865$1728)) #f)) (cdr v.152$863$1724)) #f)) (car v.152$863$1724)) #f)) (car v.151$862$1722)) #f)) (cdr v.149$860$1718))) v.150$861$1720)) (car v.149$860$1718)) #f)) (cdr expr$704$1121))))) ((lambda (v.128$839$1764) (if (pair? v.128$839$1764) ((lambda (v.129$840$1766) ((lambda (v$1767) ((lambda (v.130$841$1768) (if (pair? v.130$841$1768) ((lambda (v.131$842$1770) (if (pair? v.131$842$1770) ((lambda (v.132$843$1772) (if (compare$706$1123 v.132$843$1772 (rename$705$1122 (quote get!))) ((lambda (v.133$844$1774) (if (pair? v.133$844$1774) ((lambda (v.134$845$1776) ((lambda (getter$1777) ((lambda (v.135$846$1778) (if (null? v.135$846$1778) ((lambda (v.136$847$1780) (if (pair? v.136$847$1780) ((lambda (v.137$848$1782) (if (pair? v.137$848$1782) ((lambda (v.138$849$1784) ((lambda (g$1785) ((lambda (v.139$850$1786) (if (pair? v.139$850$1786) ((lambda (v.140$851$1788) ((lambda (s$1789) ((lambda (v.141$852$1790) (if (null? v.141$852$1790) ((lambda (v.142$853$1792) (if (pair? v.142$853$1792) ((lambda (v.143$854$1794) (if (list? v.143$854$1794) ((lambda (sk$1796) ((lambda (v.144$855$1797) (if (pair? v.144$855$1797) ((lambda (v.145$856$1799) ((lambda (fk$1800) ((lambda (v.146$857$1801) (if (pair? v.146$857$1801) ((lambda (v.147$858$1803) ((lambda (i$1804) ((lambda (v.148$859$1805) (if (null? v.148$859$1805) (cons (cons-source (rename$705$1122 (quote let)) (cons-source (cons-source (cons-source getter$1777 (cons-source (cons-source (rename$705$1122 (quote lambda)) (cons-source (quote ()) (cons-source g$1785 (quote ()) (quote (g))) (quote (() g))) (quote (lambda () g))) (quote ()) (quote ((lambda () g)))) (quote (getter (lambda () g)))) (quote ()) (quote ((getter (lambda () g))))) (cons-source (append (map (lambda (sk$1807) sk$1807) sk$1796) (cons-source i$1804 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((getter (lambda () g))) (sk ... i)))) (quote (let ((getter (lambda () g))) (sk ... i)))) #f) #f)) (cdr v.146$857$1801))) v.147$858$1803)) (car v.146$857$1801)) #f)) (cdr v.144$855$1797))) v.145$856$1799)) (car v.144$855$1797)) #f)) (cdr v.142$853$1792))) v.143$854$1794) #f)) (car v.142$853$1792)) #f)) (cdr v.136$847$1780)) #f)) (cdr v.139$850$1786))) v.140$851$1788)) (car v.139$850$1786)) #f)) (cdr v.137$848$1782))) v.138$849$1784)) (car v.137$848$1782)) #f)) (car v.136$847$1780)) #f)) (cdr v.130$841$1768)) #f)) (cdr v.133$844$1774))) v.134$845$1776)) (car v.133$844$1774)) #f)) (cdr v.131$842$1770)) #f)) (car v.131$842$1770)) #f)) (car v.130$841$1768)) #f)) (cdr v.128$839$1764))) v.129$840$1766)) (car v.128$839$1764)) #f)) (cdr expr$704$1121))))) ((lambda (v.111$822$1808) (if (pair? v.111$822$1808) ((lambda (v.112$823$1810) ((lambda (v$1811) ((lambda (v.113$824$1812) (if (pair? v.113$824$1812) ((lambda (v.114$825$1814) (if (pair? v.114$825$1814) ((lambda (v.115$826$1816) (if (compare$706$1123 v.115$826$1816 (rename$705$1122 (quote not))) ((lambda (v.116$827$1818) (if (pair? v.116$827$1818) ((lambda (v.117$828$1820) ((lambda (p$1821) ((lambda (v.118$829$1822) (if (null? v.118$829$1822) ((lambda (v.119$830$1824) (if (pair? v.119$830$1824) ((lambda (v.120$831$1826) ((lambda (g+s$1827) ((lambda (v.121$832$1828) (if (pair? v.121$832$1828) ((lambda (v.122$833$1830) (if (list? v.122$833$1830) ((lambda (sk$1832) ((lambda (v.123$834$1833) (if (pair? v.123$834$1833) ((lambda (v.124$835$1835) ((lambda (fk$1836) ((lambda (v.125$836$1837) (if (pair? v.125$836$1837) ((lambda (v.126$837$1839) ((lambda (i$1840) ((lambda (v.127$838$1841) (if (null? v.127$838$1841) (cons (cons-source (rename$705$1122 (quote match-one)) (cons-source v$1811 (cons-source p$1821 (cons-source g+s$1827 (cons-source (cons-source (rename$705$1122 (quote match-drop-ids)) (cons-source fk$1836 (quote ()) (quote (fk))) (quote (match-drop-ids fk))) (cons-source (append (map (lambda (sk$1843) sk$1843) sk$1832) (cons-source i$1840 (quote ()) (quote (i)))) (cons-source i$1840 (quote ()) (quote (i))) (quote ((sk ... i) i))) (quote ((match-drop-ids fk) (sk ... i) i))) (quote (g+s (match-drop-ids fk) (sk ... i) i))) (quote (p g+s (match-drop-ids fk) (sk ... i) i))) (quote (v p g+s (match-drop-ids fk) (sk ... i) i))) (quote (match-one v p g+s (match-drop-ids fk) (sk ... i) i))) #f) #f)) (cdr v.125$836$1837))) v.126$837$1839)) (car v.125$836$1837)) #f)) (cdr v.123$834$1833))) v.124$835$1835)) (car v.123$834$1833)) #f)) (cdr v.121$832$1828))) v.122$833$1830) #f)) (car v.121$832$1828)) #f)) (cdr v.119$830$1824))) v.120$831$1826)) (car v.119$830$1824)) #f)) (cdr v.113$824$1812)) #f)) (cdr v.116$827$1818))) v.117$828$1820)) (car v.116$827$1818)) #f)) (cdr v.114$825$1814)) #f)) (car v.114$825$1814)) #f)) (car v.113$824$1812)) #f)) (cdr v.111$822$1808))) v.112$823$1810)) (car v.111$822$1808)) #f)) (cdr expr$704$1121))))) ((lambda (v.96$807$1844) (if (pair? v.96$807$1844) ((lambda (v.97$808$1846) ((lambda (v$1847) ((lambda (v.98$809$1848) (if (pair? v.98$809$1848) ((lambda (v.99$810$1850) (if (pair? v.99$810$1850) ((lambda (v.100$811$1852) (if (compare$706$1123 v.100$811$1852 (rename$705$1122 (quote or))) ((lambda (v.101$812$1854) (if (list? v.101$812$1854) ((lambda (p$1856) ((lambda (v.102$813$1857) (if (pair? v.102$813$1857) ((lambda (v.103$814$1859) ((lambda (g+s$1860) ((lambda (v.104$815$1861) (if (pair? v.104$815$1861) ((lambda (v.105$816$1863) ((lambda (sk$1864) ((lambda (v.106$817$1865) (if (pair? v.106$817$1865) ((lambda (v.107$818$1867) ((lambda (fk$1868) ((lambda (v.108$819$1869) (if (pair? v.108$819$1869) ((lambda (v.109$820$1871) ((lambda (i$1872) ((lambda (v.110$821$1873) (if (null? v.110$821$1873) (cons (cons-source (rename$705$1122 (quote match-extract-underscore)) (cons-source (cons-source (rename$705$1122 (quote or)) p$1856 (quote (or p ...))) (cons-source (cons-source (rename$705$1122 (quote match-gen-or)) (cons-source v$1847 (cons-source p$1856 (cons-source g+s$1860 (cons-source sk$1864 (cons-source fk$1868 (cons-source i$1872 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (v (p ...) g+s sk fk i))) (quote (match-gen-or v (p ...) g+s sk fk i))) (cons-source i$1872 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-or v (p ...) g+s sk fk i) i ()))) (quote ((or p ...) (match-gen-or v (p ...) g+s sk fk i) i ()))) (quote (match-extract-underscore (or p ...) (match-gen-or v (p ...) g+s sk fk i) i ()))) #f) #f)) (cdr v.108$819$1869))) v.109$820$1871)) (car v.108$819$1869)) #f)) (cdr v.106$817$1865))) v.107$818$1867)) (car v.106$817$1865)) #f)) (cdr v.104$815$1861))) v.105$816$1863)) (car v.104$815$1861)) #f)) (cdr v.102$813$1857))) v.103$814$1859)) (car v.102$813$1857)) #f)) (cdr v.98$809$1848))) v.101$812$1854) #f)) (cdr v.99$810$1850)) #f)) (car v.99$810$1850)) #f)) (car v.98$809$1848)) #f)) (cdr v.96$807$1844))) v.97$808$1846)) (car v.96$807$1844)) #f)) (cdr expr$704$1121))))) ((lambda (v.87$798$1875) (if (pair? v.87$798$1875) ((lambda (v.88$799$1877) ((lambda (v$1878) ((lambda (v.89$800$1879) (if (pair? v.89$800$1879) ((lambda (v.90$801$1881) (if (pair? v.90$801$1881) ((lambda (v.91$802$1883) (if (compare$706$1123 v.91$802$1883 (rename$705$1122 (quote or))) ((lambda (v.92$803$1885) (if (pair? v.92$803$1885) ((lambda (v.93$804$1887) ((lambda (p$1888) ((lambda (v.94$805$1889) (if (null? v.94$805$1889) ((lambda (v.95$806$1891) ((lambda (x$1892) (cons (cons-source (rename$705$1122 (quote match-one)) (cons-source v$1878 (cons-source p$1888 x$1892 (quote (p . x))) (quote (v p . x))) (quote (match-one v p . x))) #f)) v.95$806$1891)) (cdr v.89$800$1879)) #f)) (cdr v.92$803$1885))) v.93$804$1887)) (car v.92$803$1885)) #f)) (cdr v.90$801$1881)) #f)) (car v.90$801$1881)) #f)) (car v.89$800$1879)) #f)) (cdr v.87$798$1875))) v.88$799$1877)) (car v.87$798$1875)) #f)) (cdr expr$704$1121))))) ((lambda (v.72$783$1893) (if (pair? v.72$783$1893) ((lambda (v.73$784$1895) ((lambda (v$1896) ((lambda (v.74$785$1897) (if (pair? v.74$785$1897) ((lambda (v.75$786$1899) (if (pair? v.75$786$1899) ((lambda (v.76$787$1901) (if (compare$706$1123 v.76$787$1901 (rename$705$1122 (quote or))) ((lambda (v.77$788$1903) (if (null? v.77$788$1903) ((lambda (v.78$789$1905) (if (pair? v.78$789$1905) ((lambda (v.79$790$1907) ((lambda (g+s$1908) ((lambda (v.80$791$1909) (if (pair? v.80$791$1909) ((lambda (v.81$792$1911) ((lambda (sk$1912) ((lambda (v.82$793$1913) (if (pair? v.82$793$1913) ((lambda (v.83$794$1915) ((lambda (fk$1916) ((lambda (v.84$795$1917) (if (pair? v.84$795$1917) ((lambda (v.85$796$1919) ((lambda (i$1920) ((lambda (v.86$797$1921) (if (null? v.86$797$1921) (cons fk$1916 #f) #f)) (cdr v.84$795$1917))) v.85$796$1919)) (car v.84$795$1917)) #f)) (cdr v.82$793$1913))) v.83$794$1915)) (car v.82$793$1913)) #f)) (cdr v.80$791$1909))) v.81$792$1911)) (car v.80$791$1909)) #f)) (cdr v.78$789$1905))) v.79$790$1907)) (car v.78$789$1905)) #f)) (cdr v.74$785$1897)) #f)) (cdr v.75$786$1899)) #f)) (car v.75$786$1899)) #f)) (car v.74$785$1897)) #f)) (cdr v.72$783$1893))) v.73$784$1895)) (car v.72$783$1893)) #f)) (cdr expr$704$1121))))) ((lambda (v.55$766$1923) (if (pair? v.55$766$1923) ((lambda (v.56$767$1925) ((lambda (v$1926) ((lambda (v.57$768$1927) (if (pair? v.57$768$1927) ((lambda (v.58$769$1929) (if (pair? v.58$769$1929) ((lambda (v.59$770$1931) (if (compare$706$1123 v.59$770$1931 (rename$705$1122 (quote and))) ((lambda (v.60$771$1933) (if (pair? v.60$771$1933) ((lambda (v.61$772$1935) ((lambda (p$1936) ((lambda (v.62$773$1937) (if (list? v.62$773$1937) ((lambda (q$1939) ((lambda (v.63$774$1940) (if (pair? v.63$774$1940) ((lambda (v.64$775$1942) ((lambda (g+s$1943) ((lambda (v.65$776$1944) (if (pair? v.65$776$1944) ((lambda (v.66$777$1946) ((lambda (sk$1947) ((lambda (v.67$778$1948) (if (pair? v.67$778$1948) ((lambda (v.68$779$1950) ((lambda (fk$1951) ((lambda (v.69$780$1952) (if (pair? v.69$780$1952) ((lambda (v.70$781$1954) ((lambda (i$1955) ((lambda (v.71$782$1956) (if (null? v.71$782$1956) (cons (cons-source (rename$705$1122 (quote match-one)) (cons-source v$1926 (cons-source p$1936 (cons-source g+s$1943 (cons-source (cons-source (rename$705$1122 (quote match-one)) (cons-source v$1926 (cons-source (cons-source (rename$705$1122 (quote and)) q$1939 (quote (and q ...))) (cons-source g+s$1943 (cons-source sk$1947 (cons-source fk$1951 (quote ()) (quote (fk))) (quote (sk fk))) (quote (g+s sk fk))) (quote ((and q ...) g+s sk fk))) (quote (v (and q ...) g+s sk fk))) (quote (match-one v (and q ...) g+s sk fk))) (cons-source fk$1951 (cons-source i$1955 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-one v (and q ...) g+s sk fk) fk i))) (quote (g+s (match-one v (and q ...) g+s sk fk) fk i))) (quote (p g+s (match-one v (and q ...) g+s sk fk) fk i))) (quote (v p g+s (match-one v (and q ...) g+s sk fk) fk i))) (quote (match-one v p g+s (match-one v (and q ...) g+s sk fk) fk i))) #f) #f)) (cdr v.69$780$1952))) v.70$781$1954)) (car v.69$780$1952)) #f)) (cdr v.67$778$1948))) v.68$779$1950)) (car v.67$778$1948)) #f)) (cdr v.65$776$1944))) v.66$777$1946)) (car v.65$776$1944)) #f)) (cdr v.63$774$1940))) v.64$775$1942)) (car v.63$774$1940)) #f)) (cdr v.57$768$1927))) v.62$773$1937) #f)) (cdr v.60$771$1933))) v.61$772$1935)) (car v.60$771$1933)) #f)) (cdr v.58$769$1929)) #f)) (car v.58$769$1929)) #f)) (car v.57$768$1927)) #f)) (cdr v.55$766$1923))) v.56$767$1925)) (car v.55$766$1923)) #f)) (cdr expr$704$1121))))) ((lambda (v.40$751$1958) (if (pair? v.40$751$1958) ((lambda (v.41$752$1960) ((lambda (v$1961) ((lambda (v.42$753$1962) (if (pair? v.42$753$1962) ((lambda (v.43$754$1964) (if (pair? v.43$754$1964) ((lambda (v.44$755$1966) (if (compare$706$1123 v.44$755$1966 (rename$705$1122 (quote and))) ((lambda (v.45$756$1968) (if (null? v.45$756$1968) ((lambda (v.46$757$1970) (if (pair? v.46$757$1970) ((lambda (v.47$758$1972) ((lambda (g+s$1973) ((lambda (v.48$759$1974) (if (pair? v.48$759$1974) ((lambda (v.49$760$1976) (if (list? v.49$760$1976) ((lambda (sk$1978) ((lambda (v.50$761$1979) (if (pair? v.50$761$1979) ((lambda (v.51$762$1981) ((lambda (fk$1982) ((lambda (v.52$763$1983) (if (pair? v.52$763$1983) ((lambda (v.53$764$1985) ((lambda (i$1986) ((lambda (v.54$765$1987) (if (null? v.54$765$1987) (cons (append (map (lambda (sk$1989) sk$1989) sk$1978) (cons-source i$1986 (quote ()) (quote (i)))) #f) #f)) (cdr v.52$763$1983))) v.53$764$1985)) (car v.52$763$1983)) #f)) (cdr v.50$761$1979))) v.51$762$1981)) (car v.50$761$1979)) #f)) (cdr v.48$759$1974))) v.49$760$1976) #f)) (car v.48$759$1974)) #f)) (cdr v.46$757$1970))) v.47$758$1972)) (car v.46$757$1970)) #f)) (cdr v.42$753$1962)) #f)) (cdr v.43$754$1964)) #f)) (car v.43$754$1964)) #f)) (car v.42$753$1962)) #f)) (cdr v.40$751$1958))) v.41$752$1960)) (car v.40$751$1958)) #f)) (cdr expr$704$1121))))) ((lambda (v.31$742$1990) (if (pair? v.31$742$1990) ((lambda (v.32$743$1992) ((lambda (v$1993) ((lambda (v.33$744$1994) (if (pair? v.33$744$1994) ((lambda (v.34$745$1996) (if (pair? v.34$745$1996) ((lambda (v.35$746$1998) (if (compare$706$1123 v.35$746$1998 (rename$705$1122 (quote quasiquote))) ((lambda (v.36$747$2000) (if (pair? v.36$747$2000) ((lambda (v.37$748$2002) ((lambda (p$2003) ((lambda (v.38$749$2004) (if (null? v.38$749$2004) ((lambda (v.39$750$2006) ((lambda (x$2007) (cons (cons-source (rename$705$1122 (quote match-quasiquote)) (cons-source v$1993 (cons-source p$2003 x$2007 (quote (p . x))) (quote (v p . x))) (quote (match-quasiquote v p . x))) #f)) v.39$750$2006)) (cdr v.33$744$1994)) #f)) (cdr v.36$747$2000))) v.37$748$2002)) (car v.36$747$2000)) #f)) (cdr v.34$745$1996)) #f)) (car v.34$745$1996)) #f)) (car v.33$744$1994)) #f)) (cdr v.31$742$1990))) v.32$743$1992)) (car v.31$742$1990)) #f)) (cdr expr$704$1121))))) ((lambda (v.14$725$2008) (if (pair? v.14$725$2008) ((lambda (v.15$726$2010) ((lambda (v$2011) ((lambda (v.16$727$2012) (if (pair? v.16$727$2012) ((lambda (v.17$728$2014) (if (pair? v.17$728$2014) ((lambda (v.18$729$2016) (if (compare$706$1123 v.18$729$2016 (rename$705$1122 (quote quote))) ((lambda (v.19$730$2018) (if (pair? v.19$730$2018) ((lambda (v.20$731$2020) ((lambda (p$2021) ((lambda (v.21$732$2022) (if (null? v.21$732$2022) ((lambda (v.22$733$2024) (if (pair? v.22$733$2024) ((lambda (v.23$734$2026) ((lambda (g+s$2027) ((lambda (v.24$735$2028) (if (pair? v.24$735$2028) ((lambda (v.25$736$2030) (if (list? v.25$736$2030) ((lambda (sk$2032) ((lambda (v.26$737$2033) (if (pair? v.26$737$2033) ((lambda (v.27$738$2035) ((lambda (fk$2036) ((lambda (v.28$739$2037) (if (pair? v.28$739$2037) ((lambda (v.29$740$2039) ((lambda (i$2040) ((lambda (v.30$741$2041) (if (null? v.30$741$2041) (cons (cons-source (rename$705$1122 (quote if)) (cons-source (cons-source (rename$705$1122 (quote equal?)) (cons-source v$2011 (cons-source (cons-source (rename$705$1122 (quote quote)) (cons-source p$2021 (quote ()) (quote (p))) (quote (quote p))) (quote ()) (quote ((quote p)))) (quote (v (quote p)))) (quote (equal? v (quote p)))) (cons-source (append (map (lambda (sk$2043) sk$2043) sk$2032) (cons-source i$2040 (quote ()) (quote (i)))) (cons-source fk$2036 (quote ()) (quote (fk))) (quote ((sk ... i) fk))) (quote ((equal? v (quote p)) (sk ... i) fk))) (quote (if (equal? v (quote p)) (sk ... i) fk))) #f) #f)) (cdr v.28$739$2037))) v.29$740$2039)) (car v.28$739$2037)) #f)) (cdr v.26$737$2033))) v.27$738$2035)) (car v.26$737$2033)) #f)) (cdr v.24$735$2028))) v.25$736$2030) #f)) (car v.24$735$2028)) #f)) (cdr v.22$733$2024))) v.23$734$2026)) (car v.22$733$2024)) #f)) (cdr v.16$727$2012)) #f)) (cdr v.19$730$2018))) v.20$731$2020)) (car v.19$730$2018)) #f)) (cdr v.17$728$2014)) #f)) (car v.17$728$2014)) #f)) (car v.16$727$2012)) #f)) (cdr v.14$725$2008))) v.15$726$2010)) (car v.14$725$2008)) #f)) (cdr expr$704$1121))))) ((lambda (v.1$712$2044) (if (pair? v.1$712$2044) ((lambda (v.2$713$2046) ((lambda (v$2047) ((lambda (v.3$714$2048) (if (pair? v.3$714$2048) ((lambda (v.4$715$2050) (if (null? v.4$715$2050) ((lambda (v.5$716$2052) (if (pair? v.5$716$2052) ((lambda (v.6$717$2054) ((lambda (g+s$2055) ((lambda (v.7$718$2056) (if (pair? v.7$718$2056) ((lambda (v.8$719$2058) (if (list? v.8$719$2058) ((lambda (sk$2060) ((lambda (v.9$720$2061) (if (pair? v.9$720$2061) ((lambda (v.10$721$2063) ((lambda (fk$2064) ((lambda (v.11$722$2065) (if (pair? v.11$722$2065) ((lambda (v.12$723$2067) ((lambda (i$2068) ((lambda (v.13$724$2069) (if (null? v.13$724$2069) (cons (cons-source (rename$705$1122 (quote if)) (cons-source (cons-source (rename$705$1122 (quote null?)) (cons-source v$2047 (quote ()) (quote (v))) (quote (null? v))) (cons-source (append (map (lambda (sk$2071) sk$2071) sk$2060) (cons-source i$2068 (quote ()) (quote (i)))) (cons-source fk$2064 (quote ()) (quote (fk))) (quote ((sk ... i) fk))) (quote ((null? v) (sk ... i) fk))) (quote (if (null? v) (sk ... i) fk))) #f) #f)) (cdr v.11$722$2065))) v.12$723$2067)) (car v.11$722$2065)) #f)) (cdr v.9$720$2061))) v.10$721$2063)) (car v.9$720$2061)) #f)) (cdr v.7$718$2056))) v.8$719$2058) #f)) (car v.7$718$2056)) #f)) (cdr v.5$716$2052))) v.6$717$2054)) (car v.5$716$2052)) #f)) (cdr v.3$714$2048)) #f)) (car v.3$714$2048)) #f)) (cdr v.1$712$2044))) v.2$713$2046)) (car v.1$712$2044)) #f)) (cdr expr$704$1121))))) (match-underscore lambda (expr$620$641 rename$621$642 compare$622$643) (car ((lambda (tmp$645$647) (if tmp$645$647 tmp$645$647 (cons (error "no expansion for" expr$620$641) #f))) ((lambda (v.1$628$648) (if (pair? v.1$628$648) ((lambda (v.2$629$650) ((lambda (v$651) ((lambda (v.3$630$652) (if (pair? v.3$630$652) ((lambda (v.4$631$654) ((lambda (p$655) ((lambda (v.5$632$656) (if (pair? v.5$632$656) ((lambda (v.6$633$658) ((lambda (g+s$659) ((lambda (v.7$634$660) (if (pair? v.7$634$660) ((lambda (v.8$635$662) (if (list? v.8$635$662) ((lambda (sk$664) ((lambda (v.9$636$665) (if (pair? v.9$636$665) ((lambda (v.10$637$667) ((lambda (fk$668) ((lambda (v.11$638$669) (if (pair? v.11$638$669) ((lambda (v.12$639$671) ((lambda (i$672) ((lambda (v.13$640$673) (if (null? v.13$640$673) (cons (cons-source (rename$621$642 (quote underscore?)) (cons-source p$655 (cons-source (append (map (lambda (sk$675) sk$675) sk$664) (cons-source i$672 (quote ()) (quote (i)))) (cons-source (cons-source (rename$621$642 (quote match-two)) (cons-source v$651 (cons-source p$655 (cons-source g+s$659 (cons-source sk$664 (cons-source fk$668 (cons-source i$672 (quote ()) (quote (i))) (quote (fk i))) (quote ((sk ...) fk i))) (quote (g+s (sk ...) fk i))) (quote (p g+s (sk ...) fk i))) (quote (v p g+s (sk ...) fk i))) (quote (match-two v p g+s (sk ...) fk i))) (quote ()) (quote ((match-two v p g+s (sk ...) fk i)))) (quote ((sk ... i) (match-two v p g+s (sk ...) fk i)))) (quote (p (sk ... i) (match-two v p g+s (sk ...) fk i)))) (quote (underscore? p (sk ... i) (match-two v p g+s (sk ...) fk i)))) #f) #f)) (cdr v.11$638$669))) v.12$639$671)) (car v.11$638$669)) #f)) (cdr v.9$636$665))) v.10$637$667)) (car v.9$636$665)) #f)) (cdr v.7$634$660))) v.8$635$662) #f)) (car v.7$634$660)) #f)) (cdr v.5$632$656))) v.6$633$658)) (car v.5$632$656)) #f)) (cdr v.3$630$652))) v.4$631$654)) (car v.3$630$652)) #f)) (cdr v.1$628$648))) v.2$629$650)) (car v.1$628$648)) #f)) (cdr expr$620$641))))) (underscore? lambda (expr$531$553 rename$532$554 compare$533$555) (car ((lambda (tmp$557$559) (if tmp$557$559 tmp$557$559 ((lambda (tmp$561$563) (if tmp$561$563 tmp$561$563 (cons (error "no expansion for" expr$531$553) #f))) ((lambda (v.8$546$564) (if (pair? v.8$546$564) ((lambda (v.9$547$566) ((lambda (x$567) ((lambda (v.10$548$568) (if (pair? v.10$548$568) ((lambda (v.11$549$570) ((lambda (kt$571) ((lambda (v.12$550$572) (if (pair? v.12$550$572) ((lambda (v.13$551$574) ((lambda (kf$575) ((lambda (v.14$552$576) (if (null? v.14$552$576) (cons kf$575 #f) #f)) (cdr v.12$550$572))) v.13$551$574)) (car v.12$550$572)) #f)) (cdr v.10$548$568))) v.11$549$570)) (car v.10$548$568)) #f)) (cdr v.8$546$564))) v.9$547$566)) (car v.8$546$564)) #f)) (cdr expr$531$553))))) ((lambda (v.1$539$578) (if (pair? v.1$539$578) ((lambda (v.2$540$580) (if (compare$533$555 v.2$540$580 (rename$532$554 (quote _))) ((lambda (v.3$541$582) (if (pair? v.3$541$582) ((lambda (v.4$542$584) ((lambda (kt$585) ((lambda (v.5$543$586) (if (pair? v.5$543$586) ((lambda (v.6$544$588) ((lambda (kf$589) ((lambda (v.7$545$590) (if (null? v.7$545$590) (cons kt$585 #f) #f)) (cdr v.5$543$586))) v.6$544$588)) (car v.5$543$586)) #f)) (cdr v.3$541$582))) v.4$542$584)) (car v.3$541$582)) #f)) (cdr v.1$539$578)) #f)) (car v.1$539$578)) #f)) (cdr expr$531$553))))) (match-one lambda (expr$422$448 rename$423$449 compare$424$450) (car ((lambda (tmp$452$454) (if tmp$452$454 tmp$452$454 ((lambda (tmp$456$458) (if tmp$456$458 tmp$456$458 (cons (error "no expansion for" expr$422$448) #f))) ((lambda (v.18$447$459) ((lambda (x$460) (cons (cons-source (rename$423$449 (quote match-underscore)) x$460 (quote (match-underscore . x))) #f)) v.18$447$459)) (cdr expr$422$448))))) ((lambda (v.1$430$461) (if (pair? v.1$430$461) ((lambda (v.2$431$463) ((lambda (v$464) ((lambda (v.3$432$465) (if (pair? v.3$432$465) ((lambda (v.4$433$467) (if (pair? v.4$433$467) ((lambda (v.5$434$469) ((lambda (p$470) ((lambda (v.6$435$471) (if (pair? v.6$435$471) ((lambda (v.7$436$473) ((lambda (q$474) ((lambda (v.8$437$475) ((lambda (r$476) ((lambda (v.9$438$477) (if (pair? v.9$438$477) ((lambda (v.10$439$479) ((lambda (g+s$480) ((lambda (v.11$440$481) (if (pair? v.11$440$481) ((lambda (v.12$441$483) ((lambda (sk$484) ((lambda (v.13$442$485) (if (pair? v.13$442$485) ((lambda (v.14$443$487) ((lambda (fk$488) ((lambda (v.15$444$489) (if (pair? v.15$444$489) ((lambda (v.16$445$491) ((lambda (i$492) ((lambda (v.17$446$493) (if (null? v.17$446$493) (cons (cons-source (rename$423$449 (quote match-check-ellipsis)) (cons-source q$474 (cons-source (cons-source (rename$423$449 (quote match-extract-underscore)) (cons-source p$470 (cons-source (cons-source (rename$423$449 (quote match-gen-ellipsis)) (cons-source v$464 (cons-source p$470 (cons-source r$476 (cons-source g+s$480 (cons-source sk$484 (cons-source fk$488 (cons-source i$492 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (r g+s sk fk i))) (quote (p r g+s sk fk i))) (quote (v p r g+s sk fk i))) (quote (match-gen-ellipsis v p r g+s sk fk i))) (cons-source i$492 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (p (match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (match-extract-underscore p (match-gen-ellipsis v p r g+s sk fk i) i ()))) (cons-source (cons-source (rename$423$449 (quote match-underscore)) (cons-source v$464 (cons-source (cons-source p$470 (cons-source q$474 r$476 (quote (q . r))) (quote (p q . r))) (cons-source g+s$480 (cons-source sk$484 (cons-source fk$488 (cons-source i$492 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p q . r) g+s sk fk i))) (quote (v (p q . r) g+s sk fk i))) (quote (match-underscore v (p q . r) g+s sk fk i))) (quote ()) (quote ((match-underscore v (p q . r) g+s sk fk i)))) (quote ((match-extract-underscore p (match-gen-ellipsis v p r g+s sk fk i) i ()) (match-underscore v (p q . r) g+s sk fk i)))) (quote (q (match-extract-underscore p (match-gen-ellipsis v p r g+s sk fk i) i ()) (match-underscore v (p q . r) g+s sk fk i)))) (quote (match-check-ellipsis q (match-extract-underscore p (match-gen-ellipsis v p r g+s sk fk i) i ()) (match-underscore v (p q . r) g+s sk fk i)))) #f) #f)) (cdr v.15$444$489))) v.16$445$491)) (car v.15$444$489)) #f)) (cdr v.13$442$485))) v.14$443$487)) (car v.13$442$485)) #f)) (cdr v.11$440$481))) v.12$441$483)) (car v.11$440$481)) #f)) (cdr v.9$438$477))) v.10$439$479)) (car v.9$438$477)) #f)) (cdr v.3$432$465))) v.8$437$475)) (cdr v.6$435$471))) v.7$436$473)) (car v.6$435$471)) #f)) (cdr v.4$433$467))) v.5$434$469)) (car v.4$433$467)) #f)) (car v.3$432$465)) #f)) (cdr v.1$430$461))) v.2$431$463)) (car v.1$430$461)) #f)) (cdr expr$422$448))))) (match-next lambda (expr$260$297 rename$261$298 compare$262$299) (car ((lambda (tmp$301$303) (if tmp$301$303 tmp$301$303 ((lambda (tmp$305$307) (if tmp$305$307 tmp$305$307 ((lambda (tmp$309$311) (if tmp$309$311 tmp$309$311 (cons (error "no expansion for" expr$260$297) #f))) ((lambda (v.21$288$312) (if (pair? v.21$288$312) ((lambda (v.22$289$314) ((lambda (v$315) ((lambda (v.23$290$316) (if (pair? v.23$290$316) ((lambda (v.24$291$318) ((lambda (g+s$319) ((lambda (v.25$292$320) (if (pair? v.25$292$320) ((lambda (v.26$293$322) (if (pair? v.26$293$322) ((lambda (v.27$294$324) ((lambda (pat$325) ((lambda (v.28$295$326) ((lambda (body$327) ((lambda (v.29$296$328) ((lambda (rest$329) (cons (cons-source (rename$261$298 (quote match-next)) (cons-source v$315 (cons-source g+s$319 (cons-source (cons-source pat$325 (cons-source (cons-source (rename$261$298 (quote =>)) (cons-source (rename$261$298 (quote failure)) (quote ()) (quote (failure))) (quote (=> failure))) body$327 (quote ((=> failure) . body))) (quote (pat (=> failure) . body))) rest$329 (quote ((pat (=> failure) . body) . rest))) (quote (g+s (pat (=> failure) . body) . rest))) (quote (v g+s (pat (=> failure) . body) . rest))) (quote (match-next v g+s (pat (=> failure) . body) . rest))) #f)) v.29$296$328)) (cdr v.25$292$320))) v.28$295$326)) (cdr v.26$293$322))) v.27$294$324)) (car v.26$293$322)) #f)) (car v.25$292$320)) #f)) (cdr v.23$290$316))) v.24$291$318)) (car v.23$290$316)) #f)) (cdr v.21$288$312))) v.22$289$314)) (car v.21$288$312)) #f)) (cdr expr$260$297))))) ((lambda (v.6$273$330) (if (pair? v.6$273$330) ((lambda (v.7$274$332) ((lambda (v$333) ((lambda (v.8$275$334) (if (pair? v.8$275$334) ((lambda (v.9$276$336) ((lambda (g+s$337) ((lambda (v.10$277$338) (if (pair? v.10$277$338) ((lambda (v.11$278$340) (if (pair? v.11$278$340) ((lambda (v.12$279$342) ((lambda (pat$343) ((lambda (v.13$280$344) (if (pair? v.13$280$344) ((lambda (v.14$281$346) (if (pair? v.14$281$346) ((lambda (v.15$282$348) (if (compare$262$299 v.15$282$348 (rename$261$298 (quote =>))) ((lambda (v.16$283$350) (if (pair? v.16$283$350) ((lambda (v.17$284$352) ((lambda (failure$353) ((lambda (v.18$285$354) (if (null? v.18$285$354) ((lambda (v.19$286$356) ((lambda (body$357) ((lambda (v.20$287$358) ((lambda (rest$359) (cons (cons-source (rename$261$298 (quote let)) (cons-source (cons-source (cons-source failure$353 (cons-source (cons-source (rename$261$298 (quote lambda)) (cons-source (quote ()) (cons-source (cons-source (rename$261$298 (quote match-next)) (cons-source v$333 (cons-source g+s$337 rest$359 (quote (g+s . rest))) (quote (v g+s . rest))) (quote (match-next v g+s . rest))) (quote ()) (quote ((match-next v g+s . rest)))) (quote (() (match-next v g+s . rest)))) (quote (lambda () (match-next v g+s . rest)))) (quote ()) (quote ((lambda () (match-next v g+s . rest))))) (quote (failure (lambda () (match-next v g+s . rest))))) (quote ()) (quote ((failure (lambda () (match-next v g+s . rest)))))) (cons-source (cons-source (rename$261$298 (quote match-one)) (cons-source v$333 (cons-source pat$343 (cons-source g+s$337 (cons-source (cons-source (rename$261$298 (quote match-drop-ids)) (cons-source (cons-source (rename$261$298 (quote begin)) body$357 (quote (begin . body))) (quote ()) (quote ((begin . body)))) (quote (match-drop-ids (begin . body)))) (cons-source (cons-source failure$353 (quote ()) (quote (failure))) (cons-source (quote ()) (quote ()) (quote (()))) (quote ((failure) ()))) (quote ((match-drop-ids (begin . body)) (failure) ()))) (quote (g+s (match-drop-ids (begin . body)) (failure) ()))) (quote (pat g+s (match-drop-ids (begin . body)) (failure) ()))) (quote (v pat g+s (match-drop-ids (begin . body)) (failure) ()))) (quote (match-one v pat g+s (match-drop-ids (begin . body)) (failure) ()))) (quote ()) (quote ((match-one v pat g+s (match-drop-ids (begin . body)) (failure) ())))) (quote (((failure (lambda () (match-next v g+s . rest)))) (match-one v pat g+s (match-drop-ids (begin . body)) (failure) ())))) (quote (let ((failure (lambda () (match-next v g+s . rest)))) (match-one v pat g+s (match-drop-ids (begin . body)) (failure) ())))) #f)) v.20$287$358)) (cdr v.10$277$338))) v.19$286$356)) (cdr v.13$280$344)) #f)) (cdr v.16$283$350))) v.17$284$352)) (car v.16$283$350)) #f)) (cdr v.14$281$346)) #f)) (car v.14$281$346)) #f)) (car v.13$280$344)) #f)) (cdr v.11$278$340))) v.12$279$342)) (car v.11$278$340)) #f)) (car v.10$277$338)) #f)) (cdr v.8$275$334))) v.9$276$336)) (car v.8$275$334)) #f)) (cdr v.6$273$330))) v.7$274$332)) (car v.6$273$330)) #f)) (cdr expr$260$297))))) ((lambda (v.1$268$360) (if (pair? v.1$268$360) ((lambda (v.2$269$362) ((lambda (v$363) ((lambda (v.3$270$364) (if (pair? v.3$270$364) ((lambda (v.4$271$366) ((lambda (g+s$367) ((lambda (v.5$272$368) (if (null? v.5$272$368) (cons (cons-source (rename$261$298 (quote error)) (cons-source (cons-source (rename$261$298 (quote quote)) (cons-source (rename$261$298 (quote match)) (quote ()) (quote (match))) (quote (quote match))) (cons-source "no matching pattern" (quote ()) (quote ("no matching pattern"))) (quote ((quote match) "no matching pattern"))) (quote (error (quote match) "no matching pattern"))) #f) #f)) (cdr v.3$270$364))) v.4$271$366)) (car v.3$270$364)) #f)) (cdr v.1$268$360))) v.2$269$362)) (car v.1$268$360)) #f)) (cdr expr$260$297))))) (match lambda (expr$32$75 rename$33$76 compare$34$77) (car ((lambda (tmp$79$81) (if tmp$79$81 tmp$79$81 ((lambda (tmp$83$85) (if tmp$83$85 tmp$83$85 ((lambda (tmp$87$89) (if tmp$87$89 tmp$87$89 ((lambda (tmp$91$93) (if tmp$91$93 tmp$91$93 ((lambda (tmp$95$97) (if tmp$95$97 tmp$95$97 (cons (error "no expansion for" expr$32$75) #f))) ((lambda (v.26$65$98) (if (pair? v.26$65$98) ((lambda (v.27$66$100) ((lambda (atom$101) ((lambda (v.28$67$102) ((lambda (w.29$68$104 pat-ls31$70$105 body-ls32$71$106) ((lambda (lp.30$69$107) (set! lp.30$69$107 (lambda (w.29$68$108 pat-ls31$70$109 body-ls32$71$110) (if (null? w.29$68$108) ((lambda (pat$111 body$112) (cons (cons-source (rename$33$76 (quote let)) (cons-source (cons-source (cons-source (rename$33$76 (quote v)) (cons-source atom$101 (quote ()) (quote (atom))) (quote (v atom))) (quote ()) (quote ((v atom)))) (cons-source (cons-source (rename$33$76 (quote match-next)) (cons-source (rename$33$76 (quote v)) (cons-source (cons-source atom$101 (cons-source (cons-source (rename$33$76 (quote set!)) (cons-source atom$101 (quote ()) (quote (atom))) (quote (set! atom))) (quote ()) (quote ((set! atom)))) (quote (atom (set! atom)))) (map (lambda (pat$113 body$114) (cons-source pat$113 body$114 (quote (pat . body)))) pat$111 body$112) (quote ((atom (set! atom)) (pat . body) ...))) (quote (v (atom (set! atom)) (pat . body) ...))) (quote (match-next v (atom (set! atom)) (pat . body) ...))) (quote ()) (quote ((match-next v (atom (set! atom)) (pat . body) ...)))) (quote (((v atom)) (match-next v (atom (set! atom)) (pat . body) ...)))) (quote (let ((v atom)) (match-next v (atom (set! atom)) (pat . body) ...)))) #f)) (reverse pat-ls31$70$109) (reverse body-ls32$71$110)) (if (pair? w.29$68$108) ((lambda (v.33$72$116) (if (pair? v.33$72$116) ((lambda (v.34$73$118) ((lambda (pat$119) ((lambda (v.35$74$120) ((lambda (body$121) (lp.30$69$107 (cdr w.29$68$108) (cons pat$119 pat-ls31$70$109) (cons body$121 body-ls32$71$110))) v.35$74$120)) (cdr v.33$72$116))) v.34$73$118)) (car v.33$72$116)) #f)) (car w.29$68$108)) #f)))) (lp.30$69$107 w.29$68$104 pat-ls31$70$105 body-ls32$71$106)) #f)) v.28$67$102 (quote ()) (quote ()))) (cdr v.26$65$98))) v.27$66$100)) (car v.26$65$98)) #f)) (cdr expr$32$75))))) ((lambda (v.15$54$122) (if (pair? v.15$54$122) ((lambda (v.16$55$124) (if (vector? v.16$55$124) ((lambda (v.17$56$126) (if (list? v.17$56$126) ((lambda (vec$128) ((lambda (v.18$57$129) ((lambda (w.19$58$131 pat-ls21$60$132 body-ls22$61$133) ((lambda (lp.20$59$134) (set! lp.20$59$134 (lambda (w.19$58$135 pat-ls21$60$136 body-ls22$61$137) (if (null? w.19$58$135) ((lambda (pat$138 body$139) (cons (cons-source (rename$33$76 (quote let)) (cons-source (cons-source (cons-source (rename$33$76 (quote v)) (cons-source (list->vector vec$128) (quote ()) (quote (#(vec ...)))) (quote (v #(vec ...)))) (quote ()) (quote ((v #(vec ...))))) (cons-source (cons-source (rename$33$76 (quote match-next)) (cons-source (rename$33$76 (quote v)) (cons-source (cons-source (rename$33$76 (quote v)) (cons-source (cons-source (rename$33$76 (quote set!)) (cons-source (rename$33$76 (quote v)) (quote ()) (quote (v))) (quote (set! v))) (quote ()) (quote ((set! v)))) (quote (v (set! v)))) (map (lambda (pat$140 body$141) (cons-source pat$140 body$141 (quote (pat . body)))) pat$138 body$139) (quote ((v (set! v)) (pat . body) ...))) (quote (v (v (set! v)) (pat . body) ...))) (quote (match-next v (v (set! v)) (pat . body) ...))) (quote ()) (quote ((match-next v (v (set! v)) (pat . body) ...)))) (quote (((v #(vec ...))) (match-next v (v (set! v)) (pat . body) ...)))) (quote (let ((v #(vec ...))) (match-next v (v (set! v)) (pat . body) ...)))) #f)) (reverse pat-ls21$60$136) (reverse body-ls22$61$137)) (if (pair? w.19$58$135) ((lambda (v.23$62$143) (if (pair? v.23$62$143) ((lambda (v.24$63$145) ((lambda (pat$146) ((lambda (v.25$64$147) ((lambda (body$148) (lp.20$59$134 (cdr w.19$58$135) (cons pat$146 pat-ls21$60$136) (cons body$148 body-ls22$61$137))) v.25$64$147)) (cdr v.23$62$143))) v.24$63$145)) (car v.23$62$143)) #f)) (car w.19$58$135)) #f)))) (lp.20$59$134 w.19$58$131 pat-ls21$60$132 body-ls22$61$133)) #f)) v.18$57$129 (quote ()) (quote ()))) (cdr v.15$54$122))) v.17$56$126) #f)) (vector->list v.16$55$124)) #f)) (car v.15$54$122)) #f)) (cdr expr$32$75))))) ((lambda (v.5$44$149) (if (pair? v.5$44$149) ((lambda (v.6$45$151) (if (list? v.6$45$151) ((lambda (app$153) ((lambda (v.7$46$154) ((lambda (w.8$47$156 pat-ls10$49$157 body-ls11$50$158) ((lambda (lp.9$48$159) (set! lp.9$48$159 (lambda (w.8$47$160 pat-ls10$49$161 body-ls11$50$162) (if (null? w.8$47$160) ((lambda (pat$163 body$164) (cons (cons-source (rename$33$76 (quote let)) (cons-source (cons-source (cons-source (rename$33$76 (quote v)) (cons-source app$153 (quote ()) (quote ((app ...)))) (quote (v (app ...)))) (quote ()) (quote ((v (app ...))))) (cons-source (cons-source (rename$33$76 (quote match-next)) (cons-source (rename$33$76 (quote v)) (cons-source (cons-source app$153 (cons-source (cons-source (rename$33$76 (quote set!)) (cons-source app$153 (quote ()) (quote ((app ...)))) (quote (set! (app ...)))) (quote ()) (quote ((set! (app ...))))) (quote ((app ...) (set! (app ...))))) (map (lambda (pat$165 body$166) (cons-source pat$165 body$166 (quote (pat . body)))) pat$163 body$164) (quote (((app ...) (set! (app ...))) (pat . body) ...))) (quote (v ((app ...) (set! (app ...))) (pat . body) ...))) (quote (match-next v ((app ...) (set! (app ...))) (pat . body) ...))) (quote ()) (quote ((match-next v ((app ...) (set! (app ...))) (pat . body) ...)))) (quote (((v (app ...))) (match-next v ((app ...) (set! (app ...))) (pat . body) ...)))) (quote (let ((v (app ...))) (match-next v ((app ...) (set! (app ...))) (pat . body) ...)))) #f)) (reverse pat-ls10$49$161) (reverse body-ls11$50$162)) (if (pair? w.8$47$160) ((lambda (v.12$51$168) (if (pair? v.12$51$168) ((lambda (v.13$52$170) ((lambda (pat$171) ((lambda (v.14$53$172) ((lambda (body$173) (lp.9$48$159 (cdr w.8$47$160) (cons pat$171 pat-ls10$49$161) (cons body$173 body-ls11$50$162))) v.14$53$172)) (cdr v.12$51$168))) v.13$52$170)) (car v.12$51$168)) #f)) (car w.8$47$160)) #f)))) (lp.9$48$159 w.8$47$156 pat-ls10$49$157 body-ls11$50$158)) #f)) v.7$46$154 (quote ()) (quote ()))) (cdr v.5$44$149))) v.6$45$151) #f)) (car v.5$44$149)) #f)) (cdr expr$32$75))))) ((lambda (v.2$41$174) (if (pair? v.2$41$174) ((lambda (v.3$42$176) ((lambda (atom$177) ((lambda (v.4$43$178) (if (null? v.4$43$178) (cons (cons-source (rename$33$76 (quote match-syntax-error)) (cons-source "no match clauses" (quote ()) (quote ("no match clauses"))) (quote (match-syntax-error "no match clauses"))) #f) #f)) (cdr v.2$41$174))) v.3$42$176)) (car v.2$41$174)) #f)) (cdr expr$32$75))))) ((lambda (v.1$40$180) (if (null? v.1$40$180) (cons (cons-source (rename$33$76 (quote match-syntax-error)) (cons-source "missing match expression" (quote ()) (quote ("missing match expression"))) (quote (match-syntax-error "missing match expression"))) #f) #f)) (cdr expr$32$75))))) (match-syntax-error lambda (expr$5$14 rename$6$15 compare$7$16) (car ((lambda (tmp$18$20) (if tmp$18$20 tmp$18$20 (cons (error "no expansion for" expr$5$14) #f))) ((lambda (v.1$13$21) (if (null? v.1$13$21) (cons (cons-source (rename$6$15 (quote match-syntax-error)) (cons-source "invalid match-syntax-error usage" (quote ()) (quote ("invalid match-syntax-error usage"))) (quote (match-syntax-error "invalid match-syntax-error usage"))) #f) #f)) (cdr expr$5$14))))))